{
  "specificationHash": "41f73b698b0d5ecba2268fed9361e48ba0e3cc2c4abb313b30a4e0b9be7dd242",
  "artifact": {
    "artifactSymbol": {
      "id": "ce4b7adc-4741-4bf0-b03d-0af8c4c92746",
      "type": "TOKEN_TEMPLATE",
      "visual": "[&tau;<sub>N</sub>{<i>~d,t,s,e,b</i>}+&phi;File]",
      "tooling": "[tN{~d,t,s,e,b}+phFile]",
      "version": "1.0",
      "templateValidated": true
    },
    "name": "Document",
    "aliases": [
      "Document",
      "File",
      "Invoice",
      "PDF"
    ],
    "artifactDefinition": {
      "businessDescription": "Used to represent a document that may be a scanned or PDF printed document. It records the document hash to check for tampering, a file path to fetch the file from storage as well as the ability to be encumbered. Implements the File property-set.",
      "businessExample": "For example: you may choose to create an invoice token from an invoice document.  You can then allow another token or contract representing a loan or proof of financing to encumber the document establishing a link between the two.",
      "analogies": [
        {
          "name": "Scanned Document",
          "description": "A scanned copy of a certificate, like a diploma or industry certification"
        }
      ]
    },
    "dependencies": [
      {
        "description": "Non-Fungible",
        "symbol": {
          "id": "8314a797-df3c-409b-835c-0e80af92714f",
          "visual": "&tau<sub>N</sub>",
          "tooling": "tN",
          "version": "1.0",
          "templateValidated": true
        }
      }
    ],
    "incompatibleWithSymbols": [
      {
        "id": "6e3501dc-5800-4c71-b59e-ad11418a998c",
        "type": "BEHAVIOR",
        "visual": "<i>d</i>",
        "tooling": "d",
        "version": "1.0"
      },
      {
        "id": "f9224e90-3cab-45bf-b5dc-0175121e2ead",
        "type": "BEHAVIOR",
        "visual": "<i>m</i>",
        "tooling": "m",
        "version": "1.0"
      }
    ],
    "artifactFiles": [
      {
        "content": "CONTROL",
        "fileName": "Document.proto"
      },
      {
        "content": "UML",
        "fileName": "Document.md"
      }
    ],
    "maps": {}
  },
  "tokenBase": {
    "artifact": {
      "artifactSymbol": {
        "id": "8314a797-df3c-409b-835c-0e80af92714f",
        "visual": "&tau<sub>N</sub>{<i>d</i>}",
        "tooling": "tN{d}",
        "version": "1.0",
        "templateValidated": true
      },
      "name": "Fractional Non-Fungible Token",
      "aliases": [
        "Time Share",
        "Limited Membership"
      ],
      "artifactDefinition": {
        "businessDescription": "Every non-fungible token is unique and some will need to allow for fractional ownership. A non-fungible token is not interchangeable with other tokens of the same class as they typically have different values.  A property title is a good example of a non-fungible token where the value of different real estate titles is not equal and freely exchanging them is a bad idea. Some Non-fungible tokens will need to be represented with their own class, meaning it will share no common properties with other tokens from the same template. Other non-fungible tokens can exist within the same class and have some shared property values while also having unique property values between instances.",
        "businessExample": "Membership, Time Share vacation property.",
        "analogies": [
          {
            "name": "Time Share",
            "description": "The physical property title is split between multiple owners who each own a percentage of the title."
          }
        ],
        "comments": "Fractional Non-fungible tokens require additional thought about how these tokens may or may not be grouped together in the same class."
      },
      "dependencies": [
        {
          "description": "Base Token Definition",
          "symbol": {
            "id": "5f5c4e7f-8ff1-4767-b59c-799d49753226",
            "visual": "&tau",
            "tooling": "t",
            "version": "1.0",
            "templateValidated": true
          }
        }
      ],
      "incompatibleWithSymbols": [
        {
          "id": "d5807a8e-879b-4885-95fa-f09ba2a22172",
          "type": "BEHAVIOR",
          "visual": "<i>~d</i>",
          "tooling": "~d",
          "version": "1.0"
        }
      ],
      "artifactFiles": [
        {
          "content": "CONTROL",
          "fileName": "fractional-non-fungible.proto"
        },
        {
          "content": "UML",
          "fileName": "fractional-non-fungible.md"
        }
      ],
      "maps": {}
    },
    "tokenType": "NON_FUNGIBLE",
    "quantity": "1",
    "constructorName": "Constructor"
  },
  "behaviors": [
    {
      "artifact": {
        "artifactSymbol": {
          "id": "c1189d7a-e142-4504-bf26-44c35b76c9d6",
          "type": "BEHAVIOR",
          "visual": "<i>s</i>",
          "tooling": "s",
          "version": "1.0"
        },
        "name": "Singleton",
        "aliases": [
          "Unique",
          "One and Only"
        ],
        "artifactDefinition": {
          "businessDescription": "A restriction on the token in that there can only be 1 whole token in the class and is not subdividable. This behavior is only available to non-fungible base types.  By definition, a Singleton cannot be mintable.",
          "analogies": [
            {
              "name": "Analogy 1",
              "description": "singleton analogy 1 description"
            }
          ]
        },
        "dependencies": [
          {
            "description": "Singleton must be have a non-fungible base.",
            "symbol": {
              "id": "8314a797-df3c-409b-835c-0e80af92714f",
              "visual": "&tau<sub>N</sub>",
              "tooling": "tN",
              "version": "1.0",
              "templateValidated": true
            }
          },
          {
            "description": "Singleton requires non-sub-dividable.",
            "symbol": {
              "id": "d5807a8e-879b-4885-95fa-f09ba2a22172",
              "type": "BEHAVIOR",
              "visual": "<i>~d</i>",
              "tooling": "~d",
              "version": "1.0"
            }
          }
        ],
        "incompatibleWithSymbols": [
          {
            "id": "6e3501dc-5800-4c71-b59e-ad11418a998c",
            "type": "BEHAVIOR",
            "visual": "<i>d</i>",
            "tooling": "d",
            "version": "1.0"
          },
          {
            "id": "f9224e90-3cab-45bf-b5dc-0175121e2ead",
            "type": "BEHAVIOR",
            "visual": "<i>m</i>",
            "tooling": "m",
            "version": "1.0"
          }
        ],
        "artifactFiles": [
          {
            "content": "CONTROL",
            "fileName": "singleton.proto"
          },
          {
            "content": "UML",
            "fileName": "singleton.md"
          }
        ],
        "maps": {
          "codeReferences": [
            {
              "name": "Code 1",
              "platform": "DAML"
            }
          ],
          "implementationReferences": [
            {
              "mappingType": "IMPLEMENTATION",
              "name": "Implementation 1",
              "platform": "CHAINCODE_GO"
            }
          ],
          "resources": [
            {
              "mappingType": "RESOURCE",
              "name": "Regulation Reference 1"
            }
          ]
        }
      },
      "isExternal": true
    },
    {
      "artifact": {
        "artifactSymbol": {
          "id": "d5807a8e-879b-4885-95fa-f09ba2a22172",
          "type": "BEHAVIOR",
          "visual": "<i>~d</i>",
          "tooling": "~d",
          "version": "1.0"
        },
        "name": "Non-Subdividable",
        "aliases": [
          "Whole"
        ],
        "artifactDefinition": {
          "businessDescription": "An ability or restriction on the token where it cannot be subdivided from a single whole token into fractions. Sets the base token Decimals property to 0 which will make the token non-sub-dividable and a whole token is the smallest ownable unit of the token.",
          "businessExample": "Non-subdividable is common for items where subdivision does not make sense, like a property title, inventory item or invoice.",
          "analogies": [
            {
              "name": "Non-Fractional",
              "description": "It is not possible to own a fraction of this token."
            },
            {
              "name": "Barrel of Oil",
              "description": "Barrels of Oil don't make sense to subdivide."
            }
          ]
        },
        "incompatibleWithSymbols": [
          {
            "id": "6e3501dc-5800-4c71-b59e-ad11418a998c",
            "type": "BEHAVIOR",
            "visual": "<i>d</i>",
            "tooling": "d",
            "version": "1.0"
          }
        ],
        "artifactFiles": [
          {
            "content": "CONTROL",
            "fileName": "non-subdividable.proto"
          },
          {
            "content": "UML",
            "fileName": "non-subdividable.md"
          }
        ],
        "maps": {
          "codeReferences": [
            {
              "name": "Code 1",
              "platform": "DAML"
            }
          ],
          "implementationReferences": [
            {
              "mappingType": "IMPLEMENTATION",
              "name": "Implementation 1",
              "platform": "CHAINCODE_GO"
            }
          ],
          "resources": [
            {
              "mappingType": "RESOURCE",
              "name": "Regulation Reference 1"
            }
          ]
        }
      },
      "isExternal": true,
      "properties": [
        {
          "name": "Decimals",
          "valueDescription": "Set to Zero, not allowing any subdivision",
          "templateValue": "0",
          "propertyInvocations": [
            {
              "id": "2ca7fbb2-ce98-4dda-a6ae-e4ac2527bb33",
              "name": "GetDecimals",
              "description": "Should return 0",
              "request": {
                "controlMessageName": "GetDecimalsRequest"
              },
              "response": {
                "controlMessageName": "GetDecimalsResponse",
                "description": "Return 0",
                "outputParameters": [
                  {
                    "name": "Decimals",
                    "valueDescription": "0"
                  }
                ]
              }
            },
            {
              "id": "2ca7fbb2-ce98-4dda-a6ae-e4ac2527bb33",
              "name": "GetDecimals",
              "description": "Should return 0",
              "request": {
                "controlMessageName": "GetDecimalsRequest"
              },
              "response": {
                "controlMessageName": "GetDecimalsResponse",
                "description": "Return 0",
                "outputParameters": [
                  {
                    "name": "Decimals",
                    "valueDescription": "0"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "artifact": {
        "artifactSymbol": {
          "id": "af119e58-6d84-4ca6-9656-75e8d312f038",
          "type": "BEHAVIOR",
          "visual": "<i>t</i>",
          "tooling": "t",
          "version": "1.0"
        },
        "name": "Transferable",
        "artifactDefinition": {
          "businessDescription": "Every token instance has an owner. The Transferable behavior provides the owner the ability to transfer the ownership to another party or account. This behavior is often inferred by other behaviors that might exist like Redeem, Sell, etc. This behavior is Delegable. If the token definition is Delegable, TransferFrom will be available.",
          "analogies": [
            {
              "name": "Analogy 1",
              "description": "transferable analogy 1 description"
            }
          ]
        },
        "incompatibleWithSymbols": [
          {
            "id": "a4fa4ca8-6afd-452b-91f5-7103b6fee5e5",
            "type": "BEHAVIOR",
            "visual": "<i>~t</i>",
            "tooling": "~t",
            "version": "1.0"
          }
        ],
        "influencedBySymbols": [
          {
            "description": "If the token is Delegable, TransferFrom should be enabled.",
            "symbol": {
              "type": "BEHAVIOR",
              "visual": "<i>g</i>",
              "tooling": "g"
            }
          }
        ],
        "artifactFiles": [
          {
            "content": "CONTROL",
            "fileName": "transferable.proto"
          },
          {
            "content": "UML",
            "fileName": "transferable.md"
          }
        ],
        "maps": {
          "codeReferences": [
            {
              "name": "Code 1",
              "platform": "DAML"
            }
          ],
          "implementationReferences": [
            {
              "mappingType": "IMPLEMENTATION",
              "name": "Implementation 1",
              "platform": "CHAINCODE_GO"
            }
          ],
          "resources": [
            {
              "mappingType": "RESOURCE",
              "name": "Regulation Reference 1"
            }
          ]
        }
      },
      "isExternal": true
    },
    {
      "artifact": {
        "artifactSymbol": {
          "id": "803297a1-c0f9-4898-9d44-29c9d41cca97",
          "type": "BEHAVIOR",
          "visual": "<i>b</i>",
          "tooling": "b",
          "version": "1.0"
        },
        "name": "Burnable",
        "aliases": [
          "Retire"
        ],
        "artifactDefinition": {
          "businessDescription": "A token class that implements this behavior will support the burning or decommissioning of token instances of the class. This does not delete a token, but rather places it in a permanent non-use state.  Burning is a one way operation and cannot be reversed. This behavior is Delegable. If the token definition is Delegable, BurnFrom will be available.",
          "businessExample": "When a token is used in a certain way, you may want to remove it from circulation or from being used again. Since the ledger doesn't allow for deletions, burning a token essentially 'deletes' the token from being used, but not from history.",
          "analogies": [
            {
              "name": "Oil Barrels",
              "description": "If you mint a new token for each barrel of oil created, you may transfer ownership several times until the barrel is refined. The refining process should burn the barrel of oil to remove it from circulation."
            },
            {
              "name": "Redeem",
              "description": "A token that is a coupon or single use ticket, should be burned when it is redeemed."
            }
          ]
        },
        "influencedBySymbols": [
          {
            "description": "Delegable or not, will determine if the BurnFrom Control will be available in the implementation.",
            "symbol": {
              "id": "a3d02076-6009-4a65-9ed4-2deffe5291e1",
              "type": "BEHAVIOR",
              "visual": "<i>g</i>",
              "tooling": "g",
              "version": "1.0"
            }
          }
        ],
        "artifactFiles": [
          {
            "content": "CONTROL",
            "fileName": "burnable.proto"
          },
          {
            "content": "UML",
            "fileName": "burnable.md"
          }
        ],
        "maps": {
          "codeReferences": [
            {
              "name": "Open Zeppelin",
              "referencePath": "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20Burnable.sol"
            }
          ],
          "resources": [
            {
              "mappingType": "RESOURCE",
              "name": "Regulation Reference 1"
            }
          ]
        }
      },
      "isExternal": true
    },
    {
      "artifact": {
        "artifactSymbol": {
          "id": "dc8d5961-59e8-4a10-8b38-d9e99394d251",
          "type": "BEHAVIOR",
          "visual": "<i>e</i>",
          "tooling": "e",
          "version": "1.0"
        },
        "name": "Encumberable",
        "aliases": [
          "Restricted",
          "Supervised"
        ],
        "artifactDefinition": {
          "businessDescription": "A token class that implements this behavior will have restrictions preventing certain behaviors like transferable, burnable, etc. from working while it is encumbered. The encumbering party should make a request to encumber, the owner should be notified about the request, and accept the request, which will finalize the encumbrance and send the EncumberResponse message to the requestor.",
          "businessExample": "For example, a property title's owner may have obtained a loan from a bank to purchase the property. The loan represents a contract between the owner of the property and the bank, this loan encumbers the property title preventing the owner from being able to sell the property, transferable, to another party until the loan is paid off. Paying off the loan will remove the encumber, which will allow transferable to be invoked.",
          "analogies": [
            {
              "name": "Loan",
              "description": "A token can represent an asset that the owner took out a loan to obtain. If so, the token will need to be encumbered by the loan contract preventing the owner from selling the asset until the loan is repaid."
            }
          ],
          "comments": "The token definition should have a Encumbered property or structure that may allow only one encumber or allow multiple."
        },
        "artifactFiles": [
          {
            "content": "CONTROL",
            "fileName": "encumberable.proto"
          },
          {
            "content": "UML",
            "fileName": "encumberable.md"
          }
        ],
        "maps": {
          "codeReferences": [
            {
              "name": "Code 1",
              "platform": "DAML"
            }
          ],
          "implementationReferences": [
            {
              "mappingType": "IMPLEMENTATION",
              "name": "Implementation 1",
              "platform": "CHAINCODE_GO"
            }
          ],
          "resources": [
            {
              "mappingType": "RESOURCE",
              "name": "Regulation Reference 1"
            }
          ]
        }
      },
      "isExternal": true,
      "properties": [
        {
          "name": "Encumbrances",
          "valueDescription": "List of Encumbered",
          "propertyInvocations": [
            {
              "id": "9e39bf6a-74dc-4ca1-a709-5db247aaa31b",
              "name": "GetEncumbrancesRequest",
              "description": "The property value.",
              "request": {
                "controlMessageName": "GetEncumbrancesRequest"
              },
              "response": {
                "controlMessageName": "GetEncumbrancesResponse",
                "description": "Return value",
                "outputParameters": [
                  {
                    "name": "Encumbrances",
                    "valueDescription": "List of Encumbered"
                  }
                ]
              }
            }
          ]
        },
        {
          "name": "Encumbered",
          "valueDescription": "True or False",
          "propertyInvocations": [
            {
              "id": "f35cdfee-d2f4-4a01-bf9b-33774b5df241",
              "name": "GetEncumberedRequest",
              "description": "The property value.",
              "request": {
                "controlMessageName": "GetEncumberedRequest"
              },
              "response": {
                "controlMessageName": "GetEncumberedResponse",
                "description": "Return value",
                "outputParameters": [
                  {
                    "name": "Encumbered",
                    "valueDescription": "True or False"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}