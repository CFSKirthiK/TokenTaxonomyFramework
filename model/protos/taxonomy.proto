syntax = "proto3";

package taxonomy.model;
import "core.proto";
import "artifact.proto";
option csharp_namespace = "TTI.TTF.Taxonomy.Model";
option java_package = "org.tti.ttf.taxonomy.model";
option java_multiple_files = true;

//each collection defined in a map with the index being the symbol of the artifact for the collection.
message Taxonomy{
    TaxonomyVersion version = 1;
    map<string, taxonomy.model.core.Base> base_token_types = 2;
    map<string, taxonomy.model.core.Behavior> behaviors = 3;
    map<string, taxonomy.model.core.BehaviorGroup> behavior_groups = 4;
    map<string, taxonomy.model.core.PropertySet> property_sets = 5;
    Hierarchy token_template_hierarchy = 6;
    map<string, taxonomy.model.core.TokenDefinition> token_definitions = 7;
    taxonomy.model.artifact.FormulaGrammar formula_grammar = 8;
}

message TaxonomyVersion{
    string id = 1;
    string version = 2;
    string state_hash = 3;
}

message Hierarchy {
    BranchRoot fractional_fungibles = 1;
    BranchRoot whole_fungibles = 2;
    BranchRoot fractional_non_fungibles = 3;
    BranchRoot singletons = 4;
    HybridBranchRoot hybrids = 5;
}

message BranchIdentifier{
    taxonomy.model.artifact.TokenType token_type = 1;
    taxonomy.model.artifact.ClassificationBranch branch = 2;
    string base_template_id = 3;
}

message BranchRoot{
    BranchIdentifier branch_identifier = 1;
    string parent_id = 2;
    string name = 3;
    taxonomy.model.core.TokenTemplate template = 4;
    repeated taxonomy.model.core.TokenDefinition token_definitions = 5;
    repeated TemplateBranch branches = 6;
}

message HybridBranchRoot{
    BranchRoot fractional_fungibles = 1;
    BranchRoot whole_fungibles = 2;
    BranchRoot fractional_non_fungibles = 3;
    BranchRoot singletons = 4;
}

//used to dynamically build a heirarchy off a BranchRoot.
message TemplateBranch{
    string template_parent_id = 1;
    string name = 3;
    taxonomy.model.core.TokenTemplate template = 4;
    repeated taxonomy.model.core.TokenDefinition token_definitions = 5;
    repeated BranchRoot branches = 6;
    BranchRoot parent_branch = 7;
}

