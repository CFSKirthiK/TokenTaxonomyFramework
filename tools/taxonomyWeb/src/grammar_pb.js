/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.taxonomy.model.grammar.BehaviorList', null, global);
goog.exportSymbol('proto.taxonomy.model.grammar.FormulaGrammar', null, global);
goog.exportSymbol('proto.taxonomy.model.grammar.HybridTokenFormula', null, global);
goog.exportSymbol('proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula', null, global);
goog.exportSymbol('proto.taxonomy.model.grammar.PropertySetListItem', null, global);
goog.exportSymbol('proto.taxonomy.model.grammar.SingleToken', null, global);
goog.exportSymbol('proto.taxonomy.model.grammar.TokenBase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.FormulaGrammar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.grammar.FormulaGrammar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.FormulaGrammar.displayName = 'proto.taxonomy.model.grammar.FormulaGrammar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.HybridTokenFormula = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.grammar.HybridTokenFormula.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.grammar.HybridTokenFormula, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.HybridTokenFormula.displayName = 'proto.taxonomy.model.grammar.HybridTokenFormula';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.displayName = 'proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.SingleToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.grammar.SingleToken.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.grammar.SingleToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.SingleToken.displayName = 'proto.taxonomy.model.grammar.SingleToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.TokenBase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.grammar.TokenBase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.TokenBase.displayName = 'proto.taxonomy.model.grammar.TokenBase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.BehaviorList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.grammar.BehaviorList.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.grammar.BehaviorList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.BehaviorList.displayName = 'proto.taxonomy.model.grammar.BehaviorList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.grammar.PropertySetListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.grammar.PropertySetListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.grammar.PropertySetListItem.displayName = 'proto.taxonomy.model.grammar.PropertySetListItem';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.FormulaGrammar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.FormulaGrammar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.FormulaGrammar.toObject = function(includeInstance, msg) {
  var obj = {
    singleToken: (f = msg.getSingleToken()) && proto.taxonomy.model.grammar.SingleToken.toObject(includeInstance, f),
    hybrid: (f = msg.getHybrid()) && proto.taxonomy.model.grammar.HybridTokenFormula.toObject(includeInstance, f),
    hybridWithHybrids: (f = msg.getHybridWithHybrids()) && proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.FormulaGrammar}
 */
proto.taxonomy.model.grammar.FormulaGrammar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.FormulaGrammar;
  return proto.taxonomy.model.grammar.FormulaGrammar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.FormulaGrammar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.FormulaGrammar}
 */
proto.taxonomy.model.grammar.FormulaGrammar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.grammar.SingleToken;
      reader.readMessage(value,proto.taxonomy.model.grammar.SingleToken.deserializeBinaryFromReader);
      msg.setSingleToken(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.grammar.HybridTokenFormula;
      reader.readMessage(value,proto.taxonomy.model.grammar.HybridTokenFormula.deserializeBinaryFromReader);
      msg.setHybrid(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula;
      reader.readMessage(value,proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.deserializeBinaryFromReader);
      msg.setHybridWithHybrids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.FormulaGrammar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.FormulaGrammar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.FormulaGrammar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSingleToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.grammar.SingleToken.serializeBinaryToWriter
    );
  }
  f = message.getHybrid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.grammar.HybridTokenFormula.serializeBinaryToWriter
    );
  }
  f = message.getHybridWithHybrids();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.serializeBinaryToWriter
    );
  }
};


/**
 * optional SingleToken single_token = 1;
 * @return {?proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.getSingleToken = function() {
  return /** @type{?proto.taxonomy.model.grammar.SingleToken} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.SingleToken, 1));
};


/** @param {?proto.taxonomy.model.grammar.SingleToken|undefined} value */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.setSingleToken = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.clearSingleToken = function() {
  this.setSingleToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.hasSingleToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HybridTokenFormula hybrid = 2;
 * @return {?proto.taxonomy.model.grammar.HybridTokenFormula}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.getHybrid = function() {
  return /** @type{?proto.taxonomy.model.grammar.HybridTokenFormula} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.HybridTokenFormula, 2));
};


/** @param {?proto.taxonomy.model.grammar.HybridTokenFormula|undefined} value */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.setHybrid = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.clearHybrid = function() {
  this.setHybrid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.hasHybrid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HybridTokenWithHybridChildrenFormula hybrid_with_hybrids = 3;
 * @return {?proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.getHybridWithHybrids = function() {
  return /** @type{?proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula, 3));
};


/** @param {?proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula|undefined} value */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.setHybridWithHybrids = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.clearHybridWithHybrids = function() {
  this.setHybridWithHybrids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.FormulaGrammar.prototype.hasHybridWithHybrids = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.grammar.HybridTokenFormula.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.HybridTokenFormula.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.HybridTokenFormula} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.HybridTokenFormula.toObject = function(includeInstance, msg) {
  var obj = {
    parent: (f = msg.getParent()) && proto.taxonomy.model.grammar.SingleToken.toObject(includeInstance, f),
    childrenStart: jspb.Message.getFieldWithDefault(msg, 2, ""),
    childTokensList: jspb.Message.toObjectList(msg.getChildTokensList(),
    proto.taxonomy.model.grammar.SingleToken.toObject, includeInstance),
    childrenEnd: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.HybridTokenFormula}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.HybridTokenFormula;
  return proto.taxonomy.model.grammar.HybridTokenFormula.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.HybridTokenFormula} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.HybridTokenFormula}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.grammar.SingleToken;
      reader.readMessage(value,proto.taxonomy.model.grammar.SingleToken.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildrenStart(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.grammar.SingleToken;
      reader.readMessage(value,proto.taxonomy.model.grammar.SingleToken.deserializeBinaryFromReader);
      msg.addChildTokens(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildrenEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.HybridTokenFormula.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.HybridTokenFormula} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.HybridTokenFormula.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.grammar.SingleToken.serializeBinaryToWriter
    );
  }
  f = message.getChildrenStart();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.grammar.SingleToken.serializeBinaryToWriter
    );
  }
  f = message.getChildrenEnd();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SingleToken parent = 1;
 * @return {?proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.getParent = function() {
  return /** @type{?proto.taxonomy.model.grammar.SingleToken} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.SingleToken, 1));
};


/** @param {?proto.taxonomy.model.grammar.SingleToken|undefined} value */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string children_start = 2;
 * @return {string}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.getChildrenStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.setChildrenStart = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SingleToken child_tokens = 3;
 * @return {!Array<!proto.taxonomy.model.grammar.SingleToken>}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.getChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.grammar.SingleToken>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.grammar.SingleToken, 3));
};


/** @param {!Array<!proto.taxonomy.model.grammar.SingleToken>} value */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.setChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.grammar.SingleToken=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.addChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.grammar.SingleToken, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.clearChildTokensList = function() {
  this.setChildTokensList([]);
};


/**
 * optional string children_end = 4;
 * @return {string}
 */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.getChildrenEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.HybridTokenFormula.prototype.setChildrenEnd = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.toObject = function(includeInstance, msg) {
  var obj = {
    parent: (f = msg.getParent()) && proto.taxonomy.model.grammar.SingleToken.toObject(includeInstance, f),
    hybridChildrenStart: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hybridChildTokensList: jspb.Message.toObjectList(msg.getHybridChildTokensList(),
    proto.taxonomy.model.grammar.HybridTokenFormula.toObject, includeInstance),
    hybridChildrenEnd: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula;
  return proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.grammar.SingleToken;
      reader.readMessage(value,proto.taxonomy.model.grammar.SingleToken.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHybridChildrenStart(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.grammar.HybridTokenFormula;
      reader.readMessage(value,proto.taxonomy.model.grammar.HybridTokenFormula.deserializeBinaryFromReader);
      msg.addHybridChildTokens(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHybridChildrenEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taxonomy.model.grammar.SingleToken.serializeBinaryToWriter
    );
  }
  f = message.getHybridChildrenStart();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHybridChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.grammar.HybridTokenFormula.serializeBinaryToWriter
    );
  }
  f = message.getHybridChildrenEnd();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SingleToken parent = 1;
 * @return {?proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.getParent = function() {
  return /** @type{?proto.taxonomy.model.grammar.SingleToken} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.SingleToken, 1));
};


/** @param {?proto.taxonomy.model.grammar.SingleToken|undefined} value */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.setParent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.clearParent = function() {
  this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hybrid_children_start = 2;
 * @return {string}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.getHybridChildrenStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.setHybridChildrenStart = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated HybridTokenFormula hybrid_child_tokens = 3;
 * @return {!Array<!proto.taxonomy.model.grammar.HybridTokenFormula>}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.getHybridChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.grammar.HybridTokenFormula>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.grammar.HybridTokenFormula, 3));
};


/** @param {!Array<!proto.taxonomy.model.grammar.HybridTokenFormula>} value */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.setHybridChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.grammar.HybridTokenFormula=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.grammar.HybridTokenFormula}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.addHybridChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.grammar.HybridTokenFormula, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.clearHybridChildTokensList = function() {
  this.setHybridChildTokensList([]);
};


/**
 * optional string hybrid_children_end = 4;
 * @return {string}
 */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.getHybridChildrenEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula.prototype.setHybridChildrenEnd = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.grammar.SingleToken.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.SingleToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.SingleToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.SingleToken.toObject = function(includeInstance, msg) {
  var obj = {
    groupStart: jspb.Message.getFieldWithDefault(msg, 1, ""),
    baseToken: (f = msg.getBaseToken()) && proto.taxonomy.model.grammar.TokenBase.toObject(includeInstance, f),
    behaviors: (f = msg.getBehaviors()) && proto.taxonomy.model.grammar.BehaviorList.toObject(includeInstance, f),
    propertySetsList: jspb.Message.toObjectList(msg.getPropertySetsList(),
    proto.taxonomy.model.grammar.PropertySetListItem.toObject, includeInstance),
    groupEnd: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.grammar.SingleToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.SingleToken;
  return proto.taxonomy.model.grammar.SingleToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.SingleToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.grammar.SingleToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupStart(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.grammar.TokenBase;
      reader.readMessage(value,proto.taxonomy.model.grammar.TokenBase.deserializeBinaryFromReader);
      msg.setBaseToken(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.grammar.BehaviorList;
      reader.readMessage(value,proto.taxonomy.model.grammar.BehaviorList.deserializeBinaryFromReader);
      msg.setBehaviors(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.grammar.PropertySetListItem;
      reader.readMessage(value,proto.taxonomy.model.grammar.PropertySetListItem.deserializeBinaryFromReader);
      msg.addPropertySets(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.SingleToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.SingleToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.SingleToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupStart();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBaseToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.grammar.TokenBase.serializeBinaryToWriter
    );
  }
  f = message.getBehaviors();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.grammar.BehaviorList.serializeBinaryToWriter
    );
  }
  f = message.getPropertySetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.taxonomy.model.grammar.PropertySetListItem.serializeBinaryToWriter
    );
  }
  f = message.getGroupEnd();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string group_start = 1;
 * @return {string}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.getGroupStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.SingleToken.prototype.setGroupStart = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TokenBase base_token = 2;
 * @return {?proto.taxonomy.model.grammar.TokenBase}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.getBaseToken = function() {
  return /** @type{?proto.taxonomy.model.grammar.TokenBase} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.TokenBase, 2));
};


/** @param {?proto.taxonomy.model.grammar.TokenBase|undefined} value */
proto.taxonomy.model.grammar.SingleToken.prototype.setBaseToken = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.SingleToken.prototype.clearBaseToken = function() {
  this.setBaseToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.hasBaseToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BehaviorList behaviors = 3;
 * @return {?proto.taxonomy.model.grammar.BehaviorList}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.getBehaviors = function() {
  return /** @type{?proto.taxonomy.model.grammar.BehaviorList} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.grammar.BehaviorList, 3));
};


/** @param {?proto.taxonomy.model.grammar.BehaviorList|undefined} value */
proto.taxonomy.model.grammar.SingleToken.prototype.setBehaviors = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.grammar.SingleToken.prototype.clearBehaviors = function() {
  this.setBehaviors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.hasBehaviors = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PropertySetListItem property_sets = 4;
 * @return {!Array<!proto.taxonomy.model.grammar.PropertySetListItem>}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.getPropertySetsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.grammar.PropertySetListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.grammar.PropertySetListItem, 4));
};


/** @param {!Array<!proto.taxonomy.model.grammar.PropertySetListItem>} value */
proto.taxonomy.model.grammar.SingleToken.prototype.setPropertySetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.taxonomy.model.grammar.PropertySetListItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.grammar.PropertySetListItem}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.addPropertySets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.taxonomy.model.grammar.PropertySetListItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.grammar.SingleToken.prototype.clearPropertySetsList = function() {
  this.setPropertySetsList([]);
};


/**
 * optional string group_end = 5;
 * @return {string}
 */
proto.taxonomy.model.grammar.SingleToken.prototype.getGroupEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.SingleToken.prototype.setGroupEnd = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.TokenBase.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.TokenBase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.TokenBase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.TokenBase.toObject = function(includeInstance, msg) {
  var obj = {
    baseSymbol: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.TokenBase}
 */
proto.taxonomy.model.grammar.TokenBase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.TokenBase;
  return proto.taxonomy.model.grammar.TokenBase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.TokenBase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.TokenBase}
 */
proto.taxonomy.model.grammar.TokenBase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.TokenBase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.TokenBase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.TokenBase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.TokenBase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string base_symbol = 1;
 * @return {string}
 */
proto.taxonomy.model.grammar.TokenBase.prototype.getBaseSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.TokenBase.prototype.setBaseSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.grammar.BehaviorList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.BehaviorList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.BehaviorList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.BehaviorList.toObject = function(includeInstance, msg) {
  var obj = {
    listStart: jspb.Message.getFieldWithDefault(msg, 1, ""),
    behaviorSymbolList: jspb.Message.getRepeatedField(msg, 2),
    listEnd: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.BehaviorList}
 */
proto.taxonomy.model.grammar.BehaviorList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.BehaviorList;
  return proto.taxonomy.model.grammar.BehaviorList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.BehaviorList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.BehaviorList}
 */
proto.taxonomy.model.grammar.BehaviorList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListStart(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBehaviorSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setListEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.BehaviorList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.BehaviorList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.BehaviorList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListStart();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBehaviorSymbolList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getListEnd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string list_start = 1;
 * @return {string}
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.getListStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.BehaviorList.prototype.setListStart = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string behavior_symbol = 2;
 * @return {!Array<string>}
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.getBehaviorSymbolList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.taxonomy.model.grammar.BehaviorList.prototype.setBehaviorSymbolList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.addBehaviorSymbol = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.clearBehaviorSymbolList = function() {
  this.setBehaviorSymbolList([]);
};


/**
 * optional string list_end = 3;
 * @return {string}
 */
proto.taxonomy.model.grammar.BehaviorList.prototype.getListEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.BehaviorList.prototype.setListEnd = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.grammar.PropertySetListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.grammar.PropertySetListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.grammar.PropertySetListItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.PropertySetListItem.toObject = function(includeInstance, msg) {
  var obj = {
    listStart: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertySetSymbol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.grammar.PropertySetListItem}
 */
proto.taxonomy.model.grammar.PropertySetListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.grammar.PropertySetListItem;
  return proto.taxonomy.model.grammar.PropertySetListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.grammar.PropertySetListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.grammar.PropertySetListItem}
 */
proto.taxonomy.model.grammar.PropertySetListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setListStart(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropertySetSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.grammar.PropertySetListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.grammar.PropertySetListItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.grammar.PropertySetListItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.grammar.PropertySetListItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListStart();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertySetSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string list_start = 1;
 * @return {string}
 */
proto.taxonomy.model.grammar.PropertySetListItem.prototype.getListStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.PropertySetListItem.prototype.setListStart = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string property_set_symbol = 2;
 * @return {string}
 */
proto.taxonomy.model.grammar.PropertySetListItem.prototype.getPropertySetSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.grammar.PropertySetListItem.prototype.setPropertySetSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.taxonomy.model.grammar);
