/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var artifact_pb = require('./artifact_pb.js');
goog.object.extend(proto, artifact_pb);
var grammar_pb = require('./grammar_pb.js');
goog.object.extend(proto, grammar_pb);
goog.exportSymbol('proto.taxonomy.model.core.Base', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Behavior', null, global);
goog.exportSymbol('proto.taxonomy.model.core.BehaviorGroup', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Invocation', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationParameter', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.core.InvocationResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.core.Property', null, global);
goog.exportSymbol('proto.taxonomy.model.core.PropertySet', null, global);
goog.exportSymbol('proto.taxonomy.model.core.TokenTemplate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Base = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Base.repeatedFields_, proto.taxonomy.model.core.Base.oneofGroups_);
};
goog.inherits(proto.taxonomy.model.core.Base, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.Base.displayName = 'proto.taxonomy.model.core.Base';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Behavior = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Behavior.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.Behavior, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.Behavior.displayName = 'proto.taxonomy.model.core.Behavior';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.BehaviorGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.BehaviorGroup.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.BehaviorGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.BehaviorGroup.displayName = 'proto.taxonomy.model.core.BehaviorGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.PropertySet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.PropertySet.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.PropertySet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.PropertySet.displayName = 'proto.taxonomy.model.core.PropertySet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Property = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.Property.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.Property, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.Property.displayName = 'proto.taxonomy.model.core.Property';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.TokenTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.TokenTemplate.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.TokenTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.TokenTemplate.displayName = 'proto.taxonomy.model.core.TokenTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.Invocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.Invocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.Invocation.displayName = 'proto.taxonomy.model.core.Invocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.InvocationRequest.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.InvocationRequest.displayName = 'proto.taxonomy.model.core.InvocationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.core.InvocationResponse.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.InvocationResponse.displayName = 'proto.taxonomy.model.core.InvocationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.core.InvocationParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.core.InvocationParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.core.InvocationParameter.displayName = 'proto.taxonomy.model.core.InvocationParameter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Base.repeatedFields_ = [14];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.taxonomy.model.core.Base.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.taxonomy.model.core.Base.TokenFormulaCase = {
  TOKEN_FORMULA_NOT_SET: 0,
  SINGLE_TOKEN: 3,
  HYBRID: 4,
  HYBRID_WITH_HYBRIDS: 5
};

/**
 * @return {proto.taxonomy.model.core.Base.TokenFormulaCase}
 */
proto.taxonomy.model.core.Base.prototype.getTokenFormulaCase = function() {
  return /** @type {proto.taxonomy.model.core.Base.TokenFormulaCase} */(jspb.Message.computeOneofCase(this, proto.taxonomy.model.core.Base.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Base.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Base.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Base} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Base.toObject = function(includeInstance, msg) {
  var obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    tokenType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    singleToken: (f = msg.getSingleToken()) && grammar_pb.SingleToken.toObject(includeInstance, f),
    hybrid: (f = msg.getHybrid()) && grammar_pb.HybridTokenFormula.toObject(includeInstance, f),
    hybridWithHybrids: (f = msg.getHybridWithHybrids()) && grammar_pb.HybridTokenWithHybridChildrenFormula.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 7, ""),
    owner: jspb.Message.getFieldWithDefault(msg, 8, ""),
    quantity: msg.getQuantity_asB64(),
    decimals: jspb.Message.getFieldWithDefault(msg, 10, 0),
    tokenPropertiesMap: (f = msg.getTokenPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    constructorName: jspb.Message.getFieldWithDefault(msg, 12, ""),
    constructor: (f = msg.getConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    childTokensList: jspb.Message.toObjectList(msg.getChildTokensList(),
    proto.taxonomy.model.core.TokenTemplate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.Base.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Base;
  return proto.taxonomy.model.core.Base.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Base} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.Base.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = /** @type {!proto.taxonomy.model.artifact.TokenType} */ (reader.readEnum());
      msg.setTokenType(value);
      break;
    case 3:
      var value = new grammar_pb.SingleToken;
      reader.readMessage(value,grammar_pb.SingleToken.deserializeBinaryFromReader);
      msg.setSingleToken(value);
      break;
    case 4:
      var value = new grammar_pb.HybridTokenFormula;
      reader.readMessage(value,grammar_pb.HybridTokenFormula.deserializeBinaryFromReader);
      msg.setHybrid(value);
      break;
    case 5:
      var value = new grammar_pb.HybridTokenWithHybridChildrenFormula;
      reader.readMessage(value,grammar_pb.HybridTokenWithHybridChildrenFormula.deserializeBinaryFromReader);
      msg.setHybridWithHybrids(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQuantity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimals(value);
      break;
    case 11:
      var value = msg.getTokenPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setConstructorName(value);
      break;
    case 13:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setConstructor(value);
      break;
    case 14:
      var value = new proto.taxonomy.model.core.TokenTemplate;
      reader.readMessage(value,proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader);
      msg.addChildTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Base.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Base.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Base} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Base.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getTokenType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSingleToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      grammar_pb.SingleToken.serializeBinaryToWriter
    );
  }
  f = message.getHybrid();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      grammar_pb.HybridTokenFormula.serializeBinaryToWriter
    );
  }
  f = message.getHybridWithHybrids();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      grammar_pb.HybridTokenWithHybridChildrenFormula.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getQuantity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTokenPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getConstructorName();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getConstructor();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getChildTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.Base.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.Base.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Base.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional taxonomy.model.artifact.TokenType token_type = 2;
 * @return {!proto.taxonomy.model.artifact.TokenType}
 */
proto.taxonomy.model.core.Base.prototype.getTokenType = function() {
  return /** @type {!proto.taxonomy.model.artifact.TokenType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.taxonomy.model.artifact.TokenType} value */
proto.taxonomy.model.core.Base.prototype.setTokenType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional taxonomy.model.grammar.SingleToken single_token = 3;
 * @return {?proto.taxonomy.model.grammar.SingleToken}
 */
proto.taxonomy.model.core.Base.prototype.getSingleToken = function() {
  return /** @type{?proto.taxonomy.model.grammar.SingleToken} */ (
    jspb.Message.getWrapperField(this, grammar_pb.SingleToken, 3));
};


/** @param {?proto.taxonomy.model.grammar.SingleToken|undefined} value */
proto.taxonomy.model.core.Base.prototype.setSingleToken = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.taxonomy.model.core.Base.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Base.prototype.clearSingleToken = function() {
  this.setSingleToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasSingleToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional taxonomy.model.grammar.HybridTokenFormula hybrid = 4;
 * @return {?proto.taxonomy.model.grammar.HybridTokenFormula}
 */
proto.taxonomy.model.core.Base.prototype.getHybrid = function() {
  return /** @type{?proto.taxonomy.model.grammar.HybridTokenFormula} */ (
    jspb.Message.getWrapperField(this, grammar_pb.HybridTokenFormula, 4));
};


/** @param {?proto.taxonomy.model.grammar.HybridTokenFormula|undefined} value */
proto.taxonomy.model.core.Base.prototype.setHybrid = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.taxonomy.model.core.Base.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Base.prototype.clearHybrid = function() {
  this.setHybrid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasHybrid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula hybrid_with_hybrids = 5;
 * @return {?proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula}
 */
proto.taxonomy.model.core.Base.prototype.getHybridWithHybrids = function() {
  return /** @type{?proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula} */ (
    jspb.Message.getWrapperField(this, grammar_pb.HybridTokenWithHybridChildrenFormula, 5));
};


/** @param {?proto.taxonomy.model.grammar.HybridTokenWithHybridChildrenFormula|undefined} value */
proto.taxonomy.model.core.Base.prototype.setHybridWithHybrids = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.taxonomy.model.core.Base.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Base.prototype.clearHybridWithHybrids = function() {
  this.setHybridWithHybrids(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasHybridWithHybrids = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string symbol = 7;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string owner = 8;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes quantity = 9;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes quantity = 9;
 * This is a type-conversion wrapper around `getQuantity()`
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getQuantity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQuantity()));
};


/**
 * optional bytes quantity = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuantity()`
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Base.prototype.getQuantity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQuantity()));
};


/** @param {!(string|Uint8Array)} value */
proto.taxonomy.model.core.Base.prototype.setQuantity = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional int32 decimals = 10;
 * @return {number}
 */
proto.taxonomy.model.core.Base.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.taxonomy.model.core.Base.prototype.setDecimals = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * map<string, string> token_properties = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.taxonomy.model.core.Base.prototype.getTokenPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.core.Base.prototype.clearTokenPropertiesMap = function() {
  this.getTokenPropertiesMap().clear();
};


/**
 * optional string constructor_name = 12;
 * @return {string}
 */
proto.taxonomy.model.core.Base.prototype.getConstructorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Base.prototype.setConstructorName = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional google.protobuf.Any constructor = 13;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.Base.prototype.getConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 13));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.Base.prototype.setConstructor = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Base.prototype.clearConstructor = function() {
  this.setConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Base.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated TokenTemplate child_tokens = 14;
 * @return {!Array<!proto.taxonomy.model.core.TokenTemplate>}
 */
proto.taxonomy.model.core.Base.prototype.getChildTokensList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.TokenTemplate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.TokenTemplate, 14));
};


/** @param {!Array<!proto.taxonomy.model.core.TokenTemplate>} value */
proto.taxonomy.model.core.Base.prototype.setChildTokensList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.taxonomy.model.core.TokenTemplate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.TokenTemplate}
 */
proto.taxonomy.model.core.Base.prototype.addChildTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.taxonomy.model.core.TokenTemplate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.Base.prototype.clearChildTokensList = function() {
  this.setChildTokensList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Behavior.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Behavior.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Behavior.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Behavior} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Behavior.toObject = function(includeInstance, msg) {
  var obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    external: jspb.Message.getFieldWithDefault(msg, 2, false),
    behaviorConstructorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    behaviorConstructor: (f = msg.getBehaviorConstructor()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    behaviorInvocationsList: jspb.Message.toObjectList(msg.getBehaviorInvocationsList(),
    proto.taxonomy.model.core.Invocation.toObject, includeInstance),
    behavioralPropertiesList: jspb.Message.toObjectList(msg.getBehavioralPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.Behavior.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Behavior;
  return proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Behavior} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExternal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBehaviorConstructorName(value);
      break;
    case 4:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setBehaviorConstructor(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.addBehaviorInvocations(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addBehavioralProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Behavior.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Behavior.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Behavior} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Behavior.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getExternal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getBehaviorConstructorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBehaviorConstructor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
  f = message.getBehavioralPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.Behavior.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.Behavior.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Behavior.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Behavior.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool external = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.core.Behavior.prototype.getExternal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.taxonomy.model.core.Behavior.prototype.setExternal = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string behavior_constructor_name = 3;
 * @return {string}
 */
proto.taxonomy.model.core.Behavior.prototype.getBehaviorConstructorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Behavior.prototype.setBehaviorConstructorName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Any behavior_constructor = 4;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.core.Behavior.prototype.getBehaviorConstructor = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 4));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.core.Behavior.prototype.setBehaviorConstructor = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Behavior.prototype.clearBehaviorConstructor = function() {
  this.setBehaviorConstructor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Behavior.prototype.hasBehaviorConstructor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Invocation behavior_invocations = 5;
 * @return {!Array<!proto.taxonomy.model.core.Invocation>}
 */
proto.taxonomy.model.core.Behavior.prototype.getBehaviorInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Invocation, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.Invocation>} value */
proto.taxonomy.model.core.Behavior.prototype.setBehaviorInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Behavior.prototype.addBehaviorInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.Invocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.Behavior.prototype.clearBehaviorInvocationsList = function() {
  this.setBehaviorInvocationsList([]);
};


/**
 * repeated Property behavioral_properties = 6;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.Behavior.prototype.getBehavioralPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 6));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.Behavior.prototype.setBehavioralPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Behavior.prototype.addBehavioralProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.Behavior.prototype.clearBehavioralPropertiesList = function() {
  this.setBehavioralPropertiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.BehaviorGroup.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.BehaviorGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.BehaviorGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroup.toObject = function(includeInstance, msg) {
  var obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    behaviorSymbolsList: jspb.Message.toObjectList(msg.getBehaviorSymbolsList(),
    artifact_pb.ArtifactSymbol.toObject, includeInstance),
    memberBehaviorArtifactsMap: (f = msg.getMemberBehaviorArtifactsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.artifact.Artifact.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.BehaviorGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.BehaviorGroup;
  return proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.BehaviorGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new artifact_pb.ArtifactSymbol;
      reader.readMessage(value,artifact_pb.ArtifactSymbol.deserializeBinaryFromReader);
      msg.addBehaviorSymbols(value);
      break;
    case 3:
      var value = msg.getMemberBehaviorArtifactsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.BehaviorGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      artifact_pb.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getMemberBehaviorArtifactsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter);
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.BehaviorGroup.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated taxonomy.model.artifact.ArtifactSymbol behavior_symbols = 2;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.getBehaviorSymbolsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, artifact_pb.ArtifactSymbol, 2));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} value */
proto.taxonomy.model.core.BehaviorGroup.prototype.setBehaviorSymbolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.addBehaviorSymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.artifact.ArtifactSymbol, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.clearBehaviorSymbolsList = function() {
  this.setBehaviorSymbolsList([]);
};


/**
 * map<string, taxonomy.model.artifact.Artifact> member_behavior_artifacts = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.artifact.Artifact>}
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.getMemberBehaviorArtifactsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.artifact.Artifact>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.taxonomy.model.artifact.Artifact));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.core.BehaviorGroup.prototype.clearMemberBehaviorArtifactsMap = function() {
  this.getMemberBehaviorArtifactsMap().clear();
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.PropertySet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.PropertySet.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.PropertySet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.PropertySet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySet.toObject = function(includeInstance, msg) {
  var obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    propertiesList: jspb.Message.toObjectList(msg.getPropertiesList(),
    proto.taxonomy.model.core.Property.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.PropertySet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.PropertySet;
  return proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.PropertySet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.Property;
      reader.readMessage(value,proto.taxonomy.model.core.Property.deserializeBinaryFromReader);
      msg.addProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.PropertySet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.PropertySet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.Property.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.PropertySet.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.PropertySet.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.PropertySet.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.PropertySet.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Property properties = 2;
 * @return {!Array<!proto.taxonomy.model.core.Property>}
 */
proto.taxonomy.model.core.PropertySet.prototype.getPropertiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Property>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Property, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.Property>} value */
proto.taxonomy.model.core.PropertySet.prototype.setPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.Property=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.PropertySet.prototype.addProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.Property, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.PropertySet.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.Property.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Property.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Property.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Property} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Property.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
    propertyInvocationsList: jspb.Message.toObjectList(msg.getPropertyInvocationsList(),
    proto.taxonomy.model.core.Invocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Property.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Property;
  return proto.taxonomy.model.core.Property.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Property} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Property}
 */
proto.taxonomy.model.core.Property.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueDescription(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.Invocation;
      reader.readMessage(value,proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader);
      msg.addPropertyInvocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Property.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Property.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Property} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Property.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertyInvocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.core.Invocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.Property.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Property.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value_description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.Property.prototype.getValueDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Property.prototype.setValueDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Invocation property_invocations = 3;
 * @return {!Array<!proto.taxonomy.model.core.Invocation>}
 */
proto.taxonomy.model.core.Property.prototype.getPropertyInvocationsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Invocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Invocation, 3));
};


/** @param {!Array<!proto.taxonomy.model.core.Invocation>} value */
proto.taxonomy.model.core.Property.prototype.setPropertyInvocationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.core.Invocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Property.prototype.addPropertyInvocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.core.Invocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.Property.prototype.clearPropertyInvocationsList = function() {
  this.setPropertyInvocationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.TokenTemplate.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.TokenTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.TokenTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenTemplate.toObject = function(includeInstance, msg) {
  var obj = {
    artifact: (f = msg.getArtifact()) && artifact_pb.Artifact.toObject(includeInstance, f),
    base: (f = msg.getBase()) && proto.taxonomy.model.core.Base.toObject(includeInstance, f),
    behaviorsList: jspb.Message.toObjectList(msg.getBehaviorsList(),
    proto.taxonomy.model.core.Behavior.toObject, includeInstance),
    behaviorGroupsList: jspb.Message.toObjectList(msg.getBehaviorGroupsList(),
    proto.taxonomy.model.core.BehaviorGroup.toObject, includeInstance),
    propertySetsList: jspb.Message.toObjectList(msg.getPropertySetsList(),
    proto.taxonomy.model.core.PropertySet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.TokenTemplate}
 */
proto.taxonomy.model.core.TokenTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.TokenTemplate;
  return proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.TokenTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.TokenTemplate}
 */
proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new artifact_pb.Artifact;
      reader.readMessage(value,artifact_pb.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.Base;
      reader.readMessage(value,proto.taxonomy.model.core.Base.deserializeBinaryFromReader);
      msg.setBase(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.Behavior;
      reader.readMessage(value,proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader);
      msg.addBehaviors(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.BehaviorGroup;
      reader.readMessage(value,proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader);
      msg.addBehaviorGroups(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.core.PropertySet;
      reader.readMessage(value,proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader);
      msg.addPropertySets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.TokenTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      artifact_pb.Artifact.serializeBinaryToWriter
    );
  }
  f = message.getBase();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.core.Base.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.core.Behavior.serializeBinaryToWriter
    );
  }
  f = message.getBehaviorGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter
    );
  }
  f = message.getPropertySetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter
    );
  }
};


/**
 * optional taxonomy.model.artifact.Artifact artifact = 1;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, artifact_pb.Artifact, 1));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.TokenTemplate.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Base base = 2;
 * @return {?proto.taxonomy.model.core.Base}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getBase = function() {
  return /** @type{?proto.taxonomy.model.core.Base} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.Base, 2));
};


/** @param {?proto.taxonomy.model.core.Base|undefined} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setBase = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.TokenTemplate.prototype.clearBase = function() {
  this.setBase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.hasBase = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Behavior behaviors = 3;
 * @return {!Array<!proto.taxonomy.model.core.Behavior>}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getBehaviorsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.Behavior>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.Behavior, 3));
};


/** @param {!Array<!proto.taxonomy.model.core.Behavior>} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setBehaviorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.core.Behavior=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.Behavior}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.addBehaviors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.core.Behavior, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.TokenTemplate.prototype.clearBehaviorsList = function() {
  this.setBehaviorsList([]);
};


/**
 * repeated BehaviorGroup behavior_groups = 4;
 * @return {!Array<!proto.taxonomy.model.core.BehaviorGroup>}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getBehaviorGroupsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.BehaviorGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.BehaviorGroup, 4));
};


/** @param {!Array<!proto.taxonomy.model.core.BehaviorGroup>} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setBehaviorGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.taxonomy.model.core.BehaviorGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.BehaviorGroup}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.addBehaviorGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.taxonomy.model.core.BehaviorGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.TokenTemplate.prototype.clearBehaviorGroupsList = function() {
  this.setBehaviorGroupsList([]);
};


/**
 * repeated PropertySet property_sets = 5;
 * @return {!Array<!proto.taxonomy.model.core.PropertySet>}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.getPropertySetsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.PropertySet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.PropertySet, 5));
};


/** @param {!Array<!proto.taxonomy.model.core.PropertySet>} value */
proto.taxonomy.model.core.TokenTemplate.prototype.setPropertySetsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.taxonomy.model.core.PropertySet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.PropertySet}
 */
proto.taxonomy.model.core.TokenTemplate.prototype.addPropertySets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.taxonomy.model.core.PropertySet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.TokenTemplate.prototype.clearPropertySetsList = function() {
  this.setPropertySetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.Invocation.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.Invocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.Invocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Invocation.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    request: (f = msg.getRequest()) && proto.taxonomy.model.core.InvocationRequest.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.taxonomy.model.core.InvocationResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Invocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.Invocation;
  return proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.Invocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.Invocation}
 */
proto.taxonomy.model.core.Invocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.core.InvocationRequest;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationRequest.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.core.InvocationResponse;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.Invocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.Invocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.Invocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.Invocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.core.InvocationRequest.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.core.InvocationResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.Invocation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Invocation.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.Invocation.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.Invocation.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional InvocationRequest request = 3;
 * @return {?proto.taxonomy.model.core.InvocationRequest}
 */
proto.taxonomy.model.core.Invocation.prototype.getRequest = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationRequest} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationRequest, 3));
};


/** @param {?proto.taxonomy.model.core.InvocationRequest|undefined} value */
proto.taxonomy.model.core.Invocation.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Invocation.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Invocation.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional InvocationResponse response = 4;
 * @return {?proto.taxonomy.model.core.InvocationResponse}
 */
proto.taxonomy.model.core.Invocation.prototype.getResponse = function() {
  return /** @type{?proto.taxonomy.model.core.InvocationResponse} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.core.InvocationResponse, 4));
};


/** @param {?proto.taxonomy.model.core.InvocationResponse|undefined} value */
proto.taxonomy.model.core.Invocation.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.core.Invocation.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.core.Invocation.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.InvocationRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationRequest.toObject = function(includeInstance, msg) {
  var obj = {
    controlMessageName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inputParametersList: jspb.Message.toObjectList(msg.getInputParametersList(),
    proto.taxonomy.model.core.InvocationParameter.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationRequest}
 */
proto.taxonomy.model.core.InvocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationRequest;
  return proto.taxonomy.model.core.InvocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationRequest}
 */
proto.taxonomy.model.core.InvocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlMessageName(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.InvocationParameter;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader);
      msg.addInputParameters(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlMessageName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInputParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string control_message_name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.getControlMessageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationRequest.prototype.setControlMessageName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated InvocationParameter input_parameters = 2;
 * @return {!Array<!proto.taxonomy.model.core.InvocationParameter>}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.getInputParametersList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InvocationParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InvocationParameter, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.InvocationParameter>} value */
proto.taxonomy.model.core.InvocationRequest.prototype.setInputParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.InvocationParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.addInputParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.InvocationParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.InvocationRequest.prototype.clearInputParametersList = function() {
  this.setInputParametersList([]);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.core.InvocationResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationResponse.toObject = function(includeInstance, msg) {
  var obj = {
    controlMessageName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    outputParametersList: jspb.Message.toObjectList(msg.getOutputParametersList(),
    proto.taxonomy.model.core.InvocationParameter.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationResponse}
 */
proto.taxonomy.model.core.InvocationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationResponse;
  return proto.taxonomy.model.core.InvocationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationResponse}
 */
proto.taxonomy.model.core.InvocationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlMessageName(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.core.InvocationParameter;
      reader.readMessage(value,proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader);
      msg.addOutputParameters(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlMessageName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string control_message_name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.getControlMessageName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationResponse.prototype.setControlMessageName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated InvocationParameter output_parameters = 2;
 * @return {!Array<!proto.taxonomy.model.core.InvocationParameter>}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.getOutputParametersList = function() {
  return /** @type{!Array<!proto.taxonomy.model.core.InvocationParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.core.InvocationParameter, 2));
};


/** @param {!Array<!proto.taxonomy.model.core.InvocationParameter>} value */
proto.taxonomy.model.core.InvocationResponse.prototype.setOutputParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.core.InvocationParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.addOutputParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.core.InvocationParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.core.InvocationResponse.prototype.clearOutputParametersList = function() {
  this.setOutputParametersList([]);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationResponse.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.core.InvocationParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.core.InvocationParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationParameter.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valueDescription: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.core.InvocationParameter;
  return proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.core.InvocationParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.core.InvocationParameter}
 */
proto.taxonomy.model.core.InvocationParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.core.InvocationParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.core.InvocationParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValueDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationParameter.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value_description = 2;
 * @return {string}
 */
proto.taxonomy.model.core.InvocationParameter.prototype.getValueDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.core.InvocationParameter.prototype.setValueDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.taxonomy.model.core);
