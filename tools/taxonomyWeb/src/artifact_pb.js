/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.taxonomy.model.artifact.Artifact', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactAnalogy', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactContent', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactDefinition', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactFile', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactSymbol', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.ArtifactType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.DeleteArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.DeleteArtifactResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.MapReference', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.MapResourceReference', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.MappingType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.Maps', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.NewArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.NewArtifactResponse', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.SymbolInfluence', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TargetPlatform', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.TokenType', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.UpdateArtifactRequest', null, global);
goog.exportSymbol('proto.taxonomy.model.artifact.UpdateArtifactResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Artifact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.Artifact.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.Artifact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.Artifact.displayName = 'proto.taxonomy.model.artifact.Artifact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.ArtifactSymbol.displayName = 'proto.taxonomy.model.artifact.ArtifactSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.SymbolInfluence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.SymbolInfluence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.SymbolInfluence.displayName = 'proto.taxonomy.model.artifact.SymbolInfluence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.ArtifactDefinition.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.ArtifactDefinition.displayName = 'proto.taxonomy.model.artifact.ArtifactDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactAnalogy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactAnalogy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.ArtifactAnalogy.displayName = 'proto.taxonomy.model.artifact.ArtifactAnalogy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.ArtifactFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.ArtifactFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.ArtifactFile.displayName = 'proto.taxonomy.model.artifact.ArtifactFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.Maps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.taxonomy.model.artifact.Maps.repeatedFields_, null);
};
goog.inherits(proto.taxonomy.model.artifact.Maps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.Maps.displayName = 'proto.taxonomy.model.artifact.Maps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.MapReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.MapReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.MapReference.displayName = 'proto.taxonomy.model.artifact.MapReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.MapResourceReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.MapResourceReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.MapResourceReference.displayName = 'proto.taxonomy.model.artifact.MapResourceReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.NewArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.NewArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.NewArtifactRequest.displayName = 'proto.taxonomy.model.artifact.NewArtifactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.NewArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.NewArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.NewArtifactResponse.displayName = 'proto.taxonomy.model.artifact.NewArtifactResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.UpdateArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.UpdateArtifactRequest.displayName = 'proto.taxonomy.model.artifact.UpdateArtifactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.UpdateArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.UpdateArtifactResponse.displayName = 'proto.taxonomy.model.artifact.UpdateArtifactResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.DeleteArtifactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.DeleteArtifactRequest.displayName = 'proto.taxonomy.model.artifact.DeleteArtifactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.artifact.DeleteArtifactResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.artifact.DeleteArtifactResponse.displayName = 'proto.taxonomy.model.artifact.DeleteArtifactResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.Artifact.repeatedFields_ = [3,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Artifact.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Artifact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Artifact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Artifact.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    aliasesList: jspb.Message.getRepeatedField(msg, 3),
    artifactSymbol: (f = msg.getArtifactSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f),
    controlUri: jspb.Message.getFieldWithDefault(msg, 5, ""),
    artifactDefinition: (f = msg.getArtifactDefinition()) && proto.taxonomy.model.artifact.ArtifactDefinition.toObject(includeInstance, f),
    incompatibleWithSymbolsList: jspb.Message.toObjectList(msg.getIncompatibleWithSymbolsList(),
    proto.taxonomy.model.artifact.ArtifactSymbol.toObject, includeInstance),
    influencedBySymbolsList: jspb.Message.toObjectList(msg.getInfluencedBySymbolsList(),
    proto.taxonomy.model.artifact.SymbolInfluence.toObject, includeInstance),
    artifactFilesList: jspb.Message.toObjectList(msg.getArtifactFilesList(),
    proto.taxonomy.model.artifact.ArtifactFile.toObject, includeInstance),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.Artifact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Artifact;
  return proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Artifact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setArtifactSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setControlUri(value);
      break;
    case 6:
      var value = new proto.taxonomy.model.artifact.ArtifactDefinition;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader);
      msg.setArtifactDefinition(value);
      break;
    case 7:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.addIncompatibleWithSymbols(value);
      break;
    case 8:
      var value = new proto.taxonomy.model.artifact.SymbolInfluence;
      reader.readMessage(value,proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinaryFromReader);
      msg.addInfluencedBySymbols(value);
      break;
    case 9:
      var value = new proto.taxonomy.model.artifact.ArtifactFile;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader);
      msg.addArtifactFiles(value);
      break;
    case 10:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Artifact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Artifact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getArtifactSymbol();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getControlUri();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getArtifactDefinition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter
    );
  }
  f = message.getIncompatibleWithSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
  f = message.getInfluencedBySymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.taxonomy.model.artifact.SymbolInfluence.serializeBinaryToWriter
    );
  }
  f = message.getArtifactFilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.Artifact.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Artifact.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string aliases = 3;
 * @return {!Array<string>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setAliasesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.taxonomy.model.artifact.Artifact.prototype.addAliases = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearAliasesList = function() {
  this.setAliasesList([]);
};


/**
 * optional ArtifactSymbol artifact_symbol = 4;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getArtifactSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 4));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.Artifact.prototype.setArtifactSymbol = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearArtifactSymbol = function() {
  this.setArtifactSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Artifact.prototype.hasArtifactSymbol = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string control_uri = 5;
 * @return {string}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getControlUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.Artifact.prototype.setControlUri = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ArtifactDefinition artifact_definition = 6;
 * @return {?proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getArtifactDefinition = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactDefinition} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactDefinition, 6));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactDefinition|undefined} value */
proto.taxonomy.model.artifact.Artifact.prototype.setArtifactDefinition = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearArtifactDefinition = function() {
  this.setArtifactDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Artifact.prototype.hasArtifactDefinition = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated ArtifactSymbol incompatible_with_symbols = 7;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getIncompatibleWithSymbolsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 7));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactSymbol>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setIncompatibleWithSymbolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addIncompatibleWithSymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.taxonomy.model.artifact.ArtifactSymbol, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearIncompatibleWithSymbolsList = function() {
  this.setIncompatibleWithSymbolsList([]);
};


/**
 * repeated SymbolInfluence influenced_by_symbols = 8;
 * @return {!Array<!proto.taxonomy.model.artifact.SymbolInfluence>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getInfluencedBySymbolsList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.SymbolInfluence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.SymbolInfluence, 8));
};


/** @param {!Array<!proto.taxonomy.model.artifact.SymbolInfluence>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setInfluencedBySymbolsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.SymbolInfluence}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addInfluencedBySymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.taxonomy.model.artifact.SymbolInfluence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearInfluencedBySymbolsList = function() {
  this.setInfluencedBySymbolsList([]);
};


/**
 * repeated ArtifactFile artifact_files = 9;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactFile>}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getArtifactFilesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactFile>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactFile, 9));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactFile>} value */
proto.taxonomy.model.artifact.Artifact.prototype.setArtifactFilesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactFile=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.Artifact.prototype.addArtifactFiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.taxonomy.model.artifact.ArtifactFile, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearArtifactFilesList = function() {
  this.setArtifactFilesList([]);
};


/**
 * optional Maps maps = 10;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.Artifact.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 10));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.Artifact.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.Artifact.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Artifact.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactSymbol.toObject = function(includeInstance, msg) {
  var obj = {
    visualSymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toolingSymbol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactSymbol;
  return proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVisualSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToolingSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVisualSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToolingSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string visual_symbol = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getVisualSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setVisualSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tooling_symbol = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.getToolingSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactSymbol.prototype.setToolingSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.SymbolInfluence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SymbolInfluence.toObject = function(includeInstance, msg) {
  var obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: (f = msg.getSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.SymbolInfluence}
 */
proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.SymbolInfluence;
  return proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.SymbolInfluence}
 */
proto.taxonomy.model.artifact.SymbolInfluence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.SymbolInfluence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.SymbolInfluence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.SymbolInfluence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArtifactSymbol symbol = 2;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.getSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 2));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.setSymbol = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.clearSymbol = function() {
  this.setSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.SymbolInfluence.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.ArtifactDefinition.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactDefinition.toObject = function(includeInstance, msg) {
  var obj = {
    businessDescription: jspb.Message.getFieldWithDefault(msg, 1, ""),
    businessExample: jspb.Message.getFieldWithDefault(msg, 2, ""),
    analogiesList: jspb.Message.toObjectList(msg.getAnalogiesList(),
    proto.taxonomy.model.artifact.ArtifactAnalogy.toObject, includeInstance),
    comments: jspb.Message.getFieldWithDefault(msg, 4, ""),
    artifact: (f = msg.getArtifact()) && proto.taxonomy.model.artifact.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactDefinition;
  return proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessDescription(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBusinessExample(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.ArtifactAnalogy;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinaryFromReader);
      msg.addAnalogies(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComments(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Artifact;
      reader.readMessage(value,proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBusinessDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBusinessExample();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnalogiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.ArtifactAnalogy.serializeBinaryToWriter
    );
  }
  f = message.getComments();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional string business_description = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getBusinessDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setBusinessDescription = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string business_example = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getBusinessExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setBusinessExample = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ArtifactAnalogy analogies = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.ArtifactAnalogy>}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getAnalogiesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.ArtifactAnalogy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.ArtifactAnalogy, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.ArtifactAnalogy>} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setAnalogiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.ArtifactAnalogy}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.addAnalogies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.ArtifactAnalogy, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.clearAnalogiesList = function() {
  this.setAnalogiesList([]);
};


/**
 * optional string comments = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getComments = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setComments = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Artifact artifact = 5;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Artifact, 5));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactDefinition.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactAnalogy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.toObject = function(includeInstance, msg) {
  var obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    artifactDefinition: (f = msg.getArtifactDefinition()) && proto.taxonomy.model.artifact.ArtifactDefinition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactAnalogy}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactAnalogy;
  return proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactAnalogy}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.ArtifactDefinition;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactDefinition.deserializeBinaryFromReader);
      msg.setArtifactDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactAnalogy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactAnalogy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArtifactDefinition();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.taxonomy.model.artifact.ArtifactDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ArtifactDefinition artifact_definition = 3;
 * @return {?proto.taxonomy.model.artifact.ArtifactDefinition}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.getArtifactDefinition = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactDefinition} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactDefinition, 3));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactDefinition|undefined} value */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.setArtifactDefinition = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.clearArtifactDefinition = function() {
  this.setArtifactDefinition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactAnalogy.prototype.hasArtifactDefinition = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.ArtifactFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.ArtifactFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactFile.toObject = function(includeInstance, msg) {
  var obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fileName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fileData: msg.getFileData_asB64(),
    artifact: (f = msg.getArtifact()) && proto.taxonomy.model.artifact.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.ArtifactFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.ArtifactFile;
  return proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.ArtifactFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.ArtifactFile}
 */
proto.taxonomy.model.artifact.ArtifactFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactContent} */ (reader.readEnum());
      msg.setContent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileData(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.Artifact;
      reader.readMessage(value,proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.ArtifactFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.ArtifactFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFileName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFileData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactContent content = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactContent}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getContent = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactContent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactContent} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setContent = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string file_name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setFileName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes file_data = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes file_data = 3;
 * This is a type-conversion wrapper around `getFileData()`
 * @return {string}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileData()));
};


/**
 * optional bytes file_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileData()`
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getFileData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileData()));
};


/** @param {!(string|Uint8Array)} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setFileData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Artifact artifact = 4;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Artifact, 4));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.artifact.ArtifactFile.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.ArtifactFile.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taxonomy.model.artifact.Maps.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.Maps.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.Maps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.Maps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Maps.toObject = function(includeInstance, msg) {
  var obj = {
    codeReferencesList: jspb.Message.toObjectList(msg.getCodeReferencesList(),
    proto.taxonomy.model.artifact.MapReference.toObject, includeInstance),
    implementationReferencesList: jspb.Message.toObjectList(msg.getImplementationReferencesList(),
    proto.taxonomy.model.artifact.MapReference.toObject, includeInstance),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.taxonomy.model.artifact.MapResourceReference.toObject, includeInstance),
    artifact: (f = msg.getArtifact()) && proto.taxonomy.model.artifact.Artifact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.Maps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.Maps;
  return proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.Maps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.taxonomy.model.artifact.MapReference;
      reader.readMessage(value,proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader);
      msg.addCodeReferences(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.MapReference;
      reader.readMessage(value,proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader);
      msg.addImplementationReferences(value);
      break;
    case 3:
      var value = new proto.taxonomy.model.artifact.MapResourceReference;
      reader.readMessage(value,proto.taxonomy.model.artifact.MapResourceReference.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 4:
      var value = new proto.taxonomy.model.artifact.Artifact;
      reader.readMessage(value,proto.taxonomy.model.artifact.Artifact.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.Maps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.Maps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter
    );
  }
  f = message.getImplementationReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.taxonomy.model.artifact.MapResourceReference.serializeBinaryToWriter
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.taxonomy.model.artifact.Artifact.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MapReference code_references = 1;
 * @return {!Array<!proto.taxonomy.model.artifact.MapReference>}
 */
proto.taxonomy.model.artifact.Maps.prototype.getCodeReferencesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.MapReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.MapReference, 1));
};


/** @param {!Array<!proto.taxonomy.model.artifact.MapReference>} value */
proto.taxonomy.model.artifact.Maps.prototype.setCodeReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.MapReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.Maps.prototype.addCodeReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.taxonomy.model.artifact.MapReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Maps.prototype.clearCodeReferencesList = function() {
  this.setCodeReferencesList([]);
};


/**
 * repeated MapReference implementation_references = 2;
 * @return {!Array<!proto.taxonomy.model.artifact.MapReference>}
 */
proto.taxonomy.model.artifact.Maps.prototype.getImplementationReferencesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.MapReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.MapReference, 2));
};


/** @param {!Array<!proto.taxonomy.model.artifact.MapReference>} value */
proto.taxonomy.model.artifact.Maps.prototype.setImplementationReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.MapReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.Maps.prototype.addImplementationReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.taxonomy.model.artifact.MapReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Maps.prototype.clearImplementationReferencesList = function() {
  this.setImplementationReferencesList([]);
};


/**
 * repeated MapResourceReference resources = 3;
 * @return {!Array<!proto.taxonomy.model.artifact.MapResourceReference>}
 */
proto.taxonomy.model.artifact.Maps.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.taxonomy.model.artifact.MapResourceReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.taxonomy.model.artifact.MapResourceReference, 3));
};


/** @param {!Array<!proto.taxonomy.model.artifact.MapResourceReference>} value */
proto.taxonomy.model.artifact.Maps.prototype.setResourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.taxonomy.model.artifact.MapResourceReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taxonomy.model.artifact.MapResourceReference}
 */
proto.taxonomy.model.artifact.Maps.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.taxonomy.model.artifact.MapResourceReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.taxonomy.model.artifact.Maps.prototype.clearResourcesList = function() {
  this.setResourcesList([]);
};


/**
 * optional Artifact artifact = 4;
 * @return {?proto.taxonomy.model.artifact.Artifact}
 */
proto.taxonomy.model.artifact.Maps.prototype.getArtifact = function() {
  return /** @type{?proto.taxonomy.model.artifact.Artifact} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Artifact, 4));
};


/** @param {?proto.taxonomy.model.artifact.Artifact|undefined} value */
proto.taxonomy.model.artifact.Maps.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.Maps.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.Maps.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.MapReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.MapReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.MapReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapReference.toObject = function(includeInstance, msg) {
  var obj = {
    mappingType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 3, 0),
    referencePath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.MapReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.MapReference;
  return proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.MapReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.MapReference}
 */
proto.taxonomy.model.artifact.MapReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.MappingType} */ (reader.readEnum());
      msg.setMappingType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.taxonomy.model.artifact.TargetPlatform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferencePath(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.MapReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.MapReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMappingType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getReferencePath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
};


/**
 * optional MappingType mapping_type = 1;
 * @return {!proto.taxonomy.model.artifact.MappingType}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getMappingType = function() {
  return /** @type {!proto.taxonomy.model.artifact.MappingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.MappingType} value */
proto.taxonomy.model.artifact.MapReference.prototype.setMappingType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapReference.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TargetPlatform platform = 3;
 * @return {!proto.taxonomy.model.artifact.TargetPlatform}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getPlatform = function() {
  return /** @type {!proto.taxonomy.model.artifact.TargetPlatform} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.taxonomy.model.artifact.TargetPlatform} value */
proto.taxonomy.model.artifact.MapReference.prototype.setPlatform = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string reference_path = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getReferencePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapReference.prototype.setReferencePath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Maps maps = 5;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.MapReference.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 5));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.MapReference.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.MapReference.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.MapReference.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.MapResourceReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.MapResourceReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapResourceReference.toObject = function(includeInstance, msg) {
  var obj = {
    mappingType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    resourcePath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maps: (f = msg.getMaps()) && proto.taxonomy.model.artifact.Maps.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.MapResourceReference}
 */
proto.taxonomy.model.artifact.MapResourceReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.MapResourceReference;
  return proto.taxonomy.model.artifact.MapResourceReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.MapResourceReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.MapResourceReference}
 */
proto.taxonomy.model.artifact.MapResourceReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.MappingType} */ (reader.readEnum());
      msg.setMappingType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourcePath(value);
      break;
    case 5:
      var value = new proto.taxonomy.model.artifact.Maps;
      reader.readMessage(value,proto.taxonomy.model.artifact.Maps.deserializeBinaryFromReader);
      msg.setMaps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.MapResourceReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.MapResourceReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.MapResourceReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMappingType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResourcePath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMaps();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.taxonomy.model.artifact.Maps.serializeBinaryToWriter
    );
  }
};


/**
 * optional MappingType mapping_type = 1;
 * @return {!proto.taxonomy.model.artifact.MappingType}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getMappingType = function() {
  return /** @type {!proto.taxonomy.model.artifact.MappingType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.MappingType} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setMappingType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string resource_path = 4;
 * @return {string}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getResourcePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setResourcePath = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Maps maps = 5;
 * @return {?proto.taxonomy.model.artifact.Maps}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.getMaps = function() {
  return /** @type{?proto.taxonomy.model.artifact.Maps} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.Maps, 5));
};


/** @param {?proto.taxonomy.model.artifact.Maps|undefined} value */
proto.taxonomy.model.artifact.MapResourceReference.prototype.setMaps = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.clearMaps = function() {
  this.setMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.MapResourceReference.prototype.hasMaps = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.NewArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.NewArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactRequest.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifact: (f = msg.getArtifact()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.NewArtifactRequest}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.NewArtifactRequest;
  return proto.taxonomy.model.artifact.NewArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.NewArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.NewArtifactRequest}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.NewArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.NewArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifact();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.getArtifact = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.setArtifact = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.clearArtifact = function() {
  this.setArtifact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.NewArtifactRequest.prototype.hasArtifact = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.NewArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.NewArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactResponse.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifactTypeObject: (f = msg.getArtifactTypeObject()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.NewArtifactResponse}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.NewArtifactResponse;
  return proto.taxonomy.model.artifact.NewArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.NewArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.NewArtifactResponse}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactTypeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.NewArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.NewArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.NewArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifactTypeObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact_type_object = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.getArtifactTypeObject = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.setArtifactTypeObject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.clearArtifactTypeObject = function() {
  this.setArtifactTypeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.NewArtifactResponse.prototype.hasArtifactTypeObject = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.UpdateArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifactTypeObject: (f = msg.getArtifactTypeObject()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactRequest}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.UpdateArtifactRequest;
  return proto.taxonomy.model.artifact.UpdateArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactRequest}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactTypeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.UpdateArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifactTypeObject();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Any artifact_type_object = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.getArtifactTypeObject = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.setArtifactTypeObject = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.clearArtifactTypeObject = function() {
  this.setArtifactTypeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.UpdateArtifactRequest.prototype.hasArtifactTypeObject = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.UpdateArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    updated: jspb.Message.getFieldWithDefault(msg, 2, false),
    artifactTypeObject: (f = msg.getArtifactTypeObject()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactResponse}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.UpdateArtifactResponse;
  return proto.taxonomy.model.artifact.UpdateArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.UpdateArtifactResponse}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdated(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setArtifactTypeObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.UpdateArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.UpdateArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUpdated();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getArtifactTypeObject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool updated = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.getUpdated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.setUpdated = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional google.protobuf.Any artifact_type_object = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.getArtifactTypeObject = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.setArtifactTypeObject = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.clearArtifactTypeObject = function() {
  this.setArtifactTypeObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.UpdateArtifactResponse.prototype.hasArtifactTypeObject = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.DeleteArtifactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.toObject = function(includeInstance, msg) {
  var obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    artifactSymbol: (f = msg.getArtifactSymbol()) && proto.taxonomy.model.artifact.ArtifactSymbol.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactRequest}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.DeleteArtifactRequest;
  return proto.taxonomy.model.artifact.DeleteArtifactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactRequest}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.taxonomy.model.artifact.ArtifactSymbol;
      reader.readMessage(value,proto.taxonomy.model.artifact.ArtifactSymbol.deserializeBinaryFromReader);
      msg.setArtifactSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.DeleteArtifactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArtifactSymbol();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taxonomy.model.artifact.ArtifactSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional ArtifactType type = 1;
 * @return {!proto.taxonomy.model.artifact.ArtifactType}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.getType = function() {
  return /** @type {!proto.taxonomy.model.artifact.ArtifactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.taxonomy.model.artifact.ArtifactType} value */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ArtifactSymbol artifact_symbol = 2;
 * @return {?proto.taxonomy.model.artifact.ArtifactSymbol}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.getArtifactSymbol = function() {
  return /** @type{?proto.taxonomy.model.artifact.ArtifactSymbol} */ (
    jspb.Message.getWrapperField(this, proto.taxonomy.model.artifact.ArtifactSymbol, 2));
};


/** @param {?proto.taxonomy.model.artifact.ArtifactSymbol|undefined} value */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.setArtifactSymbol = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.clearArtifactSymbol = function() {
  this.setArtifactSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.DeleteArtifactRequest.prototype.hasArtifactSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.artifact.DeleteArtifactResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.toObject = function(includeInstance, msg) {
  var obj = {
    deleted: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactResponse}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.artifact.DeleteArtifactResponse;
  return proto.taxonomy.model.artifact.DeleteArtifactResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.artifact.DeleteArtifactResponse}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.artifact.DeleteArtifactResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.artifact.DeleteArtifactResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool deleted = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.taxonomy.model.artifact.DeleteArtifactResponse.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.TokenType = {
  FUNGIBLE: 0,
  NON_FUNGIBLE: 1,
  HYBRID_FUNGIBLE_ROOT: 2,
  HYBRID_NON_FUNGIBLE_ROOT: 3,
  HYBRID_FUNGIBLE_ROOT_HYBRID_CHILDREN: 4,
  HYBRID_NON_FUNGIBLE_ROOT_HYBRID_CHILDREN: 5
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.ArtifactType = {
  BASE: 0,
  BEHAVIOR: 1,
  BEHAVIOR_GROUP: 2,
  PROPERTY_SET: 3,
  TOKEN_TEMPLATE: 4
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.ArtifactContent = {
  DEFINITION: 0,
  CONTROL: 1,
  UML: 2,
  OTHER: 3
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.MappingType = {
  SOURCE_CODE: 0,
  IMPLEMENTATION: 1,
  RESOURCE: 2
};

/**
 * @enum {number}
 */
proto.taxonomy.model.artifact.TargetPlatform = {
  ETHEREUM_SOLIDITY: 0,
  CHAINCODE_GO: 1,
  CHAINCODE_JAVA: 2,
  CHAINCODE_NODE: 3,
  CORDA: 4,
  DAML: 5
};

goog.object.extend(exports, proto.taxonomy.model.artifact);
