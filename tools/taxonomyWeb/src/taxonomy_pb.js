/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_pb = require('./core_pb.js');
goog.object.extend(proto, core_pb);
var grammar_pb = require('./grammar_pb.js');
goog.object.extend(proto, grammar_pb);
goog.exportSymbol('proto.taxonomy.model.Taxonomy', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taxonomy.model.Taxonomy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taxonomy.model.Taxonomy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taxonomy.model.Taxonomy.displayName = 'proto.taxonomy.model.Taxonomy';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.taxonomy.model.Taxonomy.prototype.toObject = function(opt_includeInstance) {
  return proto.taxonomy.model.Taxonomy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.taxonomy.model.Taxonomy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.Taxonomy.toObject = function(includeInstance, msg) {
  var obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    baseTokenTypesMap: (f = msg.getBaseTokenTypesMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.Base.toObject) : [],
    behaviorsMap: (f = msg.getBehaviorsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.Behavior.toObject) : [],
    behaviorGroupsMap: (f = msg.getBehaviorGroupsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.BehaviorGroup.toObject) : [],
    propertySetsMap: (f = msg.getPropertySetsMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.PropertySet.toObject) : [],
    tokenTemplatesMap: (f = msg.getTokenTemplatesMap()) ? f.toObject(includeInstance, proto.taxonomy.model.core.TokenTemplate.toObject) : [],
    formulaGrammar: (f = msg.getFormulaGrammar()) && grammar_pb.FormulaGrammar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taxonomy.model.Taxonomy}
 */
proto.taxonomy.model.Taxonomy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taxonomy.model.Taxonomy;
  return proto.taxonomy.model.Taxonomy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taxonomy.model.Taxonomy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taxonomy.model.Taxonomy}
 */
proto.taxonomy.model.Taxonomy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = msg.getBaseTokenTypesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.Base.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = msg.getBehaviorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.Behavior.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = msg.getBehaviorGroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.BehaviorGroup.deserializeBinaryFromReader, "");
         });
      break;
    case 5:
      var value = msg.getPropertySetsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.PropertySet.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = msg.getTokenTemplatesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.taxonomy.model.core.TokenTemplate.deserializeBinaryFromReader, "");
         });
      break;
    case 7:
      var value = new grammar_pb.FormulaGrammar;
      reader.readMessage(value,grammar_pb.FormulaGrammar.deserializeBinaryFromReader);
      msg.setFormulaGrammar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taxonomy.model.Taxonomy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.taxonomy.model.Taxonomy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taxonomy.model.Taxonomy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taxonomy.model.Taxonomy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBaseTokenTypesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.Base.serializeBinaryToWriter);
  }
  f = message.getBehaviorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.Behavior.serializeBinaryToWriter);
  }
  f = message.getBehaviorGroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.BehaviorGroup.serializeBinaryToWriter);
  }
  f = message.getPropertySetsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.PropertySet.serializeBinaryToWriter);
  }
  f = message.getTokenTemplatesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.taxonomy.model.core.TokenTemplate.serializeBinaryToWriter);
  }
  f = message.getFormulaGrammar();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      grammar_pb.FormulaGrammar.serializeBinaryToWriter
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.taxonomy.model.Taxonomy.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.taxonomy.model.Taxonomy.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, core.Base> base_token_types = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.Base>}
 */
proto.taxonomy.model.Taxonomy.prototype.getBaseTokenTypesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.Base>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.taxonomy.model.core.Base));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.Taxonomy.prototype.clearBaseTokenTypesMap = function() {
  this.getBaseTokenTypesMap().clear();
};


/**
 * map<string, core.Behavior> behaviors = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.Behavior>}
 */
proto.taxonomy.model.Taxonomy.prototype.getBehaviorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.Behavior>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.taxonomy.model.core.Behavior));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.Taxonomy.prototype.clearBehaviorsMap = function() {
  this.getBehaviorsMap().clear();
};


/**
 * map<string, core.BehaviorGroup> behavior_groups = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.BehaviorGroup>}
 */
proto.taxonomy.model.Taxonomy.prototype.getBehaviorGroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.BehaviorGroup>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.taxonomy.model.core.BehaviorGroup));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.Taxonomy.prototype.clearBehaviorGroupsMap = function() {
  this.getBehaviorGroupsMap().clear();
};


/**
 * map<string, core.PropertySet> property_sets = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.PropertySet>}
 */
proto.taxonomy.model.Taxonomy.prototype.getPropertySetsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.PropertySet>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.taxonomy.model.core.PropertySet));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.Taxonomy.prototype.clearPropertySetsMap = function() {
  this.getPropertySetsMap().clear();
};


/**
 * map<string, core.TokenTemplate> token_templates = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.taxonomy.model.core.TokenTemplate>}
 */
proto.taxonomy.model.Taxonomy.prototype.getTokenTemplatesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.taxonomy.model.core.TokenTemplate>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.taxonomy.model.core.TokenTemplate));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.taxonomy.model.Taxonomy.prototype.clearTokenTemplatesMap = function() {
  this.getTokenTemplatesMap().clear();
};


/**
 * optional grammar.FormulaGrammar formula_grammar = 7;
 * @return {?proto.taxonomy.model.grammar.FormulaGrammar}
 */
proto.taxonomy.model.Taxonomy.prototype.getFormulaGrammar = function() {
  return /** @type{?proto.taxonomy.model.grammar.FormulaGrammar} */ (
    jspb.Message.getWrapperField(this, grammar_pb.FormulaGrammar, 7));
};


/** @param {?proto.taxonomy.model.grammar.FormulaGrammar|undefined} value */
proto.taxonomy.model.Taxonomy.prototype.setFormulaGrammar = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.taxonomy.model.Taxonomy.prototype.clearFormulaGrammar = function() {
  this.setFormulaGrammar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taxonomy.model.Taxonomy.prototype.hasFormulaGrammar = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.taxonomy.model);
