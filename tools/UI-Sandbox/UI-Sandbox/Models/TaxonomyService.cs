using System;using System.Net.Sockets;using System.Reflection;using System.Threading;using System.Threading.Tasks;using Grpc.Core;using log4net;using Microsoft.Extensions.Configuration;using TTI.TTF.Taxonomy;using TTI.TTF.Taxonomy.Model;namespace TTI.TTF.UISandbox.Models{    public class TaxonomyService    {        private static ILog _log;        internal static Service.ServiceClient TaxonomyClient;        internal static PrinterService.PrinterServiceClient PrinterClient;        internal static Taxonomy.Model.Taxonomy Taxonomy { get; private set; }        public TaxonomyService()        {            #region config            var config = new ConfigurationBuilder()                .AddJsonFile("appsettings.json", true, true)                .AddEnvironmentVariables()                .Build();            #endregion            #region logging            Utils.InitLog();            _log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);            #endregion                        var gRpcHost = config["gRpcHost"];            var gRpcPort = Convert.ToInt32(config["gRpcPort"]);            var printHost = config["printHost"];            var printPort = Convert.ToInt32(config["printPort"]);            _log.Info("Connection to TaxonomyService: " + gRpcHost + " port: " + gRpcPort);            TaxonomyClient = new Service.ServiceClient(new Channel(gRpcHost, gRpcPort, ChannelCredentials.Insecure));            _log.Info("Connection to TTF-Printer: " + printHost + " port: " + printPort);            PrinterClient = new PrinterService.PrinterServiceClient(                new Channel(printHost, printPort, ChannelCredentials.Insecure));            #region TCP Loop            var tcpScan = new TcpClient();            var open = false;            while (!open)                try                {                    tcpScan.Connect(gRpcHost, gRpcPort);                    open = true;                }                catch                {                    _log.Info("Waiting on Taxonomy Service on port: " + gRpcPort);                    Thread.Sleep(2500);                }            tcpScan.Close();            #endregion            _log.Info("Connected to TaxonomyService: " + gRpcHost + " port: " + gRpcPort);            Taxonomy = TaxonomyClient.GetFullTaxonomy(new TaxonomyVersion { Version = "1.0" });        }        public static async Task RefreshAsync()        {            Taxonomy = await TaxonomyClient.GetFullTaxonomyAsync(new TaxonomyVersion { Version = "1.0" });            _log.Info("Taxonomy Refreshed");        }    }}