// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace TTI.TTF.Taxonomy {
  /// <summary>
  ///Taxonomy Service - Create, Read, Update, Delete for the Taxonomy Object Model
  /// </summary>
  public static partial class Service
  {
    static readonly string __ServiceName = "taxonomy.Service";

    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion> __Marshaller_taxonomy_model_TaxonomyVersion = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.TaxonomyVersion.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Taxonomy> __Marshaller_taxonomy_model_Taxonomy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Taxonomy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> __Marshaller_taxonomy_model_artifact_ArtifactSymbol = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.Base> __Marshaller_taxonomy_model_core_Base = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.Base.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.Behavior> __Marshaller_taxonomy_model_core_Behavior = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.Behavior.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> __Marshaller_taxonomy_model_core_BehaviorGroup = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.PropertySet> __Marshaller_taxonomy_model_core_PropertySet = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.PropertySet.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula> __Marshaller_taxonomy_model_core_TemplateFormula = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> __Marshaller_taxonomy_model_core_TemplateDefinition = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId> __Marshaller_taxonomy_model_artifact_TokenTemplateId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate> __Marshaller_taxonomy_model_core_TokenTemplate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification> __Marshaller_taxonomy_model_core_TokenSpecification = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions> __Marshaller_taxonomy_model_artifact_QueryOptions = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult> __Marshaller_taxonomy_model_artifact_QueryResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest> __Marshaller_taxonomy_model_artifact_InitializeNewArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse> __Marshaller_taxonomy_model_artifact_InitializeNewArtifactResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest> __Marshaller_taxonomy_model_artifact_NewArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse> __Marshaller_taxonomy_model_artifact_NewArtifactResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest> __Marshaller_taxonomy_model_artifact_UpdateArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse> __Marshaller_taxonomy_model_artifact_UpdateArtifactResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest> __Marshaller_taxonomy_model_artifact_DeleteArtifactRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse> __Marshaller_taxonomy_model_artifact_DeleteArtifactResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition> __Marshaller_taxonomy_model_artifact_NewTemplateDefinition = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest> __Marshaller_taxonomy_model_artifact_CommitUpdatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse> __Marshaller_taxonomy_model_artifact_CommitUpdatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest> __Marshaller_taxonomy_model_artifact_IssuePullRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse> __Marshaller_taxonomy_model_artifact_IssuePullResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest> __Marshaller_taxonomy_model_artifact_ConfigurationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration> __Marshaller_taxonomy_model_artifact_ServiceConfiguration = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration.Parser.ParseFrom);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion, global::TTI.TTF.Taxonomy.Model.Taxonomy> __Method_GetFullTaxonomy = new grpc::Method<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion, global::TTI.TTF.Taxonomy.Model.Taxonomy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFullTaxonomy",
        __Marshaller_taxonomy_model_TaxonomyVersion,
        __Marshaller_taxonomy_model_Taxonomy);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion, global::TTI.TTF.Taxonomy.Model.Taxonomy> __Method_GetLiteTaxonomy = new grpc::Method<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion, global::TTI.TTF.Taxonomy.Model.Taxonomy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLiteTaxonomy",
        __Marshaller_taxonomy_model_TaxonomyVersion,
        __Marshaller_taxonomy_model_Taxonomy);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.Base> __Method_GetBaseArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.Base>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBaseArtifact",
        __Marshaller_taxonomy_model_artifact_ArtifactSymbol,
        __Marshaller_taxonomy_model_core_Base);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.Behavior> __Method_GetBehaviorArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.Behavior>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBehaviorArtifact",
        __Marshaller_taxonomy_model_artifact_ArtifactSymbol,
        __Marshaller_taxonomy_model_core_Behavior);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> __Method_GetBehaviorGroupArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBehaviorGroupArtifact",
        __Marshaller_taxonomy_model_artifact_ArtifactSymbol,
        __Marshaller_taxonomy_model_core_BehaviorGroup);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.PropertySet> __Method_GetPropertySetArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.PropertySet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPropertySetArtifact",
        __Marshaller_taxonomy_model_artifact_ArtifactSymbol,
        __Marshaller_taxonomy_model_core_PropertySet);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula> __Method_GetTemplateFormulaArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTemplateFormulaArtifact",
        __Marshaller_taxonomy_model_artifact_ArtifactSymbol,
        __Marshaller_taxonomy_model_core_TemplateFormula);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> __Method_GetTemplateDefinitionArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTemplateDefinitionArtifact",
        __Marshaller_taxonomy_model_artifact_ArtifactSymbol,
        __Marshaller_taxonomy_model_core_TemplateDefinition);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId, global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate> __Method_GetTokenTemplate = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId, global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTokenTemplate",
        __Marshaller_taxonomy_model_artifact_TokenTemplateId,
        __Marshaller_taxonomy_model_core_TokenTemplate);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId, global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification> __Method_GetTokenSpecification = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId, global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTokenSpecification",
        __Marshaller_taxonomy_model_artifact_TokenTemplateId,
        __Marshaller_taxonomy_model_core_TokenSpecification);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions, global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult> __Method_GetArtifactsOfType = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions, global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetArtifactsOfType",
        __Marshaller_taxonomy_model_artifact_QueryOptions,
        __Marshaller_taxonomy_model_artifact_QueryResult);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse> __Method_InitializeNewArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeNewArtifact",
        __Marshaller_taxonomy_model_artifact_InitializeNewArtifactRequest,
        __Marshaller_taxonomy_model_artifact_InitializeNewArtifactResponse);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse> __Method_CreateArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateArtifact",
        __Marshaller_taxonomy_model_artifact_NewArtifactRequest,
        __Marshaller_taxonomy_model_artifact_NewArtifactResponse);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse> __Method_UpdateArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateArtifact",
        __Marshaller_taxonomy_model_artifact_UpdateArtifactRequest,
        __Marshaller_taxonomy_model_artifact_UpdateArtifactResponse);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse> __Method_DeleteArtifact = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteArtifact",
        __Marshaller_taxonomy_model_artifact_DeleteArtifactRequest,
        __Marshaller_taxonomy_model_artifact_DeleteArtifactResponse);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition, global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> __Method_CreateTemplateDefinition = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition, global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTemplateDefinition",
        __Marshaller_taxonomy_model_artifact_NewTemplateDefinition,
        __Marshaller_taxonomy_model_core_TemplateDefinition);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest, global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse> __Method_CommitLocalUpdates = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest, global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitLocalUpdates",
        __Marshaller_taxonomy_model_artifact_CommitUpdatesRequest,
        __Marshaller_taxonomy_model_artifact_CommitUpdatesResponse);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest, global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse> __Method_PullRequest = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest, global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PullRequest",
        __Marshaller_taxonomy_model_artifact_IssuePullRequest,
        __Marshaller_taxonomy_model_artifact_IssuePullResponse);

    static readonly grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest, global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration> __Method_GetConfig = new grpc::Method<global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest, global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConfig",
        __Marshaller_taxonomy_model_artifact_ConfigurationRequest,
        __Marshaller_taxonomy_model_artifact_ServiceConfiguration);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TTI.TTF.Taxonomy.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Service</summary>
    [grpc::BindServiceMethod(typeof(Service), "BindService")]
    public abstract partial class ServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Taxonomy> GetFullTaxonomy(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Taxonomy> GetLiteTaxonomy(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.Base> GetBaseArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.Behavior> GetBehaviorArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> GetBehaviorGroupArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.PropertySet> GetPropertySetArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula> GetTemplateFormulaArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> GetTemplateDefinitionArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate> GetTokenTemplate(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification> GetTokenSpecification(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult> GetArtifactsOfType(global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse> InitializeNewArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse> CreateArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse> UpdateArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse> DeleteArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> CreateTemplateDefinition(global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse> CommitLocalUpdates(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse> PullRequest(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration> GetConfig(global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Service</summary>
    public partial class ServiceClient : grpc::ClientBase<ServiceClient>
    {
      /// <summary>Creates a new client for Service</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Service that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::TTI.TTF.Taxonomy.Model.Taxonomy GetFullTaxonomy(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFullTaxonomy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Taxonomy GetFullTaxonomy(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFullTaxonomy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Taxonomy> GetFullTaxonomyAsync(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFullTaxonomyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Taxonomy> GetFullTaxonomyAsync(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFullTaxonomy, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Taxonomy GetLiteTaxonomy(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLiteTaxonomy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Taxonomy GetLiteTaxonomy(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLiteTaxonomy, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Taxonomy> GetLiteTaxonomyAsync(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLiteTaxonomyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Taxonomy> GetLiteTaxonomyAsync(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLiteTaxonomy, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.Base GetBaseArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaseArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.Base GetBaseArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBaseArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.Base> GetBaseArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBaseArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.Base> GetBaseArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBaseArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.Behavior GetBehaviorArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBehaviorArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.Behavior GetBehaviorArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBehaviorArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.Behavior> GetBehaviorArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBehaviorArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.Behavior> GetBehaviorArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBehaviorArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup GetBehaviorGroupArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBehaviorGroupArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup GetBehaviorGroupArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBehaviorGroupArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> GetBehaviorGroupArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBehaviorGroupArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> GetBehaviorGroupArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBehaviorGroupArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.PropertySet GetPropertySetArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPropertySetArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.PropertySet GetPropertySetArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPropertySetArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.PropertySet> GetPropertySetArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPropertySetArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.PropertySet> GetPropertySetArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPropertySetArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula GetTemplateFormulaArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTemplateFormulaArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula GetTemplateFormulaArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTemplateFormulaArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula> GetTemplateFormulaArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTemplateFormulaArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula> GetTemplateFormulaArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTemplateFormulaArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition GetTemplateDefinitionArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTemplateDefinitionArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition GetTemplateDefinitionArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTemplateDefinitionArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> GetTemplateDefinitionArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTemplateDefinitionArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> GetTemplateDefinitionArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTemplateDefinitionArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate GetTokenTemplate(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate GetTokenTemplate(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTokenTemplate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate> GetTokenTemplateAsync(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate> GetTokenTemplateAsync(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTokenTemplate, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification GetTokenSpecification(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenSpecification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification GetTokenSpecification(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTokenSpecification, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification> GetTokenSpecificationAsync(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenSpecificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification> GetTokenSpecificationAsync(global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTokenSpecification, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult GetArtifactsOfType(global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtifactsOfType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult GetArtifactsOfType(global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetArtifactsOfType, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult> GetArtifactsOfTypeAsync(global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetArtifactsOfTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult> GetArtifactsOfTypeAsync(global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetArtifactsOfType, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse InitializeNewArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeNewArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse InitializeNewArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeNewArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse> InitializeNewArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeNewArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse> InitializeNewArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeNewArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse CreateArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse CreateArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse> CreateArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse> CreateArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse UpdateArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse UpdateArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse> UpdateArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse> UpdateArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse DeleteArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteArtifact(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse DeleteArtifact(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteArtifact, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse> DeleteArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteArtifactAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse> DeleteArtifactAsync(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteArtifact, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition CreateTemplateDefinition(global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTemplateDefinition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition CreateTemplateDefinition(global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTemplateDefinition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> CreateTemplateDefinitionAsync(global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTemplateDefinitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition> CreateTemplateDefinitionAsync(global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTemplateDefinition, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse CommitLocalUpdates(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitLocalUpdates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse CommitLocalUpdates(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitLocalUpdates, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse> CommitLocalUpdatesAsync(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitLocalUpdatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse> CommitLocalUpdatesAsync(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitLocalUpdates, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse PullRequest(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PullRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse PullRequest(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PullRequest, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse> PullRequestAsync(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PullRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse> PullRequestAsync(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PullRequest, null, options, request);
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration GetConfig(global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration GetConfig(global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConfig, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration> GetConfigAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration> GetConfigAsync(global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetFullTaxonomy, serviceImpl.GetFullTaxonomy)
          .AddMethod(__Method_GetLiteTaxonomy, serviceImpl.GetLiteTaxonomy)
          .AddMethod(__Method_GetBaseArtifact, serviceImpl.GetBaseArtifact)
          .AddMethod(__Method_GetBehaviorArtifact, serviceImpl.GetBehaviorArtifact)
          .AddMethod(__Method_GetBehaviorGroupArtifact, serviceImpl.GetBehaviorGroupArtifact)
          .AddMethod(__Method_GetPropertySetArtifact, serviceImpl.GetPropertySetArtifact)
          .AddMethod(__Method_GetTemplateFormulaArtifact, serviceImpl.GetTemplateFormulaArtifact)
          .AddMethod(__Method_GetTemplateDefinitionArtifact, serviceImpl.GetTemplateDefinitionArtifact)
          .AddMethod(__Method_GetTokenTemplate, serviceImpl.GetTokenTemplate)
          .AddMethod(__Method_GetTokenSpecification, serviceImpl.GetTokenSpecification)
          .AddMethod(__Method_GetArtifactsOfType, serviceImpl.GetArtifactsOfType)
          .AddMethod(__Method_InitializeNewArtifact, serviceImpl.InitializeNewArtifact)
          .AddMethod(__Method_CreateArtifact, serviceImpl.CreateArtifact)
          .AddMethod(__Method_UpdateArtifact, serviceImpl.UpdateArtifact)
          .AddMethod(__Method_DeleteArtifact, serviceImpl.DeleteArtifact)
          .AddMethod(__Method_CreateTemplateDefinition, serviceImpl.CreateTemplateDefinition)
          .AddMethod(__Method_CommitLocalUpdates, serviceImpl.CommitLocalUpdates)
          .AddMethod(__Method_PullRequest, serviceImpl.PullRequest)
          .AddMethod(__Method_GetConfig, serviceImpl.GetConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetFullTaxonomy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion, global::TTI.TTF.Taxonomy.Model.Taxonomy>(serviceImpl.GetFullTaxonomy));
      serviceBinder.AddMethod(__Method_GetLiteTaxonomy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.TaxonomyVersion, global::TTI.TTF.Taxonomy.Model.Taxonomy>(serviceImpl.GetLiteTaxonomy));
      serviceBinder.AddMethod(__Method_GetBaseArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.Base>(serviceImpl.GetBaseArtifact));
      serviceBinder.AddMethod(__Method_GetBehaviorArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.Behavior>(serviceImpl.GetBehaviorArtifact));
      serviceBinder.AddMethod(__Method_GetBehaviorGroupArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup>(serviceImpl.GetBehaviorGroupArtifact));
      serviceBinder.AddMethod(__Method_GetPropertySetArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.PropertySet>(serviceImpl.GetPropertySetArtifact));
      serviceBinder.AddMethod(__Method_GetTemplateFormulaArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.TemplateFormula>(serviceImpl.GetTemplateFormulaArtifact));
      serviceBinder.AddMethod(__Method_GetTemplateDefinitionArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol, global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition>(serviceImpl.GetTemplateDefinitionArtifact));
      serviceBinder.AddMethod(__Method_GetTokenTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId, global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate>(serviceImpl.GetTokenTemplate));
      serviceBinder.AddMethod(__Method_GetTokenSpecification, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.TokenTemplateId, global::TTI.TTF.Taxonomy.Model.Core.TokenSpecification>(serviceImpl.GetTokenSpecification));
      serviceBinder.AddMethod(__Method_GetArtifactsOfType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions, global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult>(serviceImpl.GetArtifactsOfType));
      serviceBinder.AddMethod(__Method_InitializeNewArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.InitializeNewArtifactResponse>(serviceImpl.InitializeNewArtifact));
      serviceBinder.AddMethod(__Method_CreateArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse>(serviceImpl.CreateArtifact));
      serviceBinder.AddMethod(__Method_UpdateArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse>(serviceImpl.UpdateArtifact));
      serviceBinder.AddMethod(__Method_DeleteArtifact, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest, global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse>(serviceImpl.DeleteArtifact));
      serviceBinder.AddMethod(__Method_CreateTemplateDefinition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.NewTemplateDefinition, global::TTI.TTF.Taxonomy.Model.Core.TemplateDefinition>(serviceImpl.CreateTemplateDefinition));
      serviceBinder.AddMethod(__Method_CommitLocalUpdates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest, global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse>(serviceImpl.CommitLocalUpdates));
      serviceBinder.AddMethod(__Method_PullRequest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest, global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse>(serviceImpl.PullRequest));
      serviceBinder.AddMethod(__Method_GetConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::TTI.TTF.Taxonomy.Model.Artifact.ConfigurationRequest, global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration>(serviceImpl.GetConfig));
    }

  }
}
#endregion
