// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: taxonomy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TTI.TTF.Taxonomy.Model {

  /// <summary>Holder for reflection information generated from taxonomy.proto</summary>
  public static partial class TaxonomyReflection {

    #region Descriptor
    /// <summary>File descriptor for taxonomy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxonomyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg50YXhvbm9teS5wcm90bxIOdGF4b25vbXkubW9kZWwaCmNvcmUucHJvdG8a",
            "DmFydGlmYWN0LnByb3RvIsgHCghUYXhvbm9teRIwCgd2ZXJzaW9uGAEgASgL",
            "Mh8udGF4b25vbXkubW9kZWwuVGF4b25vbXlWZXJzaW9uEkYKEGJhc2VfdG9r",
            "ZW5fdHlwZXMYAiADKAsyLC50YXhvbm9teS5tb2RlbC5UYXhvbm9teS5CYXNl",
            "VG9rZW5UeXBlc0VudHJ5EjoKCWJlaGF2aW9ycxgDIAMoCzInLnRheG9ub215",
            "Lm1vZGVsLlRheG9ub215LkJlaGF2aW9yc0VudHJ5EkUKD2JlaGF2aW9yX2dy",
            "b3VwcxgEIAMoCzIsLnRheG9ub215Lm1vZGVsLlRheG9ub215LkJlaGF2aW9y",
            "R3JvdXBzRW50cnkSQQoNcHJvcGVydHlfc2V0cxgFIAMoCzIqLnRheG9ub215",
            "Lm1vZGVsLlRheG9ub215LlByb3BlcnR5U2V0c0VudHJ5EjsKGHRva2VuX3Rl",
            "bXBsYXRlX2hpZXJhcmNoeRgGIAEoCzIZLnRheG9ub215Lm1vZGVsLkhpZXJh",
            "cmNoeRJJChF0b2tlbl9kZWZpbml0aW9ucxgHIAMoCzIuLnRheG9ub215Lm1v",
            "ZGVsLlRheG9ub215LlRva2VuRGVmaW5pdGlvbnNFbnRyeRJACg9mb3JtdWxh",
            "X2dyYW1tYXIYCCABKAsyJy50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5Gb3Jt",
            "dWxhR3JhbW1hchpQChNCYXNlVG9rZW5UeXBlc0VudHJ5EgsKA2tleRgBIAEo",
            "CRIoCgV2YWx1ZRgCIAEoCzIZLnRheG9ub215Lm1vZGVsLmNvcmUuQmFzZToC",
            "OAEaTwoOQmVoYXZpb3JzRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIg",
            "ASgLMh0udGF4b25vbXkubW9kZWwuY29yZS5CZWhhdmlvcjoCOAEaWQoTQmVo",
            "YXZpb3JHcm91cHNFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsy",
            "Ii50YXhvbm9teS5tb2RlbC5jb3JlLkJlaGF2aW9yR3JvdXA6AjgBGlUKEVBy",
            "b3BlcnR5U2V0c0VudHJ5EgsKA2tleRgBIAEoCRIvCgV2YWx1ZRgCIAEoCzIg",
            "LnRheG9ub215Lm1vZGVsLmNvcmUuUHJvcGVydHlTZXQ6AjgBGl0KFVRva2Vu",
            "RGVmaW5pdGlvbnNFbnRyeRILCgNrZXkYASABKAkSMwoFdmFsdWUYAiABKAsy",
            "JC50YXhvbm9teS5tb2RlbC5jb3JlLlRva2VuRGVmaW5pdGlvbjoCOAEiQgoP",
            "VGF4b25vbXlWZXJzaW9uEgoKAmlkGAEgASgJEg8KB3ZlcnNpb24YAiABKAkS",
            "EgoKc3RhdGVfaGFzaBgDIAEoCSKbAgoJSGllcmFyY2h5EjgKFGZyYWN0aW9u",
            "YWxfZnVuZ2libGVzGAEgASgLMhoudGF4b25vbXkubW9kZWwuQnJhbmNoUm9v",
            "dBIzCg93aG9sZV9mdW5naWJsZXMYAiABKAsyGi50YXhvbm9teS5tb2RlbC5C",
            "cmFuY2hSb290EjwKGGZyYWN0aW9uYWxfbm9uX2Z1bmdpYmxlcxgDIAEoCzIa",
            "LnRheG9ub215Lm1vZGVsLkJyYW5jaFJvb3QSLgoKc2luZ2xldG9ucxgEIAEo",
            "CzIaLnRheG9ub215Lm1vZGVsLkJyYW5jaFJvb3QSMQoHaHlicmlkcxgFIAEo",
            "CzIgLnRheG9ub215Lm1vZGVsLkh5YnJpZEJyYW5jaFJvb3QiowEKEEJyYW5j",
            "aElkZW50aWZpZXISNgoKdG9rZW5fdHlwZRgBIAEoDjIiLnRheG9ub215Lm1v",
            "ZGVsLmFydGlmYWN0LlRva2VuVHlwZRI9CgZicmFuY2gYAiABKA4yLS50YXhv",
            "bm9teS5tb2RlbC5hcnRpZmFjdC5DbGFzc2lmaWNhdGlvbkJyYW5jaBIYChBi",
            "YXNlX3RlbXBsYXRlX2lkGAMgASgJIpMCCgpCcmFuY2hSb290EjsKEWJyYW5j",
            "aF9pZGVudGlmaWVyGAEgASgLMiAudGF4b25vbXkubW9kZWwuQnJhbmNoSWRl",
            "bnRpZmllchIRCglwYXJlbnRfaWQYAiABKAkSDAoEbmFtZRgDIAEoCRI0Cgh0",
            "ZW1wbGF0ZRgEIAEoCzIiLnRheG9ub215Lm1vZGVsLmNvcmUuVG9rZW5UZW1w",
            "bGF0ZRI/ChF0b2tlbl9kZWZpbml0aW9ucxgFIAMoCzIkLnRheG9ub215Lm1v",
            "ZGVsLmNvcmUuVG9rZW5EZWZpbml0aW9uEjAKCGJyYW5jaGVzGAYgAygLMh4u",
            "dGF4b25vbXkubW9kZWwuVGVtcGxhdGVCcmFuY2gi7wEKEEh5YnJpZEJyYW5j",
            "aFJvb3QSOAoUZnJhY3Rpb25hbF9mdW5naWJsZXMYASABKAsyGi50YXhvbm9t",
            "eS5tb2RlbC5CcmFuY2hSb290EjMKD3dob2xlX2Z1bmdpYmxlcxgCIAEoCzIa",
            "LnRheG9ub215Lm1vZGVsLkJyYW5jaFJvb3QSPAoYZnJhY3Rpb25hbF9ub25f",
            "ZnVuZ2libGVzGAMgASgLMhoudGF4b25vbXkubW9kZWwuQnJhbmNoUm9vdBIu",
            "CgpzaW5nbGV0b25zGAQgASgLMhoudGF4b25vbXkubW9kZWwuQnJhbmNoUm9v",
            "dCKSAgoOVGVtcGxhdGVCcmFuY2gSGgoSdGVtcGxhdGVfcGFyZW50X2lkGAEg",
            "ASgJEgwKBG5hbWUYAyABKAkSNAoIdGVtcGxhdGUYBCABKAsyIi50YXhvbm9t",
            "eS5tb2RlbC5jb3JlLlRva2VuVGVtcGxhdGUSPwoRdG9rZW5fZGVmaW5pdGlv",
            "bnMYBSADKAsyJC50YXhvbm9teS5tb2RlbC5jb3JlLlRva2VuRGVmaW5pdGlv",
            "bhIsCghicmFuY2hlcxgGIAMoCzIaLnRheG9ub215Lm1vZGVsLkJyYW5jaFJv",
            "b3QSMQoNcGFyZW50X2JyYW5jaBgHIAEoCzIaLnRheG9ub215Lm1vZGVsLkJy",
            "YW5jaFJvb3RCNwoab3JnLnR0aS50dGYudGF4b25vbXkubW9kZWxQAaoCFlRU",
            "SS5UVEYuVGF4b25vbXkuTW9kZWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::TTI.TTF.Taxonomy.Model.Core.CoreReflection.Descriptor, global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Taxonomy), global::TTI.TTF.Taxonomy.Model.Taxonomy.Parser, new[]{ "Version", "BaseTokenTypes", "Behaviors", "BehaviorGroups", "PropertySets", "TokenTemplateHierarchy", "TokenDefinitions", "FormulaGrammar" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.TaxonomyVersion), global::TTI.TTF.Taxonomy.Model.TaxonomyVersion.Parser, new[]{ "Id", "Version", "StateHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Hierarchy), global::TTI.TTF.Taxonomy.Model.Hierarchy.Parser, new[]{ "FractionalFungibles", "WholeFungibles", "FractionalNonFungibles", "Singletons", "Hybrids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.BranchIdentifier), global::TTI.TTF.Taxonomy.Model.BranchIdentifier.Parser, new[]{ "TokenType", "Branch", "BaseTemplateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.BranchRoot), global::TTI.TTF.Taxonomy.Model.BranchRoot.Parser, new[]{ "BranchIdentifier", "ParentId", "Name", "Template", "TokenDefinitions", "Branches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.HybridBranchRoot), global::TTI.TTF.Taxonomy.Model.HybridBranchRoot.Parser, new[]{ "FractionalFungibles", "WholeFungibles", "FractionalNonFungibles", "Singletons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.TemplateBranch), global::TTI.TTF.Taxonomy.Model.TemplateBranch.Parser, new[]{ "TemplateParentId", "Name", "Template", "TokenDefinitions", "Branches", "ParentBranch" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///each collection defined in a map with the index being the symbol of the artifact for the collection.
  /// </summary>
  public sealed partial class Taxonomy : pb::IMessage<Taxonomy> {
    private static readonly pb::MessageParser<Taxonomy> _parser = new pb::MessageParser<Taxonomy>(() => new Taxonomy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Taxonomy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taxonomy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taxonomy(Taxonomy other) : this() {
      version_ = other.version_ != null ? other.version_.Clone() : null;
      baseTokenTypes_ = other.baseTokenTypes_.Clone();
      behaviors_ = other.behaviors_.Clone();
      behaviorGroups_ = other.behaviorGroups_.Clone();
      propertySets_ = other.propertySets_.Clone();
      tokenTemplateHierarchy_ = other.tokenTemplateHierarchy_ != null ? other.tokenTemplateHierarchy_.Clone() : null;
      tokenDefinitions_ = other.tokenDefinitions_.Clone();
      formulaGrammar_ = other.formulaGrammar_ != null ? other.formulaGrammar_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taxonomy Clone() {
      return new Taxonomy(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.TaxonomyVersion version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.TaxonomyVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "base_token_types" field.</summary>
    public const int BaseTokenTypesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Base>.Codec _map_baseTokenTypes_codec
        = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Base>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Core.Base.Parser), 18);
    private readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Base> baseTokenTypes_ = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Base>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Base> BaseTokenTypes {
      get { return baseTokenTypes_; }
    }

    /// <summary>Field number for the "behaviors" field.</summary>
    public const int BehaviorsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Behavior>.Codec _map_behaviors_codec
        = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Behavior>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Core.Behavior.Parser), 26);
    private readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Behavior> behaviors_ = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Behavior>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.Behavior> Behaviors {
      get { return behaviors_; }
    }

    /// <summary>Field number for the "behavior_groups" field.</summary>
    public const int BehaviorGroupsFieldNumber = 4;
    private static readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup>.Codec _map_behaviorGroups_codec
        = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup.Parser), 34);
    private readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> behaviorGroups_ = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.BehaviorGroup> BehaviorGroups {
      get { return behaviorGroups_; }
    }

    /// <summary>Field number for the "property_sets" field.</summary>
    public const int PropertySetsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.PropertySet>.Codec _map_propertySets_codec
        = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.PropertySet>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Core.PropertySet.Parser), 42);
    private readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.PropertySet> propertySets_ = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.PropertySet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.PropertySet> PropertySets {
      get { return propertySets_; }
    }

    /// <summary>Field number for the "token_template_hierarchy" field.</summary>
    public const int TokenTemplateHierarchyFieldNumber = 6;
    private global::TTI.TTF.Taxonomy.Model.Hierarchy tokenTemplateHierarchy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Hierarchy TokenTemplateHierarchy {
      get { return tokenTemplateHierarchy_; }
      set {
        tokenTemplateHierarchy_ = value;
      }
    }

    /// <summary>Field number for the "token_definitions" field.</summary>
    public const int TokenDefinitionsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition>.Codec _map_tokenDefinitions_codec
        = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition.Parser), 58);
    private readonly pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> tokenDefinitions_ = new pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> TokenDefinitions {
      get { return tokenDefinitions_; }
    }

    /// <summary>Field number for the "formula_grammar" field.</summary>
    public const int FormulaGrammarFieldNumber = 8;
    private global::TTI.TTF.Taxonomy.Model.Artifact.FormulaGrammar formulaGrammar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.FormulaGrammar FormulaGrammar {
      get { return formulaGrammar_; }
      set {
        formulaGrammar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Taxonomy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Taxonomy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Version, other.Version)) return false;
      if (!BaseTokenTypes.Equals(other.BaseTokenTypes)) return false;
      if (!Behaviors.Equals(other.Behaviors)) return false;
      if (!BehaviorGroups.Equals(other.BehaviorGroups)) return false;
      if (!PropertySets.Equals(other.PropertySets)) return false;
      if (!object.Equals(TokenTemplateHierarchy, other.TokenTemplateHierarchy)) return false;
      if (!TokenDefinitions.Equals(other.TokenDefinitions)) return false;
      if (!object.Equals(FormulaGrammar, other.FormulaGrammar)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (version_ != null) hash ^= Version.GetHashCode();
      hash ^= BaseTokenTypes.GetHashCode();
      hash ^= Behaviors.GetHashCode();
      hash ^= BehaviorGroups.GetHashCode();
      hash ^= PropertySets.GetHashCode();
      if (tokenTemplateHierarchy_ != null) hash ^= TokenTemplateHierarchy.GetHashCode();
      hash ^= TokenDefinitions.GetHashCode();
      if (formulaGrammar_ != null) hash ^= FormulaGrammar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (version_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Version);
      }
      baseTokenTypes_.WriteTo(output, _map_baseTokenTypes_codec);
      behaviors_.WriteTo(output, _map_behaviors_codec);
      behaviorGroups_.WriteTo(output, _map_behaviorGroups_codec);
      propertySets_.WriteTo(output, _map_propertySets_codec);
      if (tokenTemplateHierarchy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TokenTemplateHierarchy);
      }
      tokenDefinitions_.WriteTo(output, _map_tokenDefinitions_codec);
      if (formulaGrammar_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FormulaGrammar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      size += baseTokenTypes_.CalculateSize(_map_baseTokenTypes_codec);
      size += behaviors_.CalculateSize(_map_behaviors_codec);
      size += behaviorGroups_.CalculateSize(_map_behaviorGroups_codec);
      size += propertySets_.CalculateSize(_map_propertySets_codec);
      if (tokenTemplateHierarchy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenTemplateHierarchy);
      }
      size += tokenDefinitions_.CalculateSize(_map_tokenDefinitions_codec);
      if (formulaGrammar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FormulaGrammar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Taxonomy other) {
      if (other == null) {
        return;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::TTI.TTF.Taxonomy.Model.TaxonomyVersion();
        }
        Version.MergeFrom(other.Version);
      }
      baseTokenTypes_.Add(other.baseTokenTypes_);
      behaviors_.Add(other.behaviors_);
      behaviorGroups_.Add(other.behaviorGroups_);
      propertySets_.Add(other.propertySets_);
      if (other.tokenTemplateHierarchy_ != null) {
        if (tokenTemplateHierarchy_ == null) {
          TokenTemplateHierarchy = new global::TTI.TTF.Taxonomy.Model.Hierarchy();
        }
        TokenTemplateHierarchy.MergeFrom(other.TokenTemplateHierarchy);
      }
      tokenDefinitions_.Add(other.tokenDefinitions_);
      if (other.formulaGrammar_ != null) {
        if (formulaGrammar_ == null) {
          FormulaGrammar = new global::TTI.TTF.Taxonomy.Model.Artifact.FormulaGrammar();
        }
        FormulaGrammar.MergeFrom(other.FormulaGrammar);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (version_ == null) {
              Version = new global::TTI.TTF.Taxonomy.Model.TaxonomyVersion();
            }
            input.ReadMessage(Version);
            break;
          }
          case 18: {
            baseTokenTypes_.AddEntriesFrom(input, _map_baseTokenTypes_codec);
            break;
          }
          case 26: {
            behaviors_.AddEntriesFrom(input, _map_behaviors_codec);
            break;
          }
          case 34: {
            behaviorGroups_.AddEntriesFrom(input, _map_behaviorGroups_codec);
            break;
          }
          case 42: {
            propertySets_.AddEntriesFrom(input, _map_propertySets_codec);
            break;
          }
          case 50: {
            if (tokenTemplateHierarchy_ == null) {
              TokenTemplateHierarchy = new global::TTI.TTF.Taxonomy.Model.Hierarchy();
            }
            input.ReadMessage(TokenTemplateHierarchy);
            break;
          }
          case 58: {
            tokenDefinitions_.AddEntriesFrom(input, _map_tokenDefinitions_codec);
            break;
          }
          case 66: {
            if (formulaGrammar_ == null) {
              FormulaGrammar = new global::TTI.TTF.Taxonomy.Model.Artifact.FormulaGrammar();
            }
            input.ReadMessage(FormulaGrammar);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaxonomyVersion : pb::IMessage<TaxonomyVersion> {
    private static readonly pb::MessageParser<TaxonomyVersion> _parser = new pb::MessageParser<TaxonomyVersion>(() => new TaxonomyVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxonomyVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyVersion(TaxonomyVersion other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      stateHash_ = other.stateHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyVersion Clone() {
      return new TaxonomyVersion(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_hash" field.</summary>
    public const int StateHashFieldNumber = 3;
    private string stateHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateHash {
      get { return stateHash_; }
      set {
        stateHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxonomyVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxonomyVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (StateHash != other.StateHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (StateHash.Length != 0) hash ^= StateHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (StateHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StateHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (StateHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxonomyVersion other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.StateHash.Length != 0) {
        StateHash = other.StateHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            StateHash = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hierarchy : pb::IMessage<Hierarchy> {
    private static readonly pb::MessageParser<Hierarchy> _parser = new pb::MessageParser<Hierarchy>(() => new Hierarchy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hierarchy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy(Hierarchy other) : this() {
      fractionalFungibles_ = other.fractionalFungibles_ != null ? other.fractionalFungibles_.Clone() : null;
      wholeFungibles_ = other.wholeFungibles_ != null ? other.wholeFungibles_.Clone() : null;
      fractionalNonFungibles_ = other.fractionalNonFungibles_ != null ? other.fractionalNonFungibles_.Clone() : null;
      singletons_ = other.singletons_ != null ? other.singletons_.Clone() : null;
      hybrids_ = other.hybrids_ != null ? other.hybrids_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy Clone() {
      return new Hierarchy(this);
    }

    /// <summary>Field number for the "fractional_fungibles" field.</summary>
    public const int FractionalFungiblesFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot fractionalFungibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot FractionalFungibles {
      get { return fractionalFungibles_; }
      set {
        fractionalFungibles_ = value;
      }
    }

    /// <summary>Field number for the "whole_fungibles" field.</summary>
    public const int WholeFungiblesFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot wholeFungibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot WholeFungibles {
      get { return wholeFungibles_; }
      set {
        wholeFungibles_ = value;
      }
    }

    /// <summary>Field number for the "fractional_non_fungibles" field.</summary>
    public const int FractionalNonFungiblesFieldNumber = 3;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot fractionalNonFungibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot FractionalNonFungibles {
      get { return fractionalNonFungibles_; }
      set {
        fractionalNonFungibles_ = value;
      }
    }

    /// <summary>Field number for the "singletons" field.</summary>
    public const int SingletonsFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot singletons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot Singletons {
      get { return singletons_; }
      set {
        singletons_ = value;
      }
    }

    /// <summary>Field number for the "hybrids" field.</summary>
    public const int HybridsFieldNumber = 5;
    private global::TTI.TTF.Taxonomy.Model.HybridBranchRoot hybrids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.HybridBranchRoot Hybrids {
      get { return hybrids_; }
      set {
        hybrids_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hierarchy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hierarchy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FractionalFungibles, other.FractionalFungibles)) return false;
      if (!object.Equals(WholeFungibles, other.WholeFungibles)) return false;
      if (!object.Equals(FractionalNonFungibles, other.FractionalNonFungibles)) return false;
      if (!object.Equals(Singletons, other.Singletons)) return false;
      if (!object.Equals(Hybrids, other.Hybrids)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fractionalFungibles_ != null) hash ^= FractionalFungibles.GetHashCode();
      if (wholeFungibles_ != null) hash ^= WholeFungibles.GetHashCode();
      if (fractionalNonFungibles_ != null) hash ^= FractionalNonFungibles.GetHashCode();
      if (singletons_ != null) hash ^= Singletons.GetHashCode();
      if (hybrids_ != null) hash ^= Hybrids.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fractionalFungibles_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FractionalFungibles);
      }
      if (wholeFungibles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WholeFungibles);
      }
      if (fractionalNonFungibles_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FractionalNonFungibles);
      }
      if (singletons_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Singletons);
      }
      if (hybrids_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hybrids);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fractionalFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FractionalFungibles);
      }
      if (wholeFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WholeFungibles);
      }
      if (fractionalNonFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FractionalNonFungibles);
      }
      if (singletons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Singletons);
      }
      if (hybrids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hybrids);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hierarchy other) {
      if (other == null) {
        return;
      }
      if (other.fractionalFungibles_ != null) {
        if (fractionalFungibles_ == null) {
          FractionalFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        FractionalFungibles.MergeFrom(other.FractionalFungibles);
      }
      if (other.wholeFungibles_ != null) {
        if (wholeFungibles_ == null) {
          WholeFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        WholeFungibles.MergeFrom(other.WholeFungibles);
      }
      if (other.fractionalNonFungibles_ != null) {
        if (fractionalNonFungibles_ == null) {
          FractionalNonFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        FractionalNonFungibles.MergeFrom(other.FractionalNonFungibles);
      }
      if (other.singletons_ != null) {
        if (singletons_ == null) {
          Singletons = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        Singletons.MergeFrom(other.Singletons);
      }
      if (other.hybrids_ != null) {
        if (hybrids_ == null) {
          Hybrids = new global::TTI.TTF.Taxonomy.Model.HybridBranchRoot();
        }
        Hybrids.MergeFrom(other.Hybrids);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fractionalFungibles_ == null) {
              FractionalFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(FractionalFungibles);
            break;
          }
          case 18: {
            if (wholeFungibles_ == null) {
              WholeFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(WholeFungibles);
            break;
          }
          case 26: {
            if (fractionalNonFungibles_ == null) {
              FractionalNonFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(FractionalNonFungibles);
            break;
          }
          case 34: {
            if (singletons_ == null) {
              Singletons = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Singletons);
            break;
          }
          case 42: {
            if (hybrids_ == null) {
              Hybrids = new global::TTI.TTF.Taxonomy.Model.HybridBranchRoot();
            }
            input.ReadMessage(Hybrids);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BranchIdentifier : pb::IMessage<BranchIdentifier> {
    private static readonly pb::MessageParser<BranchIdentifier> _parser = new pb::MessageParser<BranchIdentifier>(() => new BranchIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BranchIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchIdentifier(BranchIdentifier other) : this() {
      tokenType_ = other.tokenType_;
      branch_ = other.branch_;
      baseTemplateId_ = other.baseTemplateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchIdentifier Clone() {
      return new BranchIdentifier(this);
    }

    /// <summary>Field number for the "token_type" field.</summary>
    public const int TokenTypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.TokenType tokenType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.TokenType TokenType {
      get { return tokenType_; }
      set {
        tokenType_ = value;
      }
    }

    /// <summary>Field number for the "branch" field.</summary>
    public const int BranchFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch branch_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch Branch {
      get { return branch_; }
      set {
        branch_ = value;
      }
    }

    /// <summary>Field number for the "base_template_id" field.</summary>
    public const int BaseTemplateIdFieldNumber = 3;
    private string baseTemplateId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTemplateId {
      get { return baseTemplateId_; }
      set {
        baseTemplateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BranchIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BranchIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenType != other.TokenType) return false;
      if (Branch != other.Branch) return false;
      if (BaseTemplateId != other.BaseTemplateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenType != 0) hash ^= TokenType.GetHashCode();
      if (Branch != 0) hash ^= Branch.GetHashCode();
      if (BaseTemplateId.Length != 0) hash ^= BaseTemplateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TokenType);
      }
      if (Branch != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Branch);
      }
      if (BaseTemplateId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BaseTemplateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TokenType);
      }
      if (Branch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Branch);
      }
      if (BaseTemplateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseTemplateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BranchIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.TokenType != 0) {
        TokenType = other.TokenType;
      }
      if (other.Branch != 0) {
        Branch = other.Branch;
      }
      if (other.BaseTemplateId.Length != 0) {
        BaseTemplateId = other.BaseTemplateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TokenType = (global::TTI.TTF.Taxonomy.Model.Artifact.TokenType) input.ReadEnum();
            break;
          }
          case 16: {
            Branch = (global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch) input.ReadEnum();
            break;
          }
          case 26: {
            BaseTemplateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BranchRoot : pb::IMessage<BranchRoot> {
    private static readonly pb::MessageParser<BranchRoot> _parser = new pb::MessageParser<BranchRoot>(() => new BranchRoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BranchRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchRoot(BranchRoot other) : this() {
      branchIdentifier_ = other.branchIdentifier_ != null ? other.branchIdentifier_.Clone() : null;
      parentId_ = other.parentId_;
      name_ = other.name_;
      template_ = other.template_ != null ? other.template_.Clone() : null;
      tokenDefinitions_ = other.tokenDefinitions_.Clone();
      branches_ = other.branches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchRoot Clone() {
      return new BranchRoot(this);
    }

    /// <summary>Field number for the "branch_identifier" field.</summary>
    public const int BranchIdentifierFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.BranchIdentifier branchIdentifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchIdentifier BranchIdentifier {
      get { return branchIdentifier_; }
      set {
        branchIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 2;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate template_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    /// <summary>Field number for the "token_definitions" field.</summary>
    public const int TokenDefinitionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> _repeated_tokenDefinitions_codec
        = pb::FieldCodec.ForMessage(42, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> tokenDefinitions_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> TokenDefinitions {
      get { return tokenDefinitions_; }
    }

    /// <summary>Field number for the "branches" field.</summary>
    public const int BranchesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.TemplateBranch> _repeated_branches_codec
        = pb::FieldCodec.ForMessage(50, global::TTI.TTF.Taxonomy.Model.TemplateBranch.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.TemplateBranch> branches_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.TemplateBranch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.TemplateBranch> Branches {
      get { return branches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BranchRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BranchRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BranchIdentifier, other.BranchIdentifier)) return false;
      if (ParentId != other.ParentId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Template, other.Template)) return false;
      if(!tokenDefinitions_.Equals(other.tokenDefinitions_)) return false;
      if(!branches_.Equals(other.branches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (branchIdentifier_ != null) hash ^= BranchIdentifier.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (template_ != null) hash ^= Template.GetHashCode();
      hash ^= tokenDefinitions_.GetHashCode();
      hash ^= branches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (branchIdentifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BranchIdentifier);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (template_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Template);
      }
      tokenDefinitions_.WriteTo(output, _repeated_tokenDefinitions_codec);
      branches_.WriteTo(output, _repeated_branches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (branchIdentifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BranchIdentifier);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (template_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
      }
      size += tokenDefinitions_.CalculateSize(_repeated_tokenDefinitions_codec);
      size += branches_.CalculateSize(_repeated_branches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BranchRoot other) {
      if (other == null) {
        return;
      }
      if (other.branchIdentifier_ != null) {
        if (branchIdentifier_ == null) {
          BranchIdentifier = new global::TTI.TTF.Taxonomy.Model.BranchIdentifier();
        }
        BranchIdentifier.MergeFrom(other.BranchIdentifier);
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.template_ != null) {
        if (template_ == null) {
          Template = new global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate();
        }
        Template.MergeFrom(other.Template);
      }
      tokenDefinitions_.Add(other.tokenDefinitions_);
      branches_.Add(other.branches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (branchIdentifier_ == null) {
              BranchIdentifier = new global::TTI.TTF.Taxonomy.Model.BranchIdentifier();
            }
            input.ReadMessage(BranchIdentifier);
            break;
          }
          case 18: {
            ParentId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (template_ == null) {
              Template = new global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate();
            }
            input.ReadMessage(Template);
            break;
          }
          case 42: {
            tokenDefinitions_.AddEntriesFrom(input, _repeated_tokenDefinitions_codec);
            break;
          }
          case 50: {
            branches_.AddEntriesFrom(input, _repeated_branches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HybridBranchRoot : pb::IMessage<HybridBranchRoot> {
    private static readonly pb::MessageParser<HybridBranchRoot> _parser = new pb::MessageParser<HybridBranchRoot>(() => new HybridBranchRoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HybridBranchRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridBranchRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridBranchRoot(HybridBranchRoot other) : this() {
      fractionalFungibles_ = other.fractionalFungibles_ != null ? other.fractionalFungibles_.Clone() : null;
      wholeFungibles_ = other.wholeFungibles_ != null ? other.wholeFungibles_.Clone() : null;
      fractionalNonFungibles_ = other.fractionalNonFungibles_ != null ? other.fractionalNonFungibles_.Clone() : null;
      singletons_ = other.singletons_ != null ? other.singletons_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridBranchRoot Clone() {
      return new HybridBranchRoot(this);
    }

    /// <summary>Field number for the "fractional_fungibles" field.</summary>
    public const int FractionalFungiblesFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot fractionalFungibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot FractionalFungibles {
      get { return fractionalFungibles_; }
      set {
        fractionalFungibles_ = value;
      }
    }

    /// <summary>Field number for the "whole_fungibles" field.</summary>
    public const int WholeFungiblesFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot wholeFungibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot WholeFungibles {
      get { return wholeFungibles_; }
      set {
        wholeFungibles_ = value;
      }
    }

    /// <summary>Field number for the "fractional_non_fungibles" field.</summary>
    public const int FractionalNonFungiblesFieldNumber = 3;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot fractionalNonFungibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot FractionalNonFungibles {
      get { return fractionalNonFungibles_; }
      set {
        fractionalNonFungibles_ = value;
      }
    }

    /// <summary>Field number for the "singletons" field.</summary>
    public const int SingletonsFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot singletons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot Singletons {
      get { return singletons_; }
      set {
        singletons_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HybridBranchRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HybridBranchRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FractionalFungibles, other.FractionalFungibles)) return false;
      if (!object.Equals(WholeFungibles, other.WholeFungibles)) return false;
      if (!object.Equals(FractionalNonFungibles, other.FractionalNonFungibles)) return false;
      if (!object.Equals(Singletons, other.Singletons)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fractionalFungibles_ != null) hash ^= FractionalFungibles.GetHashCode();
      if (wholeFungibles_ != null) hash ^= WholeFungibles.GetHashCode();
      if (fractionalNonFungibles_ != null) hash ^= FractionalNonFungibles.GetHashCode();
      if (singletons_ != null) hash ^= Singletons.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fractionalFungibles_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FractionalFungibles);
      }
      if (wholeFungibles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WholeFungibles);
      }
      if (fractionalNonFungibles_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FractionalNonFungibles);
      }
      if (singletons_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Singletons);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fractionalFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FractionalFungibles);
      }
      if (wholeFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WholeFungibles);
      }
      if (fractionalNonFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FractionalNonFungibles);
      }
      if (singletons_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Singletons);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HybridBranchRoot other) {
      if (other == null) {
        return;
      }
      if (other.fractionalFungibles_ != null) {
        if (fractionalFungibles_ == null) {
          FractionalFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        FractionalFungibles.MergeFrom(other.FractionalFungibles);
      }
      if (other.wholeFungibles_ != null) {
        if (wholeFungibles_ == null) {
          WholeFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        WholeFungibles.MergeFrom(other.WholeFungibles);
      }
      if (other.fractionalNonFungibles_ != null) {
        if (fractionalNonFungibles_ == null) {
          FractionalNonFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        FractionalNonFungibles.MergeFrom(other.FractionalNonFungibles);
      }
      if (other.singletons_ != null) {
        if (singletons_ == null) {
          Singletons = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        Singletons.MergeFrom(other.Singletons);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fractionalFungibles_ == null) {
              FractionalFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(FractionalFungibles);
            break;
          }
          case 18: {
            if (wholeFungibles_ == null) {
              WholeFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(WholeFungibles);
            break;
          }
          case 26: {
            if (fractionalNonFungibles_ == null) {
              FractionalNonFungibles = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(FractionalNonFungibles);
            break;
          }
          case 34: {
            if (singletons_ == null) {
              Singletons = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Singletons);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///used to dynamically build a heirarchy off a BranchRoot.
  /// </summary>
  public sealed partial class TemplateBranch : pb::IMessage<TemplateBranch> {
    private static readonly pb::MessageParser<TemplateBranch> _parser = new pb::MessageParser<TemplateBranch>(() => new TemplateBranch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TemplateBranch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateBranch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateBranch(TemplateBranch other) : this() {
      templateParentId_ = other.templateParentId_;
      name_ = other.name_;
      template_ = other.template_ != null ? other.template_.Clone() : null;
      tokenDefinitions_ = other.tokenDefinitions_.Clone();
      branches_ = other.branches_.Clone();
      parentBranch_ = other.parentBranch_ != null ? other.parentBranch_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TemplateBranch Clone() {
      return new TemplateBranch(this);
    }

    /// <summary>Field number for the "template_parent_id" field.</summary>
    public const int TemplateParentIdFieldNumber = 1;
    private string templateParentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TemplateParentId {
      get { return templateParentId_; }
      set {
        templateParentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate template_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    /// <summary>Field number for the "token_definitions" field.</summary>
    public const int TokenDefinitionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> _repeated_tokenDefinitions_codec
        = pb::FieldCodec.ForMessage(42, global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> tokenDefinitions_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Core.TokenDefinition> TokenDefinitions {
      get { return tokenDefinitions_; }
    }

    /// <summary>Field number for the "branches" field.</summary>
    public const int BranchesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.BranchRoot> _repeated_branches_codec
        = pb::FieldCodec.ForMessage(50, global::TTI.TTF.Taxonomy.Model.BranchRoot.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.BranchRoot> branches_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.BranchRoot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.BranchRoot> Branches {
      get { return branches_; }
    }

    /// <summary>Field number for the "parent_branch" field.</summary>
    public const int ParentBranchFieldNumber = 7;
    private global::TTI.TTF.Taxonomy.Model.BranchRoot parentBranch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.BranchRoot ParentBranch {
      get { return parentBranch_; }
      set {
        parentBranch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TemplateBranch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TemplateBranch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TemplateParentId != other.TemplateParentId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Template, other.Template)) return false;
      if(!tokenDefinitions_.Equals(other.tokenDefinitions_)) return false;
      if(!branches_.Equals(other.branches_)) return false;
      if (!object.Equals(ParentBranch, other.ParentBranch)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TemplateParentId.Length != 0) hash ^= TemplateParentId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (template_ != null) hash ^= Template.GetHashCode();
      hash ^= tokenDefinitions_.GetHashCode();
      hash ^= branches_.GetHashCode();
      if (parentBranch_ != null) hash ^= ParentBranch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TemplateParentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TemplateParentId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (template_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Template);
      }
      tokenDefinitions_.WriteTo(output, _repeated_tokenDefinitions_codec);
      branches_.WriteTo(output, _repeated_branches_codec);
      if (parentBranch_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ParentBranch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TemplateParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TemplateParentId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (template_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
      }
      size += tokenDefinitions_.CalculateSize(_repeated_tokenDefinitions_codec);
      size += branches_.CalculateSize(_repeated_branches_codec);
      if (parentBranch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentBranch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TemplateBranch other) {
      if (other == null) {
        return;
      }
      if (other.TemplateParentId.Length != 0) {
        TemplateParentId = other.TemplateParentId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.template_ != null) {
        if (template_ == null) {
          Template = new global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate();
        }
        Template.MergeFrom(other.Template);
      }
      tokenDefinitions_.Add(other.tokenDefinitions_);
      branches_.Add(other.branches_);
      if (other.parentBranch_ != null) {
        if (parentBranch_ == null) {
          ParentBranch = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
        }
        ParentBranch.MergeFrom(other.ParentBranch);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TemplateParentId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (template_ == null) {
              Template = new global::TTI.TTF.Taxonomy.Model.Core.TokenTemplate();
            }
            input.ReadMessage(Template);
            break;
          }
          case 42: {
            tokenDefinitions_.AddEntriesFrom(input, _repeated_tokenDefinitions_codec);
            break;
          }
          case 50: {
            branches_.AddEntriesFrom(input, _repeated_branches_codec);
            break;
          }
          case 58: {
            if (parentBranch_ == null) {
              ParentBranch = new global::TTI.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(ParentBranch);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
