// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: artifact.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TTI.TTF.Taxonomy.Model.Artifact {

  /// <summary>Holder for reflection information generated from artifact.proto</summary>
  public static partial class ArtifactReflection {

    #region Descriptor
    /// <summary>File descriptor for artifact.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArtifactReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5hcnRpZmFjdC5wcm90bxIXdGF4b25vbXkubW9kZWwuYXJ0aWZhY3QaGWdv",
            "b2dsZS9wcm90b2J1Zi9hbnkucHJvdG8ijAQKCEFydGlmYWN0EkAKD2FydGlm",
            "YWN0X3N5bWJvbBgBIAEoCzInLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFy",
            "dGlmYWN0U3ltYm9sEgwKBG5hbWUYAiABKAkSDwoHYWxpYXNlcxgDIAMoCRIT",
            "Cgtjb250cm9sX3VyaRgEIAEoCRJIChNhcnRpZmFjdF9kZWZpbml0aW9uGAUg",
            "ASgLMisudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3REZWZpbml0",
            "aW9uEj8KDGRlcGVuZGVuY2llcxgGIAMoCzIpLnRheG9ub215Lm1vZGVsLmFy",
            "dGlmYWN0LlN5bWJvbERlcGVuZGVuY3kSSgoZaW5jb21wYXRpYmxlX3dpdGhf",
            "c3ltYm9scxgHIAMoCzInLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlm",
            "YWN0U3ltYm9sEkcKFWluZmx1ZW5jZWRfYnlfc3ltYm9scxgIIAMoCzIoLnRh",
            "eG9ub215Lm1vZGVsLmFydGlmYWN0LlN5bWJvbEluZmx1ZW5jZRI9Cg5hcnRp",
            "ZmFjdF9maWxlcxgJIAMoCzIlLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFy",
            "dGlmYWN0RmlsZRIrCgRtYXBzGAogASgLMh0udGF4b25vbXkubW9kZWwuYXJ0",
            "aWZhY3QuTWFwcyKOAQoOQXJ0aWZhY3RTeW1ib2wSMwoEdHlwZRgBIAEoDjIl",
            "LnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0VHlwZRIVCg12aXN1",
            "YWxfc3ltYm9sGAIgASgJEhYKDnRvb2xpbmdfc3ltYm9sGAMgASgJEhgKEGFy",
            "dGlmYWN0X3ZlcnNpb24YBCABKAkiXwoPU3ltYm9sSW5mbHVlbmNlEhMKC2Rl",
            "c2NyaXB0aW9uGAEgASgJEjcKBnN5bWJvbBgCIAEoCzInLnRheG9ub215Lm1v",
            "ZGVsLmFydGlmYWN0LkFydGlmYWN0U3ltYm9sImAKEFN5bWJvbERlcGVuZGVu",
            "Y3kSEwoLZGVzY3JpcHRpb24YASABKAkSNwoGc3ltYm9sGAIgASgLMicudGF4",
            "b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RTeW1ib2wi0AEKEkFydGlm",
            "YWN0RGVmaW5pdGlvbhIcChRidXNpbmVzc19kZXNjcmlwdGlvbhgBIAEoCRIY",
            "ChBidXNpbmVzc19leGFtcGxlGAIgASgJEjsKCWFuYWxvZ2llcxgDIAMoCzIo",
            "LnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0QW5hbG9neRIQCghj",
            "b21tZW50cxgEIAEoCRIzCghhcnRpZmFjdBgFIAEoCzIhLnRheG9ub215Lm1v",
            "ZGVsLmFydGlmYWN0LkFydGlmYWN0In4KD0FydGlmYWN0QW5hbG9neRIMCgRu",
            "YW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEkgKE2FydGlmYWN0X2Rl",
            "ZmluaXRpb24YAyABKAsyKy50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5BcnRp",
            "ZmFjdERlZmluaXRpb24ipAEKDEFydGlmYWN0RmlsZRI5Cgdjb250ZW50GAEg",
            "ASgOMigudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RDb250ZW50",
            "EhEKCWZpbGVfbmFtZRgCIAEoCRIRCglmaWxlX2RhdGEYAyABKAwSMwoIYXJ0",
            "aWZhY3QYBCABKAsyIS50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFj",
            "dCKHAgoETWFwcxI+Cg9jb2RlX3JlZmVyZW5jZXMYASADKAsyJS50YXhvbm9t",
            "eS5tb2RlbC5hcnRpZmFjdC5NYXBSZWZlcmVuY2USSAoZaW1wbGVtZW50YXRp",
            "b25fcmVmZXJlbmNlcxgCIAMoCzIlLnRheG9ub215Lm1vZGVsLmFydGlmYWN0",
            "Lk1hcFJlZmVyZW5jZRJACglyZXNvdXJjZXMYAyADKAsyLS50YXhvbm9teS5t",
            "b2RlbC5hcnRpZmFjdC5NYXBSZXNvdXJjZVJlZmVyZW5jZRIzCghhcnRpZmFj",
            "dBgEIAEoCzIhLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0ItgB",
            "CgxNYXBSZWZlcmVuY2USOgoMbWFwcGluZ190eXBlGAEgASgOMiQudGF4b25v",
            "bXkubW9kZWwuYXJ0aWZhY3QuTWFwcGluZ1R5cGUSDAoEbmFtZRgCIAEoCRI5",
            "CghwbGF0Zm9ybRgDIAEoDjInLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LlRh",
            "cmdldFBsYXRmb3JtEhYKDnJlZmVyZW5jZV9wYXRoGAQgASgJEisKBG1hcHMY",
            "BSABKAsyHS50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5NYXBzIrkBChRNYXBS",
            "ZXNvdXJjZVJlZmVyZW5jZRI6CgxtYXBwaW5nX3R5cGUYASABKA4yJC50YXhv",
            "bm9teS5tb2RlbC5hcnRpZmFjdC5NYXBwaW5nVHlwZRIMCgRuYW1lGAIgASgJ",
            "EhMKC2Rlc2NyaXB0aW9uGAMgASgJEhUKDXJlc291cmNlX3BhdGgYBCABKAkS",
            "KwoEbWFwcxgFIAEoCzIdLnRheG9ub215Lm1vZGVsLmFydGlmYWN0Lk1hcHMi",
            "cQoSTmV3QXJ0aWZhY3RSZXF1ZXN0EjMKBHR5cGUYASABKA4yJS50YXhvbm9t",
            "eS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFjdFR5cGUSJgoIYXJ0aWZhY3QYAiAB",
            "KAsyFC5nb29nbGUucHJvdG9idWYuQW55In4KE05ld0FydGlmYWN0UmVzcG9u",
            "c2USMwoEdHlwZRgBIAEoDjIlLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFy",
            "dGlmYWN0VHlwZRIyChRhcnRpZmFjdF90eXBlX29iamVjdBgCIAEoCzIULmdv",
            "b2dsZS5wcm90b2J1Zi5BbnkigAEKFVVwZGF0ZUFydGlmYWN0UmVxdWVzdBIz",
            "CgR0eXBlGAEgASgOMiUudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZh",
            "Y3RUeXBlEjIKFGFydGlmYWN0X3R5cGVfb2JqZWN0GAIgASgLMhQuZ29vZ2xl",
            "LnByb3RvYnVmLkFueSKSAQoWVXBkYXRlQXJ0aWZhY3RSZXNwb25zZRIzCgR0",
            "eXBlGAEgASgOMiUudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RU",
            "eXBlEg8KB3VwZGF0ZWQYAiABKAgSMgoUYXJ0aWZhY3RfdHlwZV9vYmplY3QY",
            "AyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55IlkKFURlbGV0ZUFydGlmYWN0",
            "UmVxdWVzdBJACg9hcnRpZmFjdF9zeW1ib2wYASABKAsyJy50YXhvbm9teS5t",
            "b2RlbC5hcnRpZmFjdC5BcnRpZmFjdFN5bWJvbCIpChZEZWxldGVBcnRpZmFj",
            "dFJlc3BvbnNlEg8KB2RlbGV0ZWQYASABKAgi5QEKDkZvcm11bGFHcmFtbWFy",
            "EjoKDHNpbmdsZV90b2tlbhgBIAEoCzIkLnRheG9ub215Lm1vZGVsLmFydGlm",
            "YWN0LlNpbmdsZVRva2VuEjsKBmh5YnJpZBgCIAEoCzIrLnRheG9ub215Lm1v",
            "ZGVsLmFydGlmYWN0Lkh5YnJpZFRva2VuRm9ybXVsYRJaChNoeWJyaWRfd2l0",
            "aF9oeWJyaWRzGAMgASgLMj0udGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuSHli",
            "cmlkVG9rZW5XaXRoSHlicmlkQ2hpbGRyZW5Gb3JtdWxhIrQBChJIeWJyaWRU",
            "b2tlbkZvcm11bGESNAoGcGFyZW50GAEgASgLMiQudGF4b25vbXkubW9kZWwu",
            "YXJ0aWZhY3QuU2luZ2xlVG9rZW4SFgoOY2hpbGRyZW5fc3RhcnQYAiABKAkS",
            "OgoMY2hpbGRfdG9rZW5zGAMgAygLMiQudGF4b25vbXkubW9kZWwuYXJ0aWZh",
            "Y3QuU2luZ2xlVG9rZW4SFAoMY2hpbGRyZW5fZW5kGAQgASgJIuIBCiRIeWJy",
            "aWRUb2tlbldpdGhIeWJyaWRDaGlsZHJlbkZvcm11bGESNAoGcGFyZW50GAEg",
            "ASgLMiQudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuU2luZ2xlVG9rZW4SHQoV",
            "aHlicmlkX2NoaWxkcmVuX3N0YXJ0GAIgASgJEkgKE2h5YnJpZF9jaGlsZF90",
            "b2tlbnMYAyADKAsyKy50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5IeWJyaWRU",
            "b2tlbkZvcm11bGESGwoTaHlicmlkX2NoaWxkcmVuX2VuZBgEIAEoCSK6AgoL",
            "U2luZ2xlVG9rZW4STAoVY2xhc3NpZmljYXRpb25fYnJhbmNoGAEgASgOMi0u",
            "dGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQ2xhc3NpZmljYXRpb25CcmFuY2gS",
            "EwoLZ3JvdXBfc3RhcnQYAiABKAkSNgoKYmFzZV90b2tlbhgDIAEoCzIiLnRh",
            "eG9ub215Lm1vZGVsLmFydGlmYWN0LlRva2VuQmFzZRI4CgliZWhhdmlvcnMY",
            "BCABKAsyJS50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5CZWhhdmlvckxpc3QS",
            "QwoNcHJvcGVydHlfc2V0cxgFIAMoCzIsLnRheG9ub215Lm1vZGVsLmFydGlm",
            "YWN0LlByb3BlcnR5U2V0TGlzdEl0ZW0SEQoJZ3JvdXBfZW5kGAYgASgJIk0K",
            "CVRva2VuQmFzZRJACg9hcnRpZmFjdF9zeW1ib2wYASABKAsyJy50YXhvbm9t",
            "eS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFjdFN5bWJvbCJ3CgxCZWhhdmlvckxp",
            "c3QSEgoKbGlzdF9zdGFydBgBIAEoCRJBChBiZWhhdmlvcl9zeW1ib2xzGAIg",
            "AygLMicudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RTeW1ib2wS",
            "EAoIbGlzdF9lbmQYAyABKAkicAoTUHJvcGVydHlTZXRMaXN0SXRlbRISCgps",
            "aXN0X3N0YXJ0GAEgASgJEkUKFHByb3BlcnR5X3NldF9zeW1ib2xzGAIgASgL",
            "MicudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RTeW1ib2wiIgoP",
            "VGF4b25vbXlGb3JtdWxhEg8KB2Zvcm11bGEYASABKAkiLgoUQ29tbWl0VXBk",
            "YXRlc1JlcXVlc3QSFgoOY29tbWl0X21lc3NhZ2UYASABKAkiJwoVQ29tbWl0",
            "VXBkYXRlc1Jlc3BvbnNlEg4KBnJlc3VsdBgBIAEoCSISChBJc3N1ZVB1bGxS",
            "ZXF1ZXN0IiUKEUlzc3VlUHVsbFJlc3BvbnNlEhAKCHJlc3BvbnNlGAEgASgJ",
            "Ik0KFFNlcnZpY2VDb25maWd1cmF0aW9uEhEKCXJlYWRfb25seRgBIAEoCBIO",
            "CgZnaXRfaWQYAiABKAkSEgoKZ2l0X2JyYW5jaBgDIAEoCSJ+CgxRdWVyeU9w",
            "dGlvbnMSPAoNYXJ0aWZhY3RfdHlwZRgBIAEoDjIlLnRheG9ub215Lm1vZGVs",
            "LmFydGlmYWN0LkFydGlmYWN0VHlwZRIXCg9tYXhfaXRlbV9yZXR1cm4YAiAB",
            "KAUSFwoPbGFzdF9pdGVtX2luZGV4GAMgASgFItQBCgtRdWVyeVJlc3VsdBI8",
            "Cg1hcnRpZmFjdF90eXBlGAEgASgOMiUudGF4b25vbXkubW9kZWwuYXJ0aWZh",
            "Y3QuQXJ0aWZhY3RUeXBlEhgKEGZpcnN0X2l0ZW1faW5kZXgYAiABKAUSFwoP",
            "bGFzdF9pdGVtX2luZGV4GAMgASgFEiEKGXRvdGFsX2l0ZW1zX2luX2NvbGxl",
            "Y3Rpb24YBCABKAUSMQoTYXJ0aWZhY3RfY29sbGVjdGlvbhgFIAEoCzIULmdv",
            "b2dsZS5wcm90b2J1Zi5BbnkquwEKCVRva2VuVHlwZRIMCghGVU5HSUJMRRAA",
            "EhAKDE5PTl9GVU5HSUJMRRABEhgKFEhZQlJJRF9GVU5HSUJMRV9ST09UEAIS",
            "HAoYSFlCUklEX05PTl9GVU5HSUJMRV9ST09UEAMSKAokSFlCUklEX0ZVTkdJ",
            "QkxFX1JPT1RfSFlCUklEX0NISUxEUkVOEAQSLAooSFlCUklEX05PTl9GVU5H",
            "SUJMRV9ST09UX0hZQlJJRF9DSElMRFJFThAFKm8KFENsYXNzaWZpY2F0aW9u",
            "QnJhbmNoEhcKE0ZSQUNUSU9OQUxfRlVOR0lCTEUQABISCg5XSE9MRV9GVU5H",
            "SUJMRRABEhsKF0ZSQUNUSU9OQUxfTk9OX0ZVTkdJQkxFEAISDQoJU0lOR0xF",
            "VE9OEAMqYAoMQXJ0aWZhY3RUeXBlEggKBEJBU0UQABIMCghCRUhBVklPUhAB",
            "EhIKDkJFSEFWSU9SX0dST1VQEAISEAoMUFJPUEVSVFlfU0VUEAMSEgoOVE9L",
            "RU5fVEVNUExBVEUQBCpCCg9BcnRpZmFjdENvbnRlbnQSDgoKREVGSU5JVElP",
            "ThAAEgsKB0NPTlRST0wQARIHCgNVTUwQAhIJCgVPVEhFUhADKkAKC01hcHBp",
            "bmdUeXBlEg8KC1NPVVJDRV9DT0RFEAASEgoOSU1QTEVNRU5UQVRJT04QARIM",
            "CghSRVNPVVJDRRACKnYKDlRhcmdldFBsYXRmb3JtEhUKEUVUSEVSRVVNX1NP",
            "TElESVRZEAASEAoMQ0hBSU5DT0RFX0dPEAESEgoOQ0hBSU5DT0RFX0pBVkEQ",
            "AhISCg5DSEFJTkNPREVfTk9ERRADEgkKBUNPUkRBEAQSCAoEREFNTBAFQkkK",
            "I29yZy50dGkudHRmLnRheG9ub215Lm1vZGVsLmFydGlmYWN0UAGqAh9UVEku",
            "VFRGLlRheG9ub215Lk1vZGVsLkFydGlmYWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TTI.TTF.Taxonomy.Model.Artifact.TokenType), typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch), typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType), typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactContent), typeof(global::TTI.TTF.Taxonomy.Model.Artifact.MappingType), typeof(global::TTI.TTF.Taxonomy.Model.Artifact.TargetPlatform), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.Artifact), global::TTI.TTF.Taxonomy.Model.Artifact.Artifact.Parser, new[]{ "ArtifactSymbol", "Name", "Aliases", "ControlUri", "ArtifactDefinition", "Dependencies", "IncompatibleWithSymbols", "InfluencedBySymbols", "ArtifactFiles", "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol), global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol.Parser, new[]{ "Type", "VisualSymbol", "ToolingSymbol", "ArtifactVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence), global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence.Parser, new[]{ "Description", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency), global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency.Parser, new[]{ "Description", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition), global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition.Parser, new[]{ "BusinessDescription", "BusinessExample", "Analogies", "Comments", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy), global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy.Parser, new[]{ "Name", "Description", "ArtifactDefinition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile), global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile.Parser, new[]{ "Content", "FileName", "FileData", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.Maps), global::TTI.TTF.Taxonomy.Model.Artifact.Maps.Parser, new[]{ "CodeReferences", "ImplementationReferences", "Resources", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.MapReference), global::TTI.TTF.Taxonomy.Model.Artifact.MapReference.Parser, new[]{ "MappingType", "Name", "Platform", "ReferencePath", "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference), global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference.Parser, new[]{ "MappingType", "Name", "Description", "ResourcePath", "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest), global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactRequest.Parser, new[]{ "Type", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse), global::TTI.TTF.Taxonomy.Model.Artifact.NewArtifactResponse.Parser, new[]{ "Type", "ArtifactTypeObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest), global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactRequest.Parser, new[]{ "Type", "ArtifactTypeObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse), global::TTI.TTF.Taxonomy.Model.Artifact.UpdateArtifactResponse.Parser, new[]{ "Type", "Updated", "ArtifactTypeObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest), global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactRequest.Parser, new[]{ "ArtifactSymbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse), global::TTI.TTF.Taxonomy.Model.Artifact.DeleteArtifactResponse.Parser, new[]{ "Deleted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.FormulaGrammar), global::TTI.TTF.Taxonomy.Model.Artifact.FormulaGrammar.Parser, new[]{ "SingleToken", "Hybrid", "HybridWithHybrids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula), global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula.Parser, new[]{ "Parent", "ChildrenStart", "ChildTokens", "ChildrenEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenWithHybridChildrenFormula), global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenWithHybridChildrenFormula.Parser, new[]{ "Parent", "HybridChildrenStart", "HybridChildTokens", "HybridChildrenEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken), global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken.Parser, new[]{ "ClassificationBranch", "GroupStart", "BaseToken", "Behaviors", "PropertySets", "GroupEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.TokenBase), global::TTI.TTF.Taxonomy.Model.Artifact.TokenBase.Parser, new[]{ "ArtifactSymbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.BehaviorList), global::TTI.TTF.Taxonomy.Model.Artifact.BehaviorList.Parser, new[]{ "ListStart", "BehaviorSymbols", "ListEnd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem), global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem.Parser, new[]{ "ListStart", "PropertySetSymbols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.TaxonomyFormula), global::TTI.TTF.Taxonomy.Model.Artifact.TaxonomyFormula.Parser, new[]{ "Formula" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest), global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesRequest.Parser, new[]{ "CommitMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse), global::TTI.TTF.Taxonomy.Model.Artifact.CommitUpdatesResponse.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest), global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse), global::TTI.TTF.Taxonomy.Model.Artifact.IssuePullResponse.Parser, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration), global::TTI.TTF.Taxonomy.Model.Artifact.ServiceConfiguration.Parser, new[]{ "ReadOnly", "GitId", "GitBranch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions), global::TTI.TTF.Taxonomy.Model.Artifact.QueryOptions.Parser, new[]{ "ArtifactType", "MaxItemReturn", "LastItemIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult), global::TTI.TTF.Taxonomy.Model.Artifact.QueryResult.Parser, new[]{ "ArtifactType", "FirstItemIndex", "LastItemIndex", "TotalItemsInCollection", "ArtifactCollection" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TokenType {
    [pbr::OriginalName("FUNGIBLE")] Fungible = 0,
    [pbr::OriginalName("NON_FUNGIBLE")] NonFungible = 1,
    [pbr::OriginalName("HYBRID_FUNGIBLE_ROOT")] HybridFungibleRoot = 2,
    [pbr::OriginalName("HYBRID_NON_FUNGIBLE_ROOT")] HybridNonFungibleRoot = 3,
    [pbr::OriginalName("HYBRID_FUNGIBLE_ROOT_HYBRID_CHILDREN")] HybridFungibleRootHybridChildren = 4,
    [pbr::OriginalName("HYBRID_NON_FUNGIBLE_ROOT_HYBRID_CHILDREN")] HybridNonFungibleRootHybridChildren = 5,
  }

  /// <summary>
  ///classification for Templates, parent and any child tokens. 
  /// </summary>
  public enum ClassificationBranch {
    /// <summary>
    ///tF{d}
    /// </summary>
    [pbr::OriginalName("FRACTIONAL_FUNGIBLE")] FractionalFungible = 0,
    /// <summary>
    ///tF{~d}
    /// </summary>
    [pbr::OriginalName("WHOLE_FUNGIBLE")] WholeFungible = 1,
    /// <summary>
    ///tN{d}
    /// </summary>
    [pbr::OriginalName("FRACTIONAL_NON_FUNGIBLE")] FractionalNonFungible = 2,
    /// <summary>
    ///tN{~s}
    /// </summary>
    [pbr::OriginalName("SINGLETON")] Singleton = 3,
  }

  public enum ArtifactType {
    /// <summary>
    ///from core.Type
    /// </summary>
    [pbr::OriginalName("BASE")] Base = 0,
    [pbr::OriginalName("BEHAVIOR")] Behavior = 1,
    [pbr::OriginalName("BEHAVIOR_GROUP")] BehaviorGroup = 2,
    [pbr::OriginalName("PROPERTY_SET")] PropertySet = 3,
    /// <summary>
    ///technically, this does not have an artifact data property.
    /// </summary>
    [pbr::OriginalName("TOKEN_TEMPLATE")] TokenTemplate = 4,
  }

  public enum ArtifactContent {
    /// <summary>
    ///html, MD, etc.
    /// </summary>
    [pbr::OriginalName("DEFINITION")] Definition = 0,
    /// <summary>
    ///proto
    /// </summary>
    [pbr::OriginalName("CONTROL")] Control = 1,
    /// <summary>
    ///md or other host UML
    /// </summary>
    [pbr::OriginalName("UML")] Uml = 2,
    /// <summary>
    ///any
    /// </summary>
    [pbr::OriginalName("OTHER")] Other = 3,
  }

  public enum MappingType {
    [pbr::OriginalName("SOURCE_CODE")] SourceCode = 0,
    [pbr::OriginalName("IMPLEMENTATION")] Implementation = 1,
    /// <summary>
    ///to an external informational source like a regulatory framework or related issue
    /// </summary>
    [pbr::OriginalName("RESOURCE")] Resource = 2,
  }

  public enum TargetPlatform {
    [pbr::OriginalName("ETHEREUM_SOLIDITY")] EthereumSolidity = 0,
    [pbr::OriginalName("CHAINCODE_GO")] ChaincodeGo = 1,
    [pbr::OriginalName("CHAINCODE_JAVA")] ChaincodeJava = 2,
    [pbr::OriginalName("CHAINCODE_NODE")] ChaincodeNode = 3,
    [pbr::OriginalName("CORDA")] Corda = 4,
    [pbr::OriginalName("DAML")] Daml = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///contains artifact metadata structure
  /// </summary>
  public sealed partial class Artifact : pb::IMessage<Artifact> {
    private static readonly pb::MessageParser<Artifact> _parser = new pb::MessageParser<Artifact>(() => new Artifact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artifact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact(Artifact other) : this() {
      artifactSymbol_ = other.artifactSymbol_ != null ? other.artifactSymbol_.Clone() : null;
      name_ = other.name_;
      aliases_ = other.aliases_.Clone();
      controlUri_ = other.controlUri_;
      artifactDefinition_ = other.artifactDefinition_ != null ? other.artifactDefinition_.Clone() : null;
      dependencies_ = other.dependencies_.Clone();
      incompatibleWithSymbols_ = other.incompatibleWithSymbols_.Clone();
      influencedBySymbols_ = other.influencedBySymbols_.Clone();
      artifactFiles_ = other.artifactFiles_.Clone();
      maps_ = other.maps_ != null ? other.maps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact Clone() {
      return new Artifact(this);
    }

    /// <summary>Field number for the "artifact_symbol" field.</summary>
    public const int ArtifactSymbolFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol artifactSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol ArtifactSymbol {
      get { return artifactSymbol_; }
      set {
        artifactSymbol_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aliases" field.</summary>
    public const int AliasesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_aliases_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> aliases_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Aliases {
      get { return aliases_; }
    }

    /// <summary>Field number for the "control_uri" field.</summary>
    public const int ControlUriFieldNumber = 4;
    private string controlUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ControlUri {
      get { return controlUri_; }
      set {
        controlUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_definition" field.</summary>
    public const int ArtifactDefinitionFieldNumber = 5;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition artifactDefinition_;
    /// <summary>
    ///Base, Behavior or Behavior group type indicated by ArtifactType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition ArtifactDefinition {
      get { return artifactDefinition_; }
      set {
        artifactDefinition_ = value;
      }
    }

    /// <summary>Field number for the "dependencies" field.</summary>
    public const int DependenciesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency> _repeated_dependencies_codec
        = pb::FieldCodec.ForMessage(50, global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency> dependencies_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency>();
    /// <summary>
    ///Typically used for a behavior that has a dependency on a property-set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolDependency> Dependencies {
      get { return dependencies_; }
    }

    /// <summary>Field number for the "incompatible_with_symbols" field.</summary>
    public const int IncompatibleWithSymbolsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> _repeated_incompatibleWithSymbols_codec
        = pb::FieldCodec.ForMessage(58, global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> incompatibleWithSymbols_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol>();
    /// <summary>
    ///for behaviors that have opposites, or if another behavior or property-set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> IncompatibleWithSymbols {
      get { return incompatibleWithSymbols_; }
    }

    /// <summary>Field number for the "influenced_by_symbols" field.</summary>
    public const int InfluencedBySymbolsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence> _repeated_influencedBySymbols_codec
        = pb::FieldCodec.ForMessage(66, global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence> influencedBySymbols_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SymbolInfluence> InfluencedBySymbols {
      get { return influencedBySymbols_; }
    }

    /// <summary>Field number for the "artifact_files" field.</summary>
    public const int ArtifactFilesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile> _repeated_artifactFiles_codec
        = pb::FieldCodec.ForMessage(74, global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile> artifactFiles_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile>();
    /// <summary>
    ///loop through the files and read them in as bytes to produce a complete artifact object model instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactFile> ArtifactFiles {
      get { return artifactFiles_; }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 10;
    private global::TTI.TTF.Taxonomy.Model.Artifact.Maps maps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.Maps Maps {
      get { return maps_; }
      set {
        maps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artifact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artifact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArtifactSymbol, other.ArtifactSymbol)) return false;
      if (Name != other.Name) return false;
      if(!aliases_.Equals(other.aliases_)) return false;
      if (ControlUri != other.ControlUri) return false;
      if (!object.Equals(ArtifactDefinition, other.ArtifactDefinition)) return false;
      if(!dependencies_.Equals(other.dependencies_)) return false;
      if(!incompatibleWithSymbols_.Equals(other.incompatibleWithSymbols_)) return false;
      if(!influencedBySymbols_.Equals(other.influencedBySymbols_)) return false;
      if(!artifactFiles_.Equals(other.artifactFiles_)) return false;
      if (!object.Equals(Maps, other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (artifactSymbol_ != null) hash ^= ArtifactSymbol.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= aliases_.GetHashCode();
      if (ControlUri.Length != 0) hash ^= ControlUri.GetHashCode();
      if (artifactDefinition_ != null) hash ^= ArtifactDefinition.GetHashCode();
      hash ^= dependencies_.GetHashCode();
      hash ^= incompatibleWithSymbols_.GetHashCode();
      hash ^= influencedBySymbols_.GetHashCode();
      hash ^= artifactFiles_.GetHashCode();
      if (maps_ != null) hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (artifactSymbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArtifactSymbol);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      aliases_.WriteTo(output, _repeated_aliases_codec);
      if (ControlUri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ControlUri);
      }
      if (artifactDefinition_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ArtifactDefinition);
      }
      dependencies_.WriteTo(output, _repeated_dependencies_codec);
      incompatibleWithSymbols_.WriteTo(output, _repeated_incompatibleWithSymbols_codec);
      influencedBySymbols_.WriteTo(output, _repeated_influencedBySymbols_codec);
      artifactFiles_.WriteTo(output, _repeated_artifactFiles_codec);
      if (maps_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Maps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (artifactSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactSymbol);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += aliases_.CalculateSize(_repeated_aliases_codec);
      if (ControlUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ControlUri);
      }
      if (artifactDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactDefinition);
      }
      size += dependencies_.CalculateSize(_repeated_dependencies_codec);
      size += incompatibleWithSymbols_.CalculateSize(_repeated_incompatibleWithSymbols_codec);
      size += influencedBySymbols_.CalculateSize(_repeated_influencedBySymbols_codec);
      size += artifactFiles_.CalculateSize(_repeated_artifactFiles_codec);
      if (maps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artifact other) {
      if (other == null) {
        return;
      }
      if (other.artifactSymbol_ != null) {
        if (artifactSymbol_ == null) {
          ArtifactSymbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
        }
        ArtifactSymbol.MergeFrom(other.ArtifactSymbol);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      aliases_.Add(other.aliases_);
      if (other.ControlUri.Length != 0) {
        ControlUri = other.ControlUri;
      }
      if (other.artifactDefinition_ != null) {
        if (artifactDefinition_ == null) {
          ArtifactDefinition = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition();
        }
        ArtifactDefinition.MergeFrom(other.ArtifactDefinition);
      }
      dependencies_.Add(other.dependencies_);
      incompatibleWithSymbols_.Add(other.incompatibleWithSymbols_);
      influencedBySymbols_.Add(other.influencedBySymbols_);
      artifactFiles_.Add(other.artifactFiles_);
      if (other.maps_ != null) {
        if (maps_ == null) {
          Maps = new global::TTI.TTF.Taxonomy.Model.Artifact.Maps();
        }
        Maps.MergeFrom(other.Maps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (artifactSymbol_ == null) {
              ArtifactSymbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(ArtifactSymbol);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
            break;
          }
          case 34: {
            ControlUri = input.ReadString();
            break;
          }
          case 42: {
            if (artifactDefinition_ == null) {
              ArtifactDefinition = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition();
            }
            input.ReadMessage(ArtifactDefinition);
            break;
          }
          case 50: {
            dependencies_.AddEntriesFrom(input, _repeated_dependencies_codec);
            break;
          }
          case 58: {
            incompatibleWithSymbols_.AddEntriesFrom(input, _repeated_incompatibleWithSymbols_codec);
            break;
          }
          case 66: {
            influencedBySymbols_.AddEntriesFrom(input, _repeated_influencedBySymbols_codec);
            break;
          }
          case 74: {
            artifactFiles_.AddEntriesFrom(input, _repeated_artifactFiles_codec);
            break;
          }
          case 82: {
            if (maps_ == null) {
              Maps = new global::TTI.TTF.Taxonomy.Model.Artifact.Maps();
            }
            input.ReadMessage(Maps);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactSymbol : pb::IMessage<ArtifactSymbol> {
    private static readonly pb::MessageParser<ArtifactSymbol> _parser = new pb::MessageParser<ArtifactSymbol>(() => new ArtifactSymbol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactSymbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactSymbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactSymbol(ArtifactSymbol other) : this() {
      type_ = other.type_;
      visualSymbol_ = other.visualSymbol_;
      toolingSymbol_ = other.toolingSymbol_;
      artifactVersion_ = other.artifactVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactSymbol Clone() {
      return new ArtifactSymbol(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "visual_symbol" field.</summary>
    public const int VisualSymbolFieldNumber = 2;
    private string visualSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisualSymbol {
      get { return visualSymbol_; }
      set {
        visualSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tooling_symbol" field.</summary>
    public const int ToolingSymbolFieldNumber = 3;
    private string toolingSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToolingSymbol {
      get { return toolingSymbol_; }
      set {
        toolingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_version" field.</summary>
    public const int ArtifactVersionFieldNumber = 4;
    private string artifactVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ArtifactVersion {
      get { return artifactVersion_; }
      set {
        artifactVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactSymbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactSymbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (VisualSymbol != other.VisualSymbol) return false;
      if (ToolingSymbol != other.ToolingSymbol) return false;
      if (ArtifactVersion != other.ArtifactVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (VisualSymbol.Length != 0) hash ^= VisualSymbol.GetHashCode();
      if (ToolingSymbol.Length != 0) hash ^= ToolingSymbol.GetHashCode();
      if (ArtifactVersion.Length != 0) hash ^= ArtifactVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (VisualSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VisualSymbol);
      }
      if (ToolingSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ToolingSymbol);
      }
      if (ArtifactVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ArtifactVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (VisualSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisualSymbol);
      }
      if (ToolingSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToolingSymbol);
      }
      if (ArtifactVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ArtifactVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactSymbol other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.VisualSymbol.Length != 0) {
        VisualSymbol = other.VisualSymbol;
      }
      if (other.ToolingSymbol.Length != 0) {
        ToolingSymbol = other.ToolingSymbol;
      }
      if (other.ArtifactVersion.Length != 0) {
        ArtifactVersion = other.ArtifactVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            VisualSymbol = input.ReadString();
            break;
          }
          case 26: {
            ToolingSymbol = input.ReadString();
            break;
          }
          case 34: {
            ArtifactVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolInfluence : pb::IMessage<SymbolInfluence> {
    private static readonly pb::MessageParser<SymbolInfluence> _parser = new pb::MessageParser<SymbolInfluence>(() => new SymbolInfluence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolInfluence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfluence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfluence(SymbolInfluence other) : this() {
      description_ = other.description_;
      symbol_ = other.symbol_ != null ? other.symbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfluence Clone() {
      return new SymbolInfluence(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    ///describe how the symbol influences this artifact, like non-sub-dividable or delegable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolInfluence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolInfluence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(Symbol, other.Symbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (symbol_ != null) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (symbol_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (symbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolInfluence other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.symbol_ != null) {
        if (symbol_ == null) {
          Symbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
        }
        Symbol.MergeFrom(other.Symbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            if (symbol_ == null) {
              Symbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(Symbol);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolDependency : pb::IMessage<SymbolDependency> {
    private static readonly pb::MessageParser<SymbolDependency> _parser = new pb::MessageParser<SymbolDependency>(() => new SymbolDependency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolDependency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolDependency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolDependency(SymbolDependency other) : this() {
      description_ = other.description_;
      symbol_ = other.symbol_ != null ? other.symbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolDependency Clone() {
      return new SymbolDependency(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    ///describe how the symbol influences this artifact, like non-sub-dividable or delegable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolDependency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolDependency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(Symbol, other.Symbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (symbol_ != null) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (symbol_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (symbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolDependency other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.symbol_ != null) {
        if (symbol_ == null) {
          Symbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
        }
        Symbol.MergeFrom(other.Symbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            if (symbol_ == null) {
              Symbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(Symbol);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactDefinition : pb::IMessage<ArtifactDefinition> {
    private static readonly pb::MessageParser<ArtifactDefinition> _parser = new pb::MessageParser<ArtifactDefinition>(() => new ArtifactDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactDefinition(ArtifactDefinition other) : this() {
      businessDescription_ = other.businessDescription_;
      businessExample_ = other.businessExample_;
      analogies_ = other.analogies_.Clone();
      comments_ = other.comments_;
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactDefinition Clone() {
      return new ArtifactDefinition(this);
    }

    /// <summary>Field number for the "business_description" field.</summary>
    public const int BusinessDescriptionFieldNumber = 1;
    private string businessDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessDescription {
      get { return businessDescription_; }
      set {
        businessDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business_example" field.</summary>
    public const int BusinessExampleFieldNumber = 2;
    private string businessExample_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessExample {
      get { return businessExample_; }
      set {
        businessExample_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "analogies" field.</summary>
    public const int AnalogiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy> _repeated_analogies_codec
        = pb::FieldCodec.ForMessage(26, global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy> analogies_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactAnalogy> Analogies {
      get { return analogies_; }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 4;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 5;
    private global::TTI.TTF.Taxonomy.Model.Artifact.Artifact artifact_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.Artifact Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BusinessDescription != other.BusinessDescription) return false;
      if (BusinessExample != other.BusinessExample) return false;
      if(!analogies_.Equals(other.analogies_)) return false;
      if (Comments != other.Comments) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BusinessDescription.Length != 0) hash ^= BusinessDescription.GetHashCode();
      if (BusinessExample.Length != 0) hash ^= BusinessExample.GetHashCode();
      hash ^= analogies_.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BusinessDescription.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BusinessDescription);
      }
      if (BusinessExample.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BusinessExample);
      }
      analogies_.WriteTo(output, _repeated_analogies_codec);
      if (Comments.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Comments);
      }
      if (artifact_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BusinessDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessDescription);
      }
      if (BusinessExample.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessExample);
      }
      size += analogies_.CalculateSize(_repeated_analogies_codec);
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactDefinition other) {
      if (other == null) {
        return;
      }
      if (other.BusinessDescription.Length != 0) {
        BusinessDescription = other.BusinessDescription;
      }
      if (other.BusinessExample.Length != 0) {
        BusinessExample = other.BusinessExample;
      }
      analogies_.Add(other.analogies_);
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          Artifact = new global::TTI.TTF.Taxonomy.Model.Artifact.Artifact();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BusinessDescription = input.ReadString();
            break;
          }
          case 18: {
            BusinessExample = input.ReadString();
            break;
          }
          case 26: {
            analogies_.AddEntriesFrom(input, _repeated_analogies_codec);
            break;
          }
          case 34: {
            Comments = input.ReadString();
            break;
          }
          case 42: {
            if (artifact_ == null) {
              Artifact = new global::TTI.TTF.Taxonomy.Model.Artifact.Artifact();
            }
            input.ReadMessage(Artifact);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactAnalogy : pb::IMessage<ArtifactAnalogy> {
    private static readonly pb::MessageParser<ArtifactAnalogy> _parser = new pb::MessageParser<ArtifactAnalogy>(() => new ArtifactAnalogy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactAnalogy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactAnalogy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactAnalogy(ArtifactAnalogy other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      artifactDefinition_ = other.artifactDefinition_ != null ? other.artifactDefinition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactAnalogy Clone() {
      return new ArtifactAnalogy(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_definition" field.</summary>
    public const int ArtifactDefinitionFieldNumber = 3;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition artifactDefinition_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition ArtifactDefinition {
      get { return artifactDefinition_; }
      set {
        artifactDefinition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactAnalogy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactAnalogy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(ArtifactDefinition, other.ArtifactDefinition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (artifactDefinition_ != null) hash ^= ArtifactDefinition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (artifactDefinition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ArtifactDefinition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (artifactDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactDefinition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactAnalogy other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.artifactDefinition_ != null) {
        if (artifactDefinition_ == null) {
          ArtifactDefinition = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition();
        }
        ArtifactDefinition.MergeFrom(other.ArtifactDefinition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (artifactDefinition_ == null) {
              ArtifactDefinition = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactDefinition();
            }
            input.ReadMessage(ArtifactDefinition);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactFile : pb::IMessage<ArtifactFile> {
    private static readonly pb::MessageParser<ArtifactFile> _parser = new pb::MessageParser<ArtifactFile>(() => new ArtifactFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactFile(ArtifactFile other) : this() {
      content_ = other.content_;
      fileName_ = other.fileName_;
      fileData_ = other.fileData_;
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactFile Clone() {
      return new ArtifactFile(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactContent content_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactContent Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_data" field.</summary>
    public const int FileDataFieldNumber = 3;
    private pb::ByteString fileData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FileData {
      get { return fileData_; }
      set {
        fileData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.Artifact.Artifact artifact_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.Artifact Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (FileName != other.FileName) return false;
      if (FileData != other.FileData) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content != 0) hash ^= Content.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileData.Length != 0) hash ^= FileData.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Content);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (FileData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(FileData);
      }
      if (artifact_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Content);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileData);
      }
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactFile other) {
      if (other == null) {
        return;
      }
      if (other.Content != 0) {
        Content = other.Content;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileData.Length != 0) {
        FileData = other.FileData;
      }
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          Artifact = new global::TTI.TTF.Taxonomy.Model.Artifact.Artifact();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Content = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactContent) input.ReadEnum();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            FileData = input.ReadBytes();
            break;
          }
          case 34: {
            if (artifact_ == null) {
              Artifact = new global::TTI.TTF.Taxonomy.Model.Artifact.Artifact();
            }
            input.ReadMessage(Artifact);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Maps : pb::IMessage<Maps> {
    private static readonly pb::MessageParser<Maps> _parser = new pb::MessageParser<Maps>(() => new Maps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Maps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maps(Maps other) : this() {
      codeReferences_ = other.codeReferences_.Clone();
      implementationReferences_ = other.implementationReferences_.Clone();
      resources_ = other.resources_.Clone();
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maps Clone() {
      return new Maps(this);
    }

    /// <summary>Field number for the "code_references" field.</summary>
    public const int CodeReferencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference> _repeated_codeReferences_codec
        = pb::FieldCodec.ForMessage(10, global::TTI.TTF.Taxonomy.Model.Artifact.MapReference.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference> codeReferences_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference> CodeReferences {
      get { return codeReferences_; }
    }

    /// <summary>Field number for the "implementation_references" field.</summary>
    public const int ImplementationReferencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference> _repeated_implementationReferences_codec
        = pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Artifact.MapReference.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference> implementationReferences_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapReference> ImplementationReferences {
      get { return implementationReferences_; }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(26, global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference> resources_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.MapResourceReference> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.Artifact.Artifact artifact_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.Artifact Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Maps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Maps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!codeReferences_.Equals(other.codeReferences_)) return false;
      if(!implementationReferences_.Equals(other.implementationReferences_)) return false;
      if(!resources_.Equals(other.resources_)) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= codeReferences_.GetHashCode();
      hash ^= implementationReferences_.GetHashCode();
      hash ^= resources_.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      codeReferences_.WriteTo(output, _repeated_codeReferences_codec);
      implementationReferences_.WriteTo(output, _repeated_implementationReferences_codec);
      resources_.WriteTo(output, _repeated_resources_codec);
      if (artifact_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += codeReferences_.CalculateSize(_repeated_codeReferences_codec);
      size += implementationReferences_.CalculateSize(_repeated_implementationReferences_codec);
      size += resources_.CalculateSize(_repeated_resources_codec);
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Maps other) {
      if (other == null) {
        return;
      }
      codeReferences_.Add(other.codeReferences_);
      implementationReferences_.Add(other.implementationReferences_);
      resources_.Add(other.resources_);
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          Artifact = new global::TTI.TTF.Taxonomy.Model.Artifact.Artifact();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            codeReferences_.AddEntriesFrom(input, _repeated_codeReferences_codec);
            break;
          }
          case 18: {
            implementationReferences_.AddEntriesFrom(input, _repeated_implementationReferences_codec);
            break;
          }
          case 26: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 34: {
            if (artifact_ == null) {
              Artifact = new global::TTI.TTF.Taxonomy.Model.Artifact.Artifact();
            }
            input.ReadMessage(Artifact);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapReference : pb::IMessage<MapReference> {
    private static readonly pb::MessageParser<MapReference> _parser = new pb::MessageParser<MapReference>(() => new MapReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReference(MapReference other) : this() {
      mappingType_ = other.mappingType_;
      name_ = other.name_;
      platform_ = other.platform_;
      referencePath_ = other.referencePath_;
      maps_ = other.maps_ != null ? other.maps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReference Clone() {
      return new MapReference(this);
    }

    /// <summary>Field number for the "mapping_type" field.</summary>
    public const int MappingTypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.MappingType mappingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.MappingType MappingType {
      get { return mappingType_; }
      set {
        mappingType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private global::TTI.TTF.Taxonomy.Model.Artifact.TargetPlatform platform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.TargetPlatform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "reference_path" field.</summary>
    public const int ReferencePathFieldNumber = 4;
    private string referencePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferencePath {
      get { return referencePath_; }
      set {
        referencePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 5;
    private global::TTI.TTF.Taxonomy.Model.Artifact.Maps maps_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.Maps Maps {
      get { return maps_; }
      set {
        maps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MappingType != other.MappingType) return false;
      if (Name != other.Name) return false;
      if (Platform != other.Platform) return false;
      if (ReferencePath != other.ReferencePath) return false;
      if (!object.Equals(Maps, other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MappingType != 0) hash ^= MappingType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (ReferencePath.Length != 0) hash ^= ReferencePath.GetHashCode();
      if (maps_ != null) hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MappingType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MappingType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Platform != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Platform);
      }
      if (ReferencePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReferencePath);
      }
      if (maps_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Maps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MappingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MappingType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (ReferencePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferencePath);
      }
      if (maps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapReference other) {
      if (other == null) {
        return;
      }
      if (other.MappingType != 0) {
        MappingType = other.MappingType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      if (other.ReferencePath.Length != 0) {
        ReferencePath = other.ReferencePath;
      }
      if (other.maps_ != null) {
        if (maps_ == null) {
          Maps = new global::TTI.TTF.Taxonomy.Model.Artifact.Maps();
        }
        Maps.MergeFrom(other.Maps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MappingType = (global::TTI.TTF.Taxonomy.Model.Artifact.MappingType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Platform = (global::TTI.TTF.Taxonomy.Model.Artifact.TargetPlatform) input.ReadEnum();
            break;
          }
          case 34: {
            ReferencePath = input.ReadString();
            break;
          }
          case 42: {
            if (maps_ == null) {
              Maps = new global::TTI.TTF.Taxonomy.Model.Artifact.Maps();
            }
            input.ReadMessage(Maps);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapResourceReference : pb::IMessage<MapResourceReference> {
    private static readonly pb::MessageParser<MapResourceReference> _parser = new pb::MessageParser<MapResourceReference>(() => new MapResourceReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapResourceReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapResourceReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapResourceReference(MapResourceReference other) : this() {
      mappingType_ = other.mappingType_;
      name_ = other.name_;
      description_ = other.description_;
      resourcePath_ = other.resourcePath_;
      maps_ = other.maps_ != null ? other.maps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapResourceReference Clone() {
      return new MapResourceReference(this);
    }

    /// <summary>Field number for the "mapping_type" field.</summary>
    public const int MappingTypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.MappingType mappingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.MappingType MappingType {
      get { return mappingType_; }
      set {
        mappingType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_path" field.</summary>
    public const int ResourcePathFieldNumber = 4;
    private string resourcePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePath {
      get { return resourcePath_; }
      set {
        resourcePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 5;
    private global::TTI.TTF.Taxonomy.Model.Artifact.Maps maps_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.Maps Maps {
      get { return maps_; }
      set {
        maps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapResourceReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapResourceReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MappingType != other.MappingType) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ResourcePath != other.ResourcePath) return false;
      if (!object.Equals(Maps, other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MappingType != 0) hash ^= MappingType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ResourcePath.Length != 0) hash ^= ResourcePath.GetHashCode();
      if (maps_ != null) hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MappingType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MappingType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ResourcePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourcePath);
      }
      if (maps_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Maps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MappingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MappingType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ResourcePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePath);
      }
      if (maps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapResourceReference other) {
      if (other == null) {
        return;
      }
      if (other.MappingType != 0) {
        MappingType = other.MappingType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ResourcePath.Length != 0) {
        ResourcePath = other.ResourcePath;
      }
      if (other.maps_ != null) {
        if (maps_ == null) {
          Maps = new global::TTI.TTF.Taxonomy.Model.Artifact.Maps();
        }
        Maps.MergeFrom(other.Maps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MappingType = (global::TTI.TTF.Taxonomy.Model.Artifact.MappingType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ResourcePath = input.ReadString();
            break;
          }
          case 42: {
            if (maps_ == null) {
              Maps = new global::TTI.TTF.Taxonomy.Model.Artifact.Maps();
            }
            input.ReadMessage(Maps);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewArtifactRequest : pb::IMessage<NewArtifactRequest> {
    private static readonly pb::MessageParser<NewArtifactRequest> _parser = new pb::MessageParser<NewArtifactRequest>(() => new NewArtifactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewArtifactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactRequest(NewArtifactRequest other) : this() {
      type_ = other.type_;
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactRequest Clone() {
      return new NewArtifactRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any artifact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewArtifactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewArtifactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (artifact_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewArtifactRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          Artifact = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            if (artifact_ == null) {
              Artifact = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Artifact);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewArtifactResponse : pb::IMessage<NewArtifactResponse> {
    private static readonly pb::MessageParser<NewArtifactResponse> _parser = new pb::MessageParser<NewArtifactResponse>(() => new NewArtifactResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewArtifactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactResponse(NewArtifactResponse other) : this() {
      type_ = other.type_;
      artifactTypeObject_ = other.artifactTypeObject_ != null ? other.artifactTypeObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactResponse Clone() {
      return new NewArtifactResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "artifact_type_object" field.</summary>
    public const int ArtifactTypeObjectFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any artifactTypeObject_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactTypeObject {
      get { return artifactTypeObject_; }
      set {
        artifactTypeObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewArtifactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewArtifactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ArtifactTypeObject, other.ArtifactTypeObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (artifactTypeObject_ != null) hash ^= ArtifactTypeObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (artifactTypeObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (artifactTypeObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewArtifactResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.artifactTypeObject_ != null) {
        if (artifactTypeObject_ == null) {
          ArtifactTypeObject = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactTypeObject.MergeFrom(other.ArtifactTypeObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            if (artifactTypeObject_ == null) {
              ArtifactTypeObject = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(ArtifactTypeObject);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateArtifactRequest : pb::IMessage<UpdateArtifactRequest> {
    private static readonly pb::MessageParser<UpdateArtifactRequest> _parser = new pb::MessageParser<UpdateArtifactRequest>(() => new UpdateArtifactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateArtifactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactRequest(UpdateArtifactRequest other) : this() {
      type_ = other.type_;
      artifactTypeObject_ = other.artifactTypeObject_ != null ? other.artifactTypeObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactRequest Clone() {
      return new UpdateArtifactRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "artifact_type_object" field.</summary>
    public const int ArtifactTypeObjectFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any artifactTypeObject_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactTypeObject {
      get { return artifactTypeObject_; }
      set {
        artifactTypeObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateArtifactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateArtifactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ArtifactTypeObject, other.ArtifactTypeObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (artifactTypeObject_ != null) hash ^= ArtifactTypeObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (artifactTypeObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (artifactTypeObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateArtifactRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.artifactTypeObject_ != null) {
        if (artifactTypeObject_ == null) {
          ArtifactTypeObject = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactTypeObject.MergeFrom(other.ArtifactTypeObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            if (artifactTypeObject_ == null) {
              ArtifactTypeObject = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(ArtifactTypeObject);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateArtifactResponse : pb::IMessage<UpdateArtifactResponse> {
    private static readonly pb::MessageParser<UpdateArtifactResponse> _parser = new pb::MessageParser<UpdateArtifactResponse>(() => new UpdateArtifactResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateArtifactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactResponse(UpdateArtifactResponse other) : this() {
      type_ = other.type_;
      updated_ = other.updated_;
      artifactTypeObject_ = other.artifactTypeObject_ != null ? other.artifactTypeObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactResponse Clone() {
      return new UpdateArtifactResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 2;
    private bool updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "artifact_type_object" field.</summary>
    public const int ArtifactTypeObjectFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any artifactTypeObject_;
    /// <summary>
    ///updated type, deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactTypeObject {
      get { return artifactTypeObject_; }
      set {
        artifactTypeObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateArtifactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateArtifactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Updated != other.Updated) return false;
      if (!object.Equals(ArtifactTypeObject, other.ArtifactTypeObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Updated != false) hash ^= Updated.GetHashCode();
      if (artifactTypeObject_ != null) hash ^= ArtifactTypeObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Updated != false) {
        output.WriteRawTag(16);
        output.WriteBool(Updated);
      }
      if (artifactTypeObject_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Updated != false) {
        size += 1 + 1;
      }
      if (artifactTypeObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateArtifactResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Updated != false) {
        Updated = other.Updated;
      }
      if (other.artifactTypeObject_ != null) {
        if (artifactTypeObject_ == null) {
          ArtifactTypeObject = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactTypeObject.MergeFrom(other.ArtifactTypeObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 16: {
            Updated = input.ReadBool();
            break;
          }
          case 26: {
            if (artifactTypeObject_ == null) {
              ArtifactTypeObject = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(ArtifactTypeObject);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteArtifactRequest : pb::IMessage<DeleteArtifactRequest> {
    private static readonly pb::MessageParser<DeleteArtifactRequest> _parser = new pb::MessageParser<DeleteArtifactRequest>(() => new DeleteArtifactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteArtifactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactRequest(DeleteArtifactRequest other) : this() {
      artifactSymbol_ = other.artifactSymbol_ != null ? other.artifactSymbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactRequest Clone() {
      return new DeleteArtifactRequest(this);
    }

    /// <summary>Field number for the "artifact_symbol" field.</summary>
    public const int ArtifactSymbolFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol artifactSymbol_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol ArtifactSymbol {
      get { return artifactSymbol_; }
      set {
        artifactSymbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteArtifactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteArtifactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArtifactSymbol, other.ArtifactSymbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (artifactSymbol_ != null) hash ^= ArtifactSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (artifactSymbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArtifactSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (artifactSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteArtifactRequest other) {
      if (other == null) {
        return;
      }
      if (other.artifactSymbol_ != null) {
        if (artifactSymbol_ == null) {
          ArtifactSymbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
        }
        ArtifactSymbol.MergeFrom(other.ArtifactSymbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (artifactSymbol_ == null) {
              ArtifactSymbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(ArtifactSymbol);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteArtifactResponse : pb::IMessage<DeleteArtifactResponse> {
    private static readonly pb::MessageParser<DeleteArtifactResponse> _parser = new pb::MessageParser<DeleteArtifactResponse>(() => new DeleteArtifactResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteArtifactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactResponse(DeleteArtifactResponse other) : this() {
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactResponse Clone() {
      return new DeleteArtifactResponse(this);
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 1;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteArtifactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteArtifactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Deleted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Deleted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteArtifactResponse other) {
      if (other == null) {
        return;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FormulaGrammar : pb::IMessage<FormulaGrammar> {
    private static readonly pb::MessageParser<FormulaGrammar> _parser = new pb::MessageParser<FormulaGrammar>(() => new FormulaGrammar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FormulaGrammar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormulaGrammar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormulaGrammar(FormulaGrammar other) : this() {
      singleToken_ = other.singleToken_ != null ? other.singleToken_.Clone() : null;
      hybrid_ = other.hybrid_ != null ? other.hybrid_.Clone() : null;
      hybridWithHybrids_ = other.hybridWithHybrids_ != null ? other.hybridWithHybrids_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FormulaGrammar Clone() {
      return new FormulaGrammar(this);
    }

    /// <summary>Field number for the "single_token" field.</summary>
    public const int SingleTokenFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken singleToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken SingleToken {
      get { return singleToken_; }
      set {
        singleToken_ = value;
      }
    }

    /// <summary>Field number for the "hybrid" field.</summary>
    public const int HybridFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula hybrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula Hybrid {
      get { return hybrid_; }
      set {
        hybrid_ = value;
      }
    }

    /// <summary>Field number for the "hybrid_with_hybrids" field.</summary>
    public const int HybridWithHybridsFieldNumber = 3;
    private global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenWithHybridChildrenFormula hybridWithHybrids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenWithHybridChildrenFormula HybridWithHybrids {
      get { return hybridWithHybrids_; }
      set {
        hybridWithHybrids_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FormulaGrammar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FormulaGrammar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleToken, other.SingleToken)) return false;
      if (!object.Equals(Hybrid, other.Hybrid)) return false;
      if (!object.Equals(HybridWithHybrids, other.HybridWithHybrids)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (singleToken_ != null) hash ^= SingleToken.GetHashCode();
      if (hybrid_ != null) hash ^= Hybrid.GetHashCode();
      if (hybridWithHybrids_ != null) hash ^= HybridWithHybrids.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (singleToken_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleToken);
      }
      if (hybrid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hybrid);
      }
      if (hybridWithHybrids_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HybridWithHybrids);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (singleToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleToken);
      }
      if (hybrid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hybrid);
      }
      if (hybridWithHybrids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HybridWithHybrids);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FormulaGrammar other) {
      if (other == null) {
        return;
      }
      if (other.singleToken_ != null) {
        if (singleToken_ == null) {
          SingleToken = new global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken();
        }
        SingleToken.MergeFrom(other.SingleToken);
      }
      if (other.hybrid_ != null) {
        if (hybrid_ == null) {
          Hybrid = new global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula();
        }
        Hybrid.MergeFrom(other.Hybrid);
      }
      if (other.hybridWithHybrids_ != null) {
        if (hybridWithHybrids_ == null) {
          HybridWithHybrids = new global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenWithHybridChildrenFormula();
        }
        HybridWithHybrids.MergeFrom(other.HybridWithHybrids);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (singleToken_ == null) {
              SingleToken = new global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken();
            }
            input.ReadMessage(SingleToken);
            break;
          }
          case 18: {
            if (hybrid_ == null) {
              Hybrid = new global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula();
            }
            input.ReadMessage(Hybrid);
            break;
          }
          case 26: {
            if (hybridWithHybrids_ == null) {
              HybridWithHybrids = new global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenWithHybridChildrenFormula();
            }
            input.ReadMessage(HybridWithHybrids);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HybridTokenFormula : pb::IMessage<HybridTokenFormula> {
    private static readonly pb::MessageParser<HybridTokenFormula> _parser = new pb::MessageParser<HybridTokenFormula>(() => new HybridTokenFormula());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HybridTokenFormula> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridTokenFormula() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridTokenFormula(HybridTokenFormula other) : this() {
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      childrenStart_ = other.childrenStart_;
      childTokens_ = other.childTokens_.Clone();
      childrenEnd_ = other.childrenEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridTokenFormula Clone() {
      return new HybridTokenFormula(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "children_start" field.</summary>
    public const int ChildrenStartFieldNumber = 2;
    private string childrenStart_ = "";
    /// <summary>
    /// "("
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChildrenStart {
      get { return childrenStart_; }
      set {
        childrenStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_tokens" field.</summary>
    public const int ChildTokensFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken> _repeated_childTokens_codec
        = pb::FieldCodec.ForMessage(26, global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken> childTokens_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken> ChildTokens {
      get { return childTokens_; }
    }

    /// <summary>Field number for the "children_end" field.</summary>
    public const int ChildrenEndFieldNumber = 4;
    private string childrenEnd_ = "";
    /// <summary>
    /// ")"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChildrenEnd {
      get { return childrenEnd_; }
      set {
        childrenEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HybridTokenFormula);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HybridTokenFormula other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Parent, other.Parent)) return false;
      if (ChildrenStart != other.ChildrenStart) return false;
      if(!childTokens_.Equals(other.childTokens_)) return false;
      if (ChildrenEnd != other.ChildrenEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (ChildrenStart.Length != 0) hash ^= ChildrenStart.GetHashCode();
      hash ^= childTokens_.GetHashCode();
      if (ChildrenEnd.Length != 0) hash ^= ChildrenEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Parent);
      }
      if (ChildrenStart.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChildrenStart);
      }
      childTokens_.WriteTo(output, _repeated_childTokens_codec);
      if (ChildrenEnd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ChildrenEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (ChildrenStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildrenStart);
      }
      size += childTokens_.CalculateSize(_repeated_childTokens_codec);
      if (ChildrenEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildrenEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HybridTokenFormula other) {
      if (other == null) {
        return;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken();
        }
        Parent.MergeFrom(other.Parent);
      }
      if (other.ChildrenStart.Length != 0) {
        ChildrenStart = other.ChildrenStart;
      }
      childTokens_.Add(other.childTokens_);
      if (other.ChildrenEnd.Length != 0) {
        ChildrenEnd = other.ChildrenEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parent_ == null) {
              Parent = new global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken();
            }
            input.ReadMessage(Parent);
            break;
          }
          case 18: {
            ChildrenStart = input.ReadString();
            break;
          }
          case 26: {
            childTokens_.AddEntriesFrom(input, _repeated_childTokens_codec);
            break;
          }
          case 34: {
            ChildrenEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HybridTokenWithHybridChildrenFormula : pb::IMessage<HybridTokenWithHybridChildrenFormula> {
    private static readonly pb::MessageParser<HybridTokenWithHybridChildrenFormula> _parser = new pb::MessageParser<HybridTokenWithHybridChildrenFormula>(() => new HybridTokenWithHybridChildrenFormula());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HybridTokenWithHybridChildrenFormula> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridTokenWithHybridChildrenFormula() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridTokenWithHybridChildrenFormula(HybridTokenWithHybridChildrenFormula other) : this() {
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      hybridChildrenStart_ = other.hybridChildrenStart_;
      hybridChildTokens_ = other.hybridChildTokens_.Clone();
      hybridChildrenEnd_ = other.hybridChildrenEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridTokenWithHybridChildrenFormula Clone() {
      return new HybridTokenWithHybridChildrenFormula(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "hybrid_children_start" field.</summary>
    public const int HybridChildrenStartFieldNumber = 2;
    private string hybridChildrenStart_ = "";
    /// <summary>
    /// "("
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HybridChildrenStart {
      get { return hybridChildrenStart_; }
      set {
        hybridChildrenStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hybrid_child_tokens" field.</summary>
    public const int HybridChildTokensFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula> _repeated_hybridChildTokens_codec
        = pb::FieldCodec.ForMessage(26, global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula> hybridChildTokens_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.HybridTokenFormula> HybridChildTokens {
      get { return hybridChildTokens_; }
    }

    /// <summary>Field number for the "hybrid_children_end" field.</summary>
    public const int HybridChildrenEndFieldNumber = 4;
    private string hybridChildrenEnd_ = "";
    /// <summary>
    /// ")"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HybridChildrenEnd {
      get { return hybridChildrenEnd_; }
      set {
        hybridChildrenEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HybridTokenWithHybridChildrenFormula);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HybridTokenWithHybridChildrenFormula other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Parent, other.Parent)) return false;
      if (HybridChildrenStart != other.HybridChildrenStart) return false;
      if(!hybridChildTokens_.Equals(other.hybridChildTokens_)) return false;
      if (HybridChildrenEnd != other.HybridChildrenEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (HybridChildrenStart.Length != 0) hash ^= HybridChildrenStart.GetHashCode();
      hash ^= hybridChildTokens_.GetHashCode();
      if (HybridChildrenEnd.Length != 0) hash ^= HybridChildrenEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Parent);
      }
      if (HybridChildrenStart.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HybridChildrenStart);
      }
      hybridChildTokens_.WriteTo(output, _repeated_hybridChildTokens_codec);
      if (HybridChildrenEnd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HybridChildrenEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (HybridChildrenStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HybridChildrenStart);
      }
      size += hybridChildTokens_.CalculateSize(_repeated_hybridChildTokens_codec);
      if (HybridChildrenEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HybridChildrenEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HybridTokenWithHybridChildrenFormula other) {
      if (other == null) {
        return;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken();
        }
        Parent.MergeFrom(other.Parent);
      }
      if (other.HybridChildrenStart.Length != 0) {
        HybridChildrenStart = other.HybridChildrenStart;
      }
      hybridChildTokens_.Add(other.hybridChildTokens_);
      if (other.HybridChildrenEnd.Length != 0) {
        HybridChildrenEnd = other.HybridChildrenEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parent_ == null) {
              Parent = new global::TTI.TTF.Taxonomy.Model.Artifact.SingleToken();
            }
            input.ReadMessage(Parent);
            break;
          }
          case 18: {
            HybridChildrenStart = input.ReadString();
            break;
          }
          case 26: {
            hybridChildTokens_.AddEntriesFrom(input, _repeated_hybridChildTokens_codec);
            break;
          }
          case 34: {
            HybridChildrenEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///outermost grouping container for the formula for a whole template either a parent or hybrid child.
  /// </summary>
  public sealed partial class SingleToken : pb::IMessage<SingleToken> {
    private static readonly pb::MessageParser<SingleToken> _parser = new pb::MessageParser<SingleToken>(() => new SingleToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleToken(SingleToken other) : this() {
      classificationBranch_ = other.classificationBranch_;
      groupStart_ = other.groupStart_;
      baseToken_ = other.baseToken_ != null ? other.baseToken_.Clone() : null;
      behaviors_ = other.behaviors_ != null ? other.behaviors_.Clone() : null;
      propertySets_ = other.propertySets_.Clone();
      groupEnd_ = other.groupEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleToken Clone() {
      return new SingleToken(this);
    }

    /// <summary>Field number for the "classification_branch" field.</summary>
    public const int ClassificationBranchFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch classificationBranch_ = 0;
    /// <summary>
    ///the TOM uses this as the first input for building and validating the Template Formula. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch ClassificationBranch {
      get { return classificationBranch_; }
      set {
        classificationBranch_ = value;
      }
    }

    /// <summary>Field number for the "group_start" field.</summary>
    public const int GroupStartFieldNumber = 2;
    private string groupStart_ = "";
    /// <summary>
    /// "["
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupStart {
      get { return groupStart_; }
      set {
        groupStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_token" field.</summary>
    public const int BaseTokenFieldNumber = 3;
    private global::TTI.TTF.Taxonomy.Model.Artifact.TokenBase baseToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.TokenBase BaseToken {
      get { return baseToken_; }
      set {
        baseToken_ = value;
      }
    }

    /// <summary>Field number for the "behaviors" field.</summary>
    public const int BehaviorsFieldNumber = 4;
    private global::TTI.TTF.Taxonomy.Model.Artifact.BehaviorList behaviors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.BehaviorList Behaviors {
      get { return behaviors_; }
      set {
        behaviors_ = value;
      }
    }

    /// <summary>Field number for the "property_sets" field.</summary>
    public const int PropertySetsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem> _repeated_propertySets_codec
        = pb::FieldCodec.ForMessage(42, global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem> propertySets_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.PropertySetListItem> PropertySets {
      get { return propertySets_; }
    }

    /// <summary>Field number for the "group_end" field.</summary>
    public const int GroupEndFieldNumber = 6;
    private string groupEnd_ = "";
    /// <summary>
    /// "]"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupEnd {
      get { return groupEnd_; }
      set {
        groupEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassificationBranch != other.ClassificationBranch) return false;
      if (GroupStart != other.GroupStart) return false;
      if (!object.Equals(BaseToken, other.BaseToken)) return false;
      if (!object.Equals(Behaviors, other.Behaviors)) return false;
      if(!propertySets_.Equals(other.propertySets_)) return false;
      if (GroupEnd != other.GroupEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassificationBranch != 0) hash ^= ClassificationBranch.GetHashCode();
      if (GroupStart.Length != 0) hash ^= GroupStart.GetHashCode();
      if (baseToken_ != null) hash ^= BaseToken.GetHashCode();
      if (behaviors_ != null) hash ^= Behaviors.GetHashCode();
      hash ^= propertySets_.GetHashCode();
      if (GroupEnd.Length != 0) hash ^= GroupEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClassificationBranch != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ClassificationBranch);
      }
      if (GroupStart.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupStart);
      }
      if (baseToken_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BaseToken);
      }
      if (behaviors_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Behaviors);
      }
      propertySets_.WriteTo(output, _repeated_propertySets_codec);
      if (GroupEnd.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GroupEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClassificationBranch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClassificationBranch);
      }
      if (GroupStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupStart);
      }
      if (baseToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseToken);
      }
      if (behaviors_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Behaviors);
      }
      size += propertySets_.CalculateSize(_repeated_propertySets_codec);
      if (GroupEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleToken other) {
      if (other == null) {
        return;
      }
      if (other.ClassificationBranch != 0) {
        ClassificationBranch = other.ClassificationBranch;
      }
      if (other.GroupStart.Length != 0) {
        GroupStart = other.GroupStart;
      }
      if (other.baseToken_ != null) {
        if (baseToken_ == null) {
          BaseToken = new global::TTI.TTF.Taxonomy.Model.Artifact.TokenBase();
        }
        BaseToken.MergeFrom(other.BaseToken);
      }
      if (other.behaviors_ != null) {
        if (behaviors_ == null) {
          Behaviors = new global::TTI.TTF.Taxonomy.Model.Artifact.BehaviorList();
        }
        Behaviors.MergeFrom(other.Behaviors);
      }
      propertySets_.Add(other.propertySets_);
      if (other.GroupEnd.Length != 0) {
        GroupEnd = other.GroupEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClassificationBranch = (global::TTI.TTF.Taxonomy.Model.Artifact.ClassificationBranch) input.ReadEnum();
            break;
          }
          case 18: {
            GroupStart = input.ReadString();
            break;
          }
          case 26: {
            if (baseToken_ == null) {
              BaseToken = new global::TTI.TTF.Taxonomy.Model.Artifact.TokenBase();
            }
            input.ReadMessage(BaseToken);
            break;
          }
          case 34: {
            if (behaviors_ == null) {
              Behaviors = new global::TTI.TTF.Taxonomy.Model.Artifact.BehaviorList();
            }
            input.ReadMessage(Behaviors);
            break;
          }
          case 42: {
            propertySets_.AddEntriesFrom(input, _repeated_propertySets_codec);
            break;
          }
          case 50: {
            GroupEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenBase : pb::IMessage<TokenBase> {
    private static readonly pb::MessageParser<TokenBase> _parser = new pb::MessageParser<TokenBase>(() => new TokenBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBase(TokenBase other) : this() {
      artifactSymbol_ = other.artifactSymbol_ != null ? other.artifactSymbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBase Clone() {
      return new TokenBase(this);
    }

    /// <summary>Field number for the "artifact_symbol" field.</summary>
    public const int ArtifactSymbolFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol artifactSymbol_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol ArtifactSymbol {
      get { return artifactSymbol_; }
      set {
        artifactSymbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ArtifactSymbol, other.ArtifactSymbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (artifactSymbol_ != null) hash ^= ArtifactSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (artifactSymbol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ArtifactSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (artifactSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenBase other) {
      if (other == null) {
        return;
      }
      if (other.artifactSymbol_ != null) {
        if (artifactSymbol_ == null) {
          ArtifactSymbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
        }
        ArtifactSymbol.MergeFrom(other.ArtifactSymbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (artifactSymbol_ == null) {
              ArtifactSymbol = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(ArtifactSymbol);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BehaviorList : pb::IMessage<BehaviorList> {
    private static readonly pb::MessageParser<BehaviorList> _parser = new pb::MessageParser<BehaviorList>(() => new BehaviorList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BehaviorList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorList(BehaviorList other) : this() {
      listStart_ = other.listStart_;
      behaviorSymbols_ = other.behaviorSymbols_.Clone();
      listEnd_ = other.listEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BehaviorList Clone() {
      return new BehaviorList(this);
    }

    /// <summary>Field number for the "list_start" field.</summary>
    public const int ListStartFieldNumber = 1;
    private string listStart_ = "";
    /// <summary>
    /// "{"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListStart {
      get { return listStart_; }
      set {
        listStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "behavior_symbols" field.</summary>
    public const int BehaviorSymbolsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> _repeated_behaviorSymbols_codec
        = pb::FieldCodec.ForMessage(18, global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol.Parser);
    private readonly pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> behaviorSymbols_ = new pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol>();
    /// <summary>
    /// lowercase letters for individual behaviors, UPPERCASE for behaviorGroup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol> BehaviorSymbols {
      get { return behaviorSymbols_; }
    }

    /// <summary>Field number for the "list_end" field.</summary>
    public const int ListEndFieldNumber = 3;
    private string listEnd_ = "";
    /// <summary>
    /// "}"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListEnd {
      get { return listEnd_; }
      set {
        listEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BehaviorList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BehaviorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListStart != other.ListStart) return false;
      if(!behaviorSymbols_.Equals(other.behaviorSymbols_)) return false;
      if (ListEnd != other.ListEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListStart.Length != 0) hash ^= ListStart.GetHashCode();
      hash ^= behaviorSymbols_.GetHashCode();
      if (ListEnd.Length != 0) hash ^= ListEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListStart.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ListStart);
      }
      behaviorSymbols_.WriteTo(output, _repeated_behaviorSymbols_codec);
      if (ListEnd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ListEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListStart);
      }
      size += behaviorSymbols_.CalculateSize(_repeated_behaviorSymbols_codec);
      if (ListEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BehaviorList other) {
      if (other == null) {
        return;
      }
      if (other.ListStart.Length != 0) {
        ListStart = other.ListStart;
      }
      behaviorSymbols_.Add(other.behaviorSymbols_);
      if (other.ListEnd.Length != 0) {
        ListEnd = other.ListEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ListStart = input.ReadString();
            break;
          }
          case 18: {
            behaviorSymbols_.AddEntriesFrom(input, _repeated_behaviorSymbols_codec);
            break;
          }
          case 26: {
            ListEnd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PropertySetListItem : pb::IMessage<PropertySetListItem> {
    private static readonly pb::MessageParser<PropertySetListItem> _parser = new pb::MessageParser<PropertySetListItem>(() => new PropertySetListItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertySetListItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertySetListItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertySetListItem(PropertySetListItem other) : this() {
      listStart_ = other.listStart_;
      propertySetSymbols_ = other.propertySetSymbols_ != null ? other.propertySetSymbols_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertySetListItem Clone() {
      return new PropertySetListItem(this);
    }

    /// <summary>Field number for the "list_start" field.</summary>
    public const int ListStartFieldNumber = 1;
    private string listStart_ = "";
    /// <summary>
    /// "+"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListStart {
      get { return listStart_; }
      set {
        listStart_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "property_set_symbols" field.</summary>
    public const int PropertySetSymbolsFieldNumber = 2;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol propertySetSymbols_;
    /// <summary>
    /// starts with ph followed by Camel case name or symbol.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol PropertySetSymbols {
      get { return propertySetSymbols_; }
      set {
        propertySetSymbols_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertySetListItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertySetListItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListStart != other.ListStart) return false;
      if (!object.Equals(PropertySetSymbols, other.PropertySetSymbols)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListStart.Length != 0) hash ^= ListStart.GetHashCode();
      if (propertySetSymbols_ != null) hash ^= PropertySetSymbols.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListStart.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ListStart);
      }
      if (propertySetSymbols_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PropertySetSymbols);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListStart.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListStart);
      }
      if (propertySetSymbols_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertySetSymbols);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertySetListItem other) {
      if (other == null) {
        return;
      }
      if (other.ListStart.Length != 0) {
        ListStart = other.ListStart;
      }
      if (other.propertySetSymbols_ != null) {
        if (propertySetSymbols_ == null) {
          PropertySetSymbols = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
        }
        PropertySetSymbols.MergeFrom(other.PropertySetSymbols);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ListStart = input.ReadString();
            break;
          }
          case 18: {
            if (propertySetSymbols_ == null) {
              PropertySetSymbols = new global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(PropertySetSymbols);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaxonomyFormula : pb::IMessage<TaxonomyFormula> {
    private static readonly pb::MessageParser<TaxonomyFormula> _parser = new pb::MessageParser<TaxonomyFormula>(() => new TaxonomyFormula());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxonomyFormula> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyFormula() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyFormula(TaxonomyFormula other) : this() {
      formula_ = other.formula_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyFormula Clone() {
      return new TaxonomyFormula(this);
    }

    /// <summary>Field number for the "formula" field.</summary>
    public const int FormulaFieldNumber = 1;
    private string formula_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Formula {
      get { return formula_; }
      set {
        formula_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxonomyFormula);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxonomyFormula other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Formula != other.Formula) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Formula.Length != 0) hash ^= Formula.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Formula.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Formula);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Formula.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Formula);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxonomyFormula other) {
      if (other == null) {
        return;
      }
      if (other.Formula.Length != 0) {
        Formula = other.Formula;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Formula = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommitUpdatesRequest : pb::IMessage<CommitUpdatesRequest> {
    private static readonly pb::MessageParser<CommitUpdatesRequest> _parser = new pb::MessageParser<CommitUpdatesRequest>(() => new CommitUpdatesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitUpdatesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitUpdatesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitUpdatesRequest(CommitUpdatesRequest other) : this() {
      commitMessage_ = other.commitMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitUpdatesRequest Clone() {
      return new CommitUpdatesRequest(this);
    }

    /// <summary>Field number for the "commit_message" field.</summary>
    public const int CommitMessageFieldNumber = 1;
    private string commitMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommitMessage {
      get { return commitMessage_; }
      set {
        commitMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitUpdatesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitUpdatesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommitMessage != other.CommitMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommitMessage.Length != 0) hash ^= CommitMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommitMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CommitMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommitMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CommitMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitUpdatesRequest other) {
      if (other == null) {
        return;
      }
      if (other.CommitMessage.Length != 0) {
        CommitMessage = other.CommitMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CommitMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommitUpdatesResponse : pb::IMessage<CommitUpdatesResponse> {
    private static readonly pb::MessageParser<CommitUpdatesResponse> _parser = new pb::MessageParser<CommitUpdatesResponse>(() => new CommitUpdatesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitUpdatesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitUpdatesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitUpdatesResponse(CommitUpdatesResponse other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitUpdatesResponse Clone() {
      return new CommitUpdatesResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitUpdatesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitUpdatesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitUpdatesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IssuePullRequest : pb::IMessage<IssuePullRequest> {
    private static readonly pb::MessageParser<IssuePullRequest> _parser = new pb::MessageParser<IssuePullRequest>(() => new IssuePullRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssuePullRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssuePullRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssuePullRequest(IssuePullRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssuePullRequest Clone() {
      return new IssuePullRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssuePullRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssuePullRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssuePullRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class IssuePullResponse : pb::IMessage<IssuePullResponse> {
    private static readonly pb::MessageParser<IssuePullResponse> _parser = new pb::MessageParser<IssuePullResponse>(() => new IssuePullResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssuePullResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssuePullResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssuePullResponse(IssuePullResponse other) : this() {
      response_ = other.response_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssuePullResponse Clone() {
      return new IssuePullResponse(this);
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 1;
    private string response_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssuePullResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssuePullResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Response != other.Response) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Response.Length != 0) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Response.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssuePullResponse other) {
      if (other == null) {
        return;
      }
      if (other.Response.Length != 0) {
        Response = other.Response;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Response = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServiceConfiguration : pb::IMessage<ServiceConfiguration> {
    private static readonly pb::MessageParser<ServiceConfiguration> _parser = new pb::MessageParser<ServiceConfiguration>(() => new ServiceConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceConfiguration(ServiceConfiguration other) : this() {
      readOnly_ = other.readOnly_;
      gitId_ = other.gitId_;
      gitBranch_ = other.gitBranch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceConfiguration Clone() {
      return new ServiceConfiguration(this);
    }

    /// <summary>Field number for the "read_only" field.</summary>
    public const int ReadOnlyFieldNumber = 1;
    private bool readOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadOnly {
      get { return readOnly_; }
      set {
        readOnly_ = value;
      }
    }

    /// <summary>Field number for the "git_id" field.</summary>
    public const int GitIdFieldNumber = 2;
    private string gitId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitId {
      get { return gitId_; }
      set {
        gitId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "git_branch" field.</summary>
    public const int GitBranchFieldNumber = 3;
    private string gitBranch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitBranch {
      get { return gitBranch_; }
      set {
        gitBranch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadOnly != other.ReadOnly) return false;
      if (GitId != other.GitId) return false;
      if (GitBranch != other.GitBranch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReadOnly != false) hash ^= ReadOnly.GetHashCode();
      if (GitId.Length != 0) hash ^= GitId.GetHashCode();
      if (GitBranch.Length != 0) hash ^= GitBranch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReadOnly);
      }
      if (GitId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GitId);
      }
      if (GitBranch.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GitBranch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadOnly != false) {
        size += 1 + 1;
      }
      if (GitId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitId);
      }
      if (GitBranch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitBranch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.ReadOnly != false) {
        ReadOnly = other.ReadOnly;
      }
      if (other.GitId.Length != 0) {
        GitId = other.GitId;
      }
      if (other.GitBranch.Length != 0) {
        GitBranch = other.GitBranch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReadOnly = input.ReadBool();
            break;
          }
          case 18: {
            GitId = input.ReadString();
            break;
          }
          case 26: {
            GitBranch = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryOptions : pb::IMessage<QueryOptions> {
    private static readonly pb::MessageParser<QueryOptions> _parser = new pb::MessageParser<QueryOptions>(() => new QueryOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOptions(QueryOptions other) : this() {
      artifactType_ = other.artifactType_;
      maxItemReturn_ = other.maxItemReturn_;
      lastItemIndex_ = other.lastItemIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOptions Clone() {
      return new QueryOptions(this);
    }

    /// <summary>Field number for the "artifact_type" field.</summary>
    public const int ArtifactTypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType artifactType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType ArtifactType {
      get { return artifactType_; }
      set {
        artifactType_ = value;
      }
    }

    /// <summary>Field number for the "max_item_return" field.</summary>
    public const int MaxItemReturnFieldNumber = 2;
    private int maxItemReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxItemReturn {
      get { return maxItemReturn_; }
      set {
        maxItemReturn_ = value;
      }
    }

    /// <summary>Field number for the "last_item_index" field.</summary>
    public const int LastItemIndexFieldNumber = 3;
    private int lastItemIndex_;
    /// <summary>
    ///set to the QuertResult.LastItemIndex from the previous QueryResult. Manually override from QueryResult FirstItemIndex + count in results array
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastItemIndex {
      get { return lastItemIndex_; }
      set {
        lastItemIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArtifactType != other.ArtifactType) return false;
      if (MaxItemReturn != other.MaxItemReturn) return false;
      if (LastItemIndex != other.LastItemIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArtifactType != 0) hash ^= ArtifactType.GetHashCode();
      if (MaxItemReturn != 0) hash ^= MaxItemReturn.GetHashCode();
      if (LastItemIndex != 0) hash ^= LastItemIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArtifactType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ArtifactType);
      }
      if (MaxItemReturn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxItemReturn);
      }
      if (LastItemIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastItemIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArtifactType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ArtifactType);
      }
      if (MaxItemReturn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxItemReturn);
      }
      if (LastItemIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastItemIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryOptions other) {
      if (other == null) {
        return;
      }
      if (other.ArtifactType != 0) {
        ArtifactType = other.ArtifactType;
      }
      if (other.MaxItemReturn != 0) {
        MaxItemReturn = other.MaxItemReturn;
      }
      if (other.LastItemIndex != 0) {
        LastItemIndex = other.LastItemIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArtifactType = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 16: {
            MaxItemReturn = input.ReadInt32();
            break;
          }
          case 24: {
            LastItemIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryResult : pb::IMessage<QueryResult> {
    private static readonly pb::MessageParser<QueryResult> _parser = new pb::MessageParser<QueryResult>(() => new QueryResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult(QueryResult other) : this() {
      artifactType_ = other.artifactType_;
      firstItemIndex_ = other.firstItemIndex_;
      lastItemIndex_ = other.lastItemIndex_;
      totalItemsInCollection_ = other.totalItemsInCollection_;
      artifactCollection_ = other.artifactCollection_ != null ? other.artifactCollection_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryResult Clone() {
      return new QueryResult(this);
    }

    /// <summary>Field number for the "artifact_type" field.</summary>
    public const int ArtifactTypeFieldNumber = 1;
    private global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType artifactType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType ArtifactType {
      get { return artifactType_; }
      set {
        artifactType_ = value;
      }
    }

    /// <summary>Field number for the "first_item_index" field.</summary>
    public const int FirstItemIndexFieldNumber = 2;
    private int firstItemIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstItemIndex {
      get { return firstItemIndex_; }
      set {
        firstItemIndex_ = value;
      }
    }

    /// <summary>Field number for the "last_item_index" field.</summary>
    public const int LastItemIndexFieldNumber = 3;
    private int lastItemIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastItemIndex {
      get { return lastItemIndex_; }
      set {
        lastItemIndex_ = value;
      }
    }

    /// <summary>Field number for the "total_items_in_collection" field.</summary>
    public const int TotalItemsInCollectionFieldNumber = 4;
    private int totalItemsInCollection_;
    /// <summary>
    ///total count in the collection if iterating through all the items on the service of the specified type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalItemsInCollection {
      get { return totalItemsInCollection_; }
      set {
        totalItemsInCollection_ = value;
      }
    }

    /// <summary>Field number for the "artifact_collection" field.</summary>
    public const int ArtifactCollectionFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Any artifactCollection_;
    /// <summary>
    ///deserialize to the collection object for the ArtifactType, i.e. Base will be a Bases, Behavior will be Behaviors, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactCollection {
      get { return artifactCollection_; }
      set {
        artifactCollection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArtifactType != other.ArtifactType) return false;
      if (FirstItemIndex != other.FirstItemIndex) return false;
      if (LastItemIndex != other.LastItemIndex) return false;
      if (TotalItemsInCollection != other.TotalItemsInCollection) return false;
      if (!object.Equals(ArtifactCollection, other.ArtifactCollection)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArtifactType != 0) hash ^= ArtifactType.GetHashCode();
      if (FirstItemIndex != 0) hash ^= FirstItemIndex.GetHashCode();
      if (LastItemIndex != 0) hash ^= LastItemIndex.GetHashCode();
      if (TotalItemsInCollection != 0) hash ^= TotalItemsInCollection.GetHashCode();
      if (artifactCollection_ != null) hash ^= ArtifactCollection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArtifactType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ArtifactType);
      }
      if (FirstItemIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FirstItemIndex);
      }
      if (LastItemIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastItemIndex);
      }
      if (TotalItemsInCollection != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalItemsInCollection);
      }
      if (artifactCollection_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ArtifactCollection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArtifactType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ArtifactType);
      }
      if (FirstItemIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstItemIndex);
      }
      if (LastItemIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastItemIndex);
      }
      if (TotalItemsInCollection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalItemsInCollection);
      }
      if (artifactCollection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactCollection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryResult other) {
      if (other == null) {
        return;
      }
      if (other.ArtifactType != 0) {
        ArtifactType = other.ArtifactType;
      }
      if (other.FirstItemIndex != 0) {
        FirstItemIndex = other.FirstItemIndex;
      }
      if (other.LastItemIndex != 0) {
        LastItemIndex = other.LastItemIndex;
      }
      if (other.TotalItemsInCollection != 0) {
        TotalItemsInCollection = other.TotalItemsInCollection;
      }
      if (other.artifactCollection_ != null) {
        if (artifactCollection_ == null) {
          ArtifactCollection = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactCollection.MergeFrom(other.ArtifactCollection);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ArtifactType = (global::TTI.TTF.Taxonomy.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 16: {
            FirstItemIndex = input.ReadInt32();
            break;
          }
          case 24: {
            LastItemIndex = input.ReadInt32();
            break;
          }
          case 32: {
            TotalItemsInCollection = input.ReadInt32();
            break;
          }
          case 42: {
            if (artifactCollection_ == null) {
              ArtifactCollection = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(ArtifactCollection);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
