// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: artifact.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TTF.Tokens.Model.Artifact {

  /// <summary>Holder for reflection information generated from artifact.proto</summary>
  public static partial class ArtifactReflection {

    #region Descriptor
    /// <summary>File descriptor for artifact.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArtifactReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5hcnRpZmFjdC5wcm90bxIXdGF4b25vbXkubW9kZWwuYXJ0aWZhY3QaGWdv",
            "b2dsZS9wcm90b2J1Zi9hbnkucHJvdG8igAQKCEFydGlmYWN0EjMKBHR5cGUY",
            "ASABKA4yJS50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFjdFR5cGUS",
            "DAoEbmFtZRgCIAEoCRIPCgdhbGlhc2VzGAMgAygJEkAKD2FydGlmYWN0X3N5",
            "bWJvbBgEIAEoCzInLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0",
            "U3ltYm9sEhMKC2NvbnRyb2xfdXJpGAUgASgJEkgKE2FydGlmYWN0X2RlZmlu",
            "aXRpb24YBiABKAsyKy50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFj",
            "dERlZmluaXRpb24SSgoZaW5jb21wYXRpYmxlX3dpdGhfc3ltYm9scxgHIAMo",
            "CzInLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0U3ltYm9sEkcK",
            "FWluZmx1ZW5jZWRfYnlfc3ltYm9scxgIIAMoCzIoLnRheG9ub215Lm1vZGVs",
            "LmFydGlmYWN0LlN5bWJvbEluZmx1ZW5jZRI9Cg5hcnRpZmFjdF9maWxlcxgJ",
            "IAMoCzIlLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0RmlsZRIr",
            "CgRtYXBzGAogASgLMh0udGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuTWFwcyI/",
            "Cg5BcnRpZmFjdFN5bWJvbBIVCg12aXN1YWxfc3ltYm9sGAQgASgJEhYKDnRv",
            "b2xpbmdfc3ltYm9sGAUgASgJIl8KD1N5bWJvbEluZmx1ZW5jZRITCgtkZXNj",
            "cmlwdGlvbhgBIAEoCRI3CgZzeW1ib2wYAiABKAsyJy50YXhvbm9teS5tb2Rl",
            "bC5hcnRpZmFjdC5BcnRpZmFjdFN5bWJvbCLQAQoSQXJ0aWZhY3REZWZpbml0",
            "aW9uEhwKFGJ1c2luZXNzX2Rlc2NyaXB0aW9uGAEgASgJEhgKEGJ1c2luZXNz",
            "X2V4YW1wbGUYAiABKAkSOwoJYW5hbG9naWVzGAMgAygLMigudGF4b25vbXku",
            "bW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RBbmFsb2d5EhAKCGNvbW1lbnRzGAQg",
            "ASgJEjMKCGFydGlmYWN0GAUgASgLMiEudGF4b25vbXkubW9kZWwuYXJ0aWZh",
            "Y3QuQXJ0aWZhY3QifgoPQXJ0aWZhY3RBbmFsb2d5EgwKBG5hbWUYASABKAkS",
            "EwoLZGVzY3JpcHRpb24YAiABKAkSSAoTYXJ0aWZhY3RfZGVmaW5pdGlvbhgD",
            "IAEoCzIrLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0RGVmaW5p",
            "dGlvbiKkAQoMQXJ0aWZhY3RGaWxlEjkKB2NvbnRlbnQYASABKA4yKC50YXhv",
            "bm9teS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFjdENvbnRlbnQSEQoJZmlsZV9u",
            "YW1lGAIgASgJEhEKCWZpbGVfZGF0YRgDIAEoDBIzCghhcnRpZmFjdBgEIAEo",
            "CzIhLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LkFydGlmYWN0IoMCCgRNYXBz",
            "Ej4KD2NvZGVfcmVmZXJlbmNlcxgBIAMoCzIlLnRheG9ub215Lm1vZGVsLmFy",
            "dGlmYWN0Lk1hcFJlZmVyZW5jZRJIChlpbXBsZW1lbnRhdGlvbl9yZWZlcmVu",
            "Y2VzGAIgAygLMiUudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuTWFwUmVmZXJl",
            "bmNlEjwKCXJlc291cmNlcxgDIAMoCzIpLnRheG9ub215Lm1vZGVsLmFydGlm",
            "YWN0Lk1hcFJlc291cmNlRW50cnkSMwoIYXJ0aWZhY3QYBCABKAsyIS50YXhv",
            "bm9teS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFjdCLYAQoMTWFwUmVmZXJlbmNl",
            "EjoKDG1hcHBpbmdfdHlwZRgBIAEoDjIkLnRheG9ub215Lm1vZGVsLmFydGlm",
            "YWN0Lk1hcHBpbmdUeXBlEgwKBG5hbWUYAiABKAkSOQoIcGxhdGZvcm0YAyAB",
            "KA4yJy50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5UYXJnZXRQbGF0Zm9ybRIW",
            "Cg5yZWZlcmVuY2VfcGF0aBgEIAEoCRIrCgRtYXBzGAUgASgLMh0udGF4b25v",
            "bXkubW9kZWwuYXJ0aWZhY3QuTWFwcyK1AQoQTWFwUmVzb3VyY2VFbnRyeRI6",
            "CgxtYXBwaW5nX3R5cGUYASABKA4yJC50YXhvbm9teS5tb2RlbC5hcnRpZmFj",
            "dC5NYXBwaW5nVHlwZRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMg",
            "ASgJEhUKDXJlc291cmNlX3BhdGgYBCABKAkSKwoEbWFwcxgFIAEoCzIdLnRh",
            "eG9ub215Lm1vZGVsLmFydGlmYWN0Lk1hcHMijwEKEk5ld0FydGlmYWN0UmVx",
            "dWVzdBIzCgR0eXBlGAEgASgOMiUudGF4b25vbXkubW9kZWwuYXJ0aWZhY3Qu",
            "QXJ0aWZhY3RUeXBlEgwKBG5hbWUYAiABKAkSNgoKdG9rZW5fdHlwZRgDIAEo",
            "DjIiLnRheG9ub215Lm1vZGVsLmFydGlmYWN0LlRva2VuVHlwZSJ+ChNOZXdB",
            "cnRpZmFjdFJlc3BvbnNlEjMKBHR5cGUYASABKA4yJS50YXhvbm9teS5tb2Rl",
            "bC5hcnRpZmFjdC5BcnRpZmFjdFR5cGUSMgoUYXJ0aWZhY3RfdHlwZV9vYmpl",
            "Y3QYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55IoABChVVcGRhdGVBcnRp",
            "ZmFjdFJlcXVlc3QSMwoEdHlwZRgBIAEoDjIlLnRheG9ub215Lm1vZGVsLmFy",
            "dGlmYWN0LkFydGlmYWN0VHlwZRIyChRhcnRpZmFjdF90eXBlX29iamVjdBgC",
            "IAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkikgEKFlVwZGF0ZUFydGlmYWN0",
            "UmVzcG9uc2USMwoEdHlwZRgBIAEoDjIlLnRheG9ub215Lm1vZGVsLmFydGlm",
            "YWN0LkFydGlmYWN0VHlwZRIPCgd1cGRhdGVkGAIgASgIEjIKFGFydGlmYWN0",
            "X3R5cGVfb2JqZWN0GAMgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSKOAQoV",
            "RGVsZXRlQXJ0aWZhY3RSZXF1ZXN0EjMKBHR5cGUYASABKA4yJS50YXhvbm9t",
            "eS5tb2RlbC5hcnRpZmFjdC5BcnRpZmFjdFR5cGUSQAoPYXJ0aWZhY3Rfc3lt",
            "Ym9sGAIgASgLMicudGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQXJ0aWZhY3RT",
            "eW1ib2wiKQoWRGVsZXRlQXJ0aWZhY3RSZXNwb25zZRIPCgdkZWxldGVkGAEg",
            "ASgIKmMKCVRva2VuVHlwZRIMCghGVU5HSUJMRRAAEhAKDE5PTl9GVU5HSUJM",
            "RRABEhgKFEhZQlJJRF9GVU5HSUJMRV9ST09UEAISHAoYSFlCUklEX05PTl9G",
            "VU5HSUJMRV9ST09UEAMqYAoMQXJ0aWZhY3RUeXBlEggKBEJBU0UQABIMCghC",
            "RUhBVklPUhABEhIKDkJFSEFWSU9SX0dST1VQEAISEAoMUFJPUEVSVFlfU0VU",
            "EAMSEgoOVE9LRU5fVEVNUExBVEUQBCpCCg9BcnRpZmFjdENvbnRlbnQSDgoK",
            "REVGSU5JVElPThAAEgsKB0NPTlRST0wQARIHCgNVTUwQAhIJCgVPVEhFUhAD",
            "KkAKC01hcHBpbmdUeXBlEg8KC1NPVVJDRV9DT0RFEAASEgoOSU1QTEVNRU5U",
            "QVRJT04QARIMCghSRVNPVVJDRRACKnYKDlRhcmdldFBsYXRmb3JtEhUKEUVU",
            "SEVSRVVNX1NPTElESVRZEAASEAoMQ0hBSU5DT0RFX0dPEAESEgoOQ0hBSU5D",
            "T0RFX0pBVkEQAhISCg5DSEFJTkNPREVfTk9ERRADEgkKBUNPUkRBEAQSCAoE",
            "REFNTBAFQj0KHW9yZy50dGkudG9rZW5zLm1vZGVsLmFydGlmYWN0UAGqAhlU",
            "VEYuVG9rZW5zLk1vZGVsLkFydGlmYWN0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TTF.Tokens.Model.Artifact.TokenType), typeof(global::TTF.Tokens.Model.Artifact.ArtifactType), typeof(global::TTF.Tokens.Model.Artifact.ArtifactContent), typeof(global::TTF.Tokens.Model.Artifact.MappingType), typeof(global::TTF.Tokens.Model.Artifact.TargetPlatform), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.Artifact), global::TTF.Tokens.Model.Artifact.Artifact.Parser, new[]{ "Type", "Name", "Aliases", "ArtifactSymbol", "ControlUri", "ArtifactDefinition", "IncompatibleWithSymbols", "InfluencedBySymbols", "ArtifactFiles", "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.ArtifactSymbol), global::TTF.Tokens.Model.Artifact.ArtifactSymbol.Parser, new[]{ "VisualSymbol", "ToolingSymbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.SymbolInfluence), global::TTF.Tokens.Model.Artifact.SymbolInfluence.Parser, new[]{ "Description", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.ArtifactDefinition), global::TTF.Tokens.Model.Artifact.ArtifactDefinition.Parser, new[]{ "BusinessDescription", "BusinessExample", "Analogies", "Comments", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.ArtifactAnalogy), global::TTF.Tokens.Model.Artifact.ArtifactAnalogy.Parser, new[]{ "Name", "Description", "ArtifactDefinition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.ArtifactFile), global::TTF.Tokens.Model.Artifact.ArtifactFile.Parser, new[]{ "Content", "FileName", "FileData", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.Maps), global::TTF.Tokens.Model.Artifact.Maps.Parser, new[]{ "CodeReferences", "ImplementationReferences", "Resources", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.MapReference), global::TTF.Tokens.Model.Artifact.MapReference.Parser, new[]{ "MappingType", "Name", "Platform", "ReferencePath", "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.MapResourceEntry), global::TTF.Tokens.Model.Artifact.MapResourceEntry.Parser, new[]{ "MappingType", "Name", "Description", "ResourcePath", "Maps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.NewArtifactRequest), global::TTF.Tokens.Model.Artifact.NewArtifactRequest.Parser, new[]{ "Type", "Name", "TokenType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.NewArtifactResponse), global::TTF.Tokens.Model.Artifact.NewArtifactResponse.Parser, new[]{ "Type", "ArtifactTypeObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.UpdateArtifactRequest), global::TTF.Tokens.Model.Artifact.UpdateArtifactRequest.Parser, new[]{ "Type", "ArtifactTypeObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.UpdateArtifactResponse), global::TTF.Tokens.Model.Artifact.UpdateArtifactResponse.Parser, new[]{ "Type", "Updated", "ArtifactTypeObject" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.DeleteArtifactRequest), global::TTF.Tokens.Model.Artifact.DeleteArtifactRequest.Parser, new[]{ "Type", "ArtifactSymbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTF.Tokens.Model.Artifact.DeleteArtifactResponse), global::TTF.Tokens.Model.Artifact.DeleteArtifactResponse.Parser, new[]{ "Deleted" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TokenType {
    [pbr::OriginalName("FUNGIBLE")] Fungible = 0,
    [pbr::OriginalName("NON_FUNGIBLE")] NonFungible = 1,
    [pbr::OriginalName("HYBRID_FUNGIBLE_ROOT")] HybridFungibleRoot = 2,
    [pbr::OriginalName("HYBRID_NON_FUNGIBLE_ROOT")] HybridNonFungibleRoot = 3,
  }

  public enum ArtifactType {
    /// <summary>
    ///from core.Type
    /// </summary>
    [pbr::OriginalName("BASE")] Base = 0,
    [pbr::OriginalName("BEHAVIOR")] Behavior = 1,
    [pbr::OriginalName("BEHAVIOR_GROUP")] BehaviorGroup = 2,
    [pbr::OriginalName("PROPERTY_SET")] PropertySet = 3,
    /// <summary>
    ///complete token definition
    /// </summary>
    [pbr::OriginalName("TOKEN_TEMPLATE")] TokenTemplate = 4,
  }

  public enum ArtifactContent {
    /// <summary>
    ///html, MD, etc.
    /// </summary>
    [pbr::OriginalName("DEFINITION")] Definition = 0,
    /// <summary>
    ///proto
    /// </summary>
    [pbr::OriginalName("CONTROL")] Control = 1,
    /// <summary>
    ///md or other host UML
    /// </summary>
    [pbr::OriginalName("UML")] Uml = 2,
    /// <summary>
    ///any
    /// </summary>
    [pbr::OriginalName("OTHER")] Other = 3,
  }

  public enum MappingType {
    [pbr::OriginalName("SOURCE_CODE")] SourceCode = 0,
    [pbr::OriginalName("IMPLEMENTATION")] Implementation = 1,
    /// <summary>
    ///to an external informational source like a regulatory framework or related issue
    /// </summary>
    [pbr::OriginalName("RESOURCE")] Resource = 2,
  }

  public enum TargetPlatform {
    [pbr::OriginalName("ETHEREUM_SOLIDITY")] EthereumSolidity = 0,
    [pbr::OriginalName("CHAINCODE_GO")] ChaincodeGo = 1,
    [pbr::OriginalName("CHAINCODE_JAVA")] ChaincodeJava = 2,
    [pbr::OriginalName("CHAINCODE_NODE")] ChaincodeNode = 3,
    [pbr::OriginalName("CORDA")] Corda = 4,
    [pbr::OriginalName("DAML")] Daml = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///contains artifact metadata structure
  /// </summary>
  public sealed partial class Artifact : pb::IMessage<Artifact> {
    private static readonly pb::MessageParser<Artifact> _parser = new pb::MessageParser<Artifact>(() => new Artifact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artifact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact(Artifact other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      aliases_ = other.aliases_.Clone();
      artifactSymbol_ = other.artifactSymbol_ != null ? other.artifactSymbol_.Clone() : null;
      controlUri_ = other.controlUri_;
      artifactDefinition_ = other.artifactDefinition_ != null ? other.artifactDefinition_.Clone() : null;
      incompatibleWithSymbols_ = other.incompatibleWithSymbols_.Clone();
      influencedBySymbols_ = other.influencedBySymbols_.Clone();
      artifactFiles_ = other.artifactFiles_.Clone();
      maps_ = other.maps_ != null ? other.maps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact Clone() {
      return new Artifact(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aliases" field.</summary>
    public const int AliasesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_aliases_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> aliases_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Aliases {
      get { return aliases_; }
    }

    /// <summary>Field number for the "artifact_symbol" field.</summary>
    public const int ArtifactSymbolFieldNumber = 4;
    private global::TTF.Tokens.Model.Artifact.ArtifactSymbol artifactSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactSymbol ArtifactSymbol {
      get { return artifactSymbol_; }
      set {
        artifactSymbol_ = value;
      }
    }

    /// <summary>Field number for the "control_uri" field.</summary>
    public const int ControlUriFieldNumber = 5;
    private string controlUri_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ControlUri {
      get { return controlUri_; }
      set {
        controlUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_definition" field.</summary>
    public const int ArtifactDefinitionFieldNumber = 6;
    private global::TTF.Tokens.Model.Artifact.ArtifactDefinition artifactDefinition_;
    /// <summary>
    ///Base, Behavior or Behavior group type indicated by ArtifactType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactDefinition ArtifactDefinition {
      get { return artifactDefinition_; }
      set {
        artifactDefinition_ = value;
      }
    }

    /// <summary>Field number for the "incompatible_with_symbols" field.</summary>
    public const int IncompatibleWithSymbolsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.ArtifactSymbol> _repeated_incompatibleWithSymbols_codec
        = pb::FieldCodec.ForMessage(58, global::TTF.Tokens.Model.Artifact.ArtifactSymbol.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactSymbol> incompatibleWithSymbols_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactSymbol>();
    /// <summary>
    ///for behaviors that have opposites, or if another behavior or property-set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactSymbol> IncompatibleWithSymbols {
      get { return incompatibleWithSymbols_; }
    }

    /// <summary>Field number for the "influenced_by_symbols" field.</summary>
    public const int InfluencedBySymbolsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.SymbolInfluence> _repeated_influencedBySymbols_codec
        = pb::FieldCodec.ForMessage(66, global::TTF.Tokens.Model.Artifact.SymbolInfluence.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.SymbolInfluence> influencedBySymbols_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.SymbolInfluence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.SymbolInfluence> InfluencedBySymbols {
      get { return influencedBySymbols_; }
    }

    /// <summary>Field number for the "artifact_files" field.</summary>
    public const int ArtifactFilesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.ArtifactFile> _repeated_artifactFiles_codec
        = pb::FieldCodec.ForMessage(74, global::TTF.Tokens.Model.Artifact.ArtifactFile.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactFile> artifactFiles_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactFile>();
    /// <summary>
    ///loop through the files and read them in as bytes to produce a complete artifact object model instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactFile> ArtifactFiles {
      get { return artifactFiles_; }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 10;
    private global::TTF.Tokens.Model.Artifact.Maps maps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.Maps Maps {
      get { return maps_; }
      set {
        maps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artifact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artifact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if(!aliases_.Equals(other.aliases_)) return false;
      if (!object.Equals(ArtifactSymbol, other.ArtifactSymbol)) return false;
      if (ControlUri != other.ControlUri) return false;
      if (!object.Equals(ArtifactDefinition, other.ArtifactDefinition)) return false;
      if(!incompatibleWithSymbols_.Equals(other.incompatibleWithSymbols_)) return false;
      if(!influencedBySymbols_.Equals(other.influencedBySymbols_)) return false;
      if(!artifactFiles_.Equals(other.artifactFiles_)) return false;
      if (!object.Equals(Maps, other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= aliases_.GetHashCode();
      if (artifactSymbol_ != null) hash ^= ArtifactSymbol.GetHashCode();
      if (ControlUri.Length != 0) hash ^= ControlUri.GetHashCode();
      if (artifactDefinition_ != null) hash ^= ArtifactDefinition.GetHashCode();
      hash ^= incompatibleWithSymbols_.GetHashCode();
      hash ^= influencedBySymbols_.GetHashCode();
      hash ^= artifactFiles_.GetHashCode();
      if (maps_ != null) hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      aliases_.WriteTo(output, _repeated_aliases_codec);
      if (artifactSymbol_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ArtifactSymbol);
      }
      if (ControlUri.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ControlUri);
      }
      if (artifactDefinition_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ArtifactDefinition);
      }
      incompatibleWithSymbols_.WriteTo(output, _repeated_incompatibleWithSymbols_codec);
      influencedBySymbols_.WriteTo(output, _repeated_influencedBySymbols_codec);
      artifactFiles_.WriteTo(output, _repeated_artifactFiles_codec);
      if (maps_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Maps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += aliases_.CalculateSize(_repeated_aliases_codec);
      if (artifactSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactSymbol);
      }
      if (ControlUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ControlUri);
      }
      if (artifactDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactDefinition);
      }
      size += incompatibleWithSymbols_.CalculateSize(_repeated_incompatibleWithSymbols_codec);
      size += influencedBySymbols_.CalculateSize(_repeated_influencedBySymbols_codec);
      size += artifactFiles_.CalculateSize(_repeated_artifactFiles_codec);
      if (maps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artifact other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      aliases_.Add(other.aliases_);
      if (other.artifactSymbol_ != null) {
        if (artifactSymbol_ == null) {
          artifactSymbol_ = new global::TTF.Tokens.Model.Artifact.ArtifactSymbol();
        }
        ArtifactSymbol.MergeFrom(other.ArtifactSymbol);
      }
      if (other.ControlUri.Length != 0) {
        ControlUri = other.ControlUri;
      }
      if (other.artifactDefinition_ != null) {
        if (artifactDefinition_ == null) {
          artifactDefinition_ = new global::TTF.Tokens.Model.Artifact.ArtifactDefinition();
        }
        ArtifactDefinition.MergeFrom(other.ArtifactDefinition);
      }
      incompatibleWithSymbols_.Add(other.incompatibleWithSymbols_);
      influencedBySymbols_.Add(other.influencedBySymbols_);
      artifactFiles_.Add(other.artifactFiles_);
      if (other.maps_ != null) {
        if (maps_ == null) {
          maps_ = new global::TTF.Tokens.Model.Artifact.Maps();
        }
        Maps.MergeFrom(other.Maps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TTF.Tokens.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
            break;
          }
          case 34: {
            if (artifactSymbol_ == null) {
              artifactSymbol_ = new global::TTF.Tokens.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(artifactSymbol_);
            break;
          }
          case 42: {
            ControlUri = input.ReadString();
            break;
          }
          case 50: {
            if (artifactDefinition_ == null) {
              artifactDefinition_ = new global::TTF.Tokens.Model.Artifact.ArtifactDefinition();
            }
            input.ReadMessage(artifactDefinition_);
            break;
          }
          case 58: {
            incompatibleWithSymbols_.AddEntriesFrom(input, _repeated_incompatibleWithSymbols_codec);
            break;
          }
          case 66: {
            influencedBySymbols_.AddEntriesFrom(input, _repeated_influencedBySymbols_codec);
            break;
          }
          case 74: {
            artifactFiles_.AddEntriesFrom(input, _repeated_artifactFiles_codec);
            break;
          }
          case 82: {
            if (maps_ == null) {
              maps_ = new global::TTF.Tokens.Model.Artifact.Maps();
            }
            input.ReadMessage(maps_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactSymbol : pb::IMessage<ArtifactSymbol> {
    private static readonly pb::MessageParser<ArtifactSymbol> _parser = new pb::MessageParser<ArtifactSymbol>(() => new ArtifactSymbol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactSymbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactSymbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactSymbol(ArtifactSymbol other) : this() {
      visualSymbol_ = other.visualSymbol_;
      toolingSymbol_ = other.toolingSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactSymbol Clone() {
      return new ArtifactSymbol(this);
    }

    /// <summary>Field number for the "visual_symbol" field.</summary>
    public const int VisualSymbolFieldNumber = 4;
    private string visualSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisualSymbol {
      get { return visualSymbol_; }
      set {
        visualSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tooling_symbol" field.</summary>
    public const int ToolingSymbolFieldNumber = 5;
    private string toolingSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToolingSymbol {
      get { return toolingSymbol_; }
      set {
        toolingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactSymbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactSymbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisualSymbol != other.VisualSymbol) return false;
      if (ToolingSymbol != other.ToolingSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisualSymbol.Length != 0) hash ^= VisualSymbol.GetHashCode();
      if (ToolingSymbol.Length != 0) hash ^= ToolingSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisualSymbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VisualSymbol);
      }
      if (ToolingSymbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ToolingSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisualSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisualSymbol);
      }
      if (ToolingSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToolingSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactSymbol other) {
      if (other == null) {
        return;
      }
      if (other.VisualSymbol.Length != 0) {
        VisualSymbol = other.VisualSymbol;
      }
      if (other.ToolingSymbol.Length != 0) {
        ToolingSymbol = other.ToolingSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 34: {
            VisualSymbol = input.ReadString();
            break;
          }
          case 42: {
            ToolingSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SymbolInfluence : pb::IMessage<SymbolInfluence> {
    private static readonly pb::MessageParser<SymbolInfluence> _parser = new pb::MessageParser<SymbolInfluence>(() => new SymbolInfluence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolInfluence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfluence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfluence(SymbolInfluence other) : this() {
      description_ = other.description_;
      symbol_ = other.symbol_ != null ? other.symbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolInfluence Clone() {
      return new SymbolInfluence(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    ///describe how the symbol influences this artifact, like non-sub-dividable or delegable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private global::TTF.Tokens.Model.Artifact.ArtifactSymbol symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactSymbol Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolInfluence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolInfluence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!object.Equals(Symbol, other.Symbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (symbol_ != null) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      if (symbol_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (symbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolInfluence other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.symbol_ != null) {
        if (symbol_ == null) {
          symbol_ = new global::TTF.Tokens.Model.Artifact.ArtifactSymbol();
        }
        Symbol.MergeFrom(other.Symbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            if (symbol_ == null) {
              symbol_ = new global::TTF.Tokens.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(symbol_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactDefinition : pb::IMessage<ArtifactDefinition> {
    private static readonly pb::MessageParser<ArtifactDefinition> _parser = new pb::MessageParser<ArtifactDefinition>(() => new ArtifactDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactDefinition(ArtifactDefinition other) : this() {
      businessDescription_ = other.businessDescription_;
      businessExample_ = other.businessExample_;
      analogies_ = other.analogies_.Clone();
      comments_ = other.comments_;
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactDefinition Clone() {
      return new ArtifactDefinition(this);
    }

    /// <summary>Field number for the "business_description" field.</summary>
    public const int BusinessDescriptionFieldNumber = 1;
    private string businessDescription_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessDescription {
      get { return businessDescription_; }
      set {
        businessDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "business_example" field.</summary>
    public const int BusinessExampleFieldNumber = 2;
    private string businessExample_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BusinessExample {
      get { return businessExample_; }
      set {
        businessExample_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "analogies" field.</summary>
    public const int AnalogiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.ArtifactAnalogy> _repeated_analogies_codec
        = pb::FieldCodec.ForMessage(26, global::TTF.Tokens.Model.Artifact.ArtifactAnalogy.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactAnalogy> analogies_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactAnalogy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.ArtifactAnalogy> Analogies {
      get { return analogies_; }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 4;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 5;
    private global::TTF.Tokens.Model.Artifact.Artifact artifact_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.Artifact Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BusinessDescription != other.BusinessDescription) return false;
      if (BusinessExample != other.BusinessExample) return false;
      if(!analogies_.Equals(other.analogies_)) return false;
      if (Comments != other.Comments) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BusinessDescription.Length != 0) hash ^= BusinessDescription.GetHashCode();
      if (BusinessExample.Length != 0) hash ^= BusinessExample.GetHashCode();
      hash ^= analogies_.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BusinessDescription.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BusinessDescription);
      }
      if (BusinessExample.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BusinessExample);
      }
      analogies_.WriteTo(output, _repeated_analogies_codec);
      if (Comments.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Comments);
      }
      if (artifact_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BusinessDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessDescription);
      }
      if (BusinessExample.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessExample);
      }
      size += analogies_.CalculateSize(_repeated_analogies_codec);
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactDefinition other) {
      if (other == null) {
        return;
      }
      if (other.BusinessDescription.Length != 0) {
        BusinessDescription = other.BusinessDescription;
      }
      if (other.BusinessExample.Length != 0) {
        BusinessExample = other.BusinessExample;
      }
      analogies_.Add(other.analogies_);
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          artifact_ = new global::TTF.Tokens.Model.Artifact.Artifact();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BusinessDescription = input.ReadString();
            break;
          }
          case 18: {
            BusinessExample = input.ReadString();
            break;
          }
          case 26: {
            analogies_.AddEntriesFrom(input, _repeated_analogies_codec);
            break;
          }
          case 34: {
            Comments = input.ReadString();
            break;
          }
          case 42: {
            if (artifact_ == null) {
              artifact_ = new global::TTF.Tokens.Model.Artifact.Artifact();
            }
            input.ReadMessage(artifact_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactAnalogy : pb::IMessage<ArtifactAnalogy> {
    private static readonly pb::MessageParser<ArtifactAnalogy> _parser = new pb::MessageParser<ArtifactAnalogy>(() => new ArtifactAnalogy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactAnalogy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactAnalogy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactAnalogy(ArtifactAnalogy other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      artifactDefinition_ = other.artifactDefinition_ != null ? other.artifactDefinition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactAnalogy Clone() {
      return new ArtifactAnalogy(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact_definition" field.</summary>
    public const int ArtifactDefinitionFieldNumber = 3;
    private global::TTF.Tokens.Model.Artifact.ArtifactDefinition artifactDefinition_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactDefinition ArtifactDefinition {
      get { return artifactDefinition_; }
      set {
        artifactDefinition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactAnalogy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactAnalogy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(ArtifactDefinition, other.ArtifactDefinition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (artifactDefinition_ != null) hash ^= ArtifactDefinition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (artifactDefinition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ArtifactDefinition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (artifactDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactDefinition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactAnalogy other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.artifactDefinition_ != null) {
        if (artifactDefinition_ == null) {
          artifactDefinition_ = new global::TTF.Tokens.Model.Artifact.ArtifactDefinition();
        }
        ArtifactDefinition.MergeFrom(other.ArtifactDefinition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            if (artifactDefinition_ == null) {
              artifactDefinition_ = new global::TTF.Tokens.Model.Artifact.ArtifactDefinition();
            }
            input.ReadMessage(artifactDefinition_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtifactFile : pb::IMessage<ArtifactFile> {
    private static readonly pb::MessageParser<ArtifactFile> _parser = new pb::MessageParser<ArtifactFile>(() => new ArtifactFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactFile(ArtifactFile other) : this() {
      content_ = other.content_;
      fileName_ = other.fileName_;
      fileData_ = other.fileData_;
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactFile Clone() {
      return new ArtifactFile(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactContent content_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactContent Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 2;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file_data" field.</summary>
    public const int FileDataFieldNumber = 3;
    private pb::ByteString fileData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FileData {
      get { return fileData_; }
      set {
        fileData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 4;
    private global::TTF.Tokens.Model.Artifact.Artifact artifact_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.Artifact Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (FileName != other.FileName) return false;
      if (FileData != other.FileData) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content != 0) hash ^= Content.GetHashCode();
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (FileData.Length != 0) hash ^= FileData.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Content);
      }
      if (FileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileName);
      }
      if (FileData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(FileData);
      }
      if (artifact_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Content);
      }
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (FileData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FileData);
      }
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactFile other) {
      if (other == null) {
        return;
      }
      if (other.Content != 0) {
        Content = other.Content;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      if (other.FileData.Length != 0) {
        FileData = other.FileData;
      }
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          artifact_ = new global::TTF.Tokens.Model.Artifact.Artifact();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            content_ = (global::TTF.Tokens.Model.Artifact.ArtifactContent) input.ReadEnum();
            break;
          }
          case 18: {
            FileName = input.ReadString();
            break;
          }
          case 26: {
            FileData = input.ReadBytes();
            break;
          }
          case 34: {
            if (artifact_ == null) {
              artifact_ = new global::TTF.Tokens.Model.Artifact.Artifact();
            }
            input.ReadMessage(artifact_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Maps : pb::IMessage<Maps> {
    private static readonly pb::MessageParser<Maps> _parser = new pb::MessageParser<Maps>(() => new Maps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Maps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maps(Maps other) : this() {
      codeReferences_ = other.codeReferences_.Clone();
      implementationReferences_ = other.implementationReferences_.Clone();
      resources_ = other.resources_.Clone();
      artifact_ = other.artifact_ != null ? other.artifact_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maps Clone() {
      return new Maps(this);
    }

    /// <summary>Field number for the "code_references" field.</summary>
    public const int CodeReferencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.MapReference> _repeated_codeReferences_codec
        = pb::FieldCodec.ForMessage(10, global::TTF.Tokens.Model.Artifact.MapReference.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapReference> codeReferences_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapReference> CodeReferences {
      get { return codeReferences_; }
    }

    /// <summary>Field number for the "implementation_references" field.</summary>
    public const int ImplementationReferencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.MapReference> _repeated_implementationReferences_codec
        = pb::FieldCodec.ForMessage(18, global::TTF.Tokens.Model.Artifact.MapReference.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapReference> implementationReferences_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapReference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapReference> ImplementationReferences {
      get { return implementationReferences_; }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::TTF.Tokens.Model.Artifact.MapResourceEntry> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(26, global::TTF.Tokens.Model.Artifact.MapResourceEntry.Parser);
    private readonly pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapResourceEntry> resources_ = new pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapResourceEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TTF.Tokens.Model.Artifact.MapResourceEntry> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 4;
    private global::TTF.Tokens.Model.Artifact.Artifact artifact_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.Artifact Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Maps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Maps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!codeReferences_.Equals(other.codeReferences_)) return false;
      if(!implementationReferences_.Equals(other.implementationReferences_)) return false;
      if(!resources_.Equals(other.resources_)) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= codeReferences_.GetHashCode();
      hash ^= implementationReferences_.GetHashCode();
      hash ^= resources_.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      codeReferences_.WriteTo(output, _repeated_codeReferences_codec);
      implementationReferences_.WriteTo(output, _repeated_implementationReferences_codec);
      resources_.WriteTo(output, _repeated_resources_codec);
      if (artifact_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Artifact);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += codeReferences_.CalculateSize(_repeated_codeReferences_codec);
      size += implementationReferences_.CalculateSize(_repeated_implementationReferences_codec);
      size += resources_.CalculateSize(_repeated_resources_codec);
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Maps other) {
      if (other == null) {
        return;
      }
      codeReferences_.Add(other.codeReferences_);
      implementationReferences_.Add(other.implementationReferences_);
      resources_.Add(other.resources_);
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          artifact_ = new global::TTF.Tokens.Model.Artifact.Artifact();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            codeReferences_.AddEntriesFrom(input, _repeated_codeReferences_codec);
            break;
          }
          case 18: {
            implementationReferences_.AddEntriesFrom(input, _repeated_implementationReferences_codec);
            break;
          }
          case 26: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 34: {
            if (artifact_ == null) {
              artifact_ = new global::TTF.Tokens.Model.Artifact.Artifact();
            }
            input.ReadMessage(artifact_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapReference : pb::IMessage<MapReference> {
    private static readonly pb::MessageParser<MapReference> _parser = new pb::MessageParser<MapReference>(() => new MapReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReference(MapReference other) : this() {
      mappingType_ = other.mappingType_;
      name_ = other.name_;
      platform_ = other.platform_;
      referencePath_ = other.referencePath_;
      maps_ = other.maps_ != null ? other.maps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapReference Clone() {
      return new MapReference(this);
    }

    /// <summary>Field number for the "mapping_type" field.</summary>
    public const int MappingTypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.MappingType mappingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.MappingType MappingType {
      get { return mappingType_; }
      set {
        mappingType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private global::TTF.Tokens.Model.Artifact.TargetPlatform platform_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.TargetPlatform Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "reference_path" field.</summary>
    public const int ReferencePathFieldNumber = 4;
    private string referencePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReferencePath {
      get { return referencePath_; }
      set {
        referencePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 5;
    private global::TTF.Tokens.Model.Artifact.Maps maps_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.Maps Maps {
      get { return maps_; }
      set {
        maps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MappingType != other.MappingType) return false;
      if (Name != other.Name) return false;
      if (Platform != other.Platform) return false;
      if (ReferencePath != other.ReferencePath) return false;
      if (!object.Equals(Maps, other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MappingType != 0) hash ^= MappingType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Platform != 0) hash ^= Platform.GetHashCode();
      if (ReferencePath.Length != 0) hash ^= ReferencePath.GetHashCode();
      if (maps_ != null) hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MappingType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MappingType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Platform != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Platform);
      }
      if (ReferencePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReferencePath);
      }
      if (maps_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Maps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MappingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MappingType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Platform != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
      }
      if (ReferencePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferencePath);
      }
      if (maps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapReference other) {
      if (other == null) {
        return;
      }
      if (other.MappingType != 0) {
        MappingType = other.MappingType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Platform != 0) {
        Platform = other.Platform;
      }
      if (other.ReferencePath.Length != 0) {
        ReferencePath = other.ReferencePath;
      }
      if (other.maps_ != null) {
        if (maps_ == null) {
          maps_ = new global::TTF.Tokens.Model.Artifact.Maps();
        }
        Maps.MergeFrom(other.Maps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mappingType_ = (global::TTF.Tokens.Model.Artifact.MappingType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            platform_ = (global::TTF.Tokens.Model.Artifact.TargetPlatform) input.ReadEnum();
            break;
          }
          case 34: {
            ReferencePath = input.ReadString();
            break;
          }
          case 42: {
            if (maps_ == null) {
              maps_ = new global::TTF.Tokens.Model.Artifact.Maps();
            }
            input.ReadMessage(maps_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapResourceEntry : pb::IMessage<MapResourceEntry> {
    private static readonly pb::MessageParser<MapResourceEntry> _parser = new pb::MessageParser<MapResourceEntry>(() => new MapResourceEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapResourceEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapResourceEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapResourceEntry(MapResourceEntry other) : this() {
      mappingType_ = other.mappingType_;
      name_ = other.name_;
      description_ = other.description_;
      resourcePath_ = other.resourcePath_;
      maps_ = other.maps_ != null ? other.maps_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapResourceEntry Clone() {
      return new MapResourceEntry(this);
    }

    /// <summary>Field number for the "mapping_type" field.</summary>
    public const int MappingTypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.MappingType mappingType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.MappingType MappingType {
      get { return mappingType_; }
      set {
        mappingType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_path" field.</summary>
    public const int ResourcePathFieldNumber = 4;
    private string resourcePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePath {
      get { return resourcePath_; }
      set {
        resourcePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maps" field.</summary>
    public const int MapsFieldNumber = 5;
    private global::TTF.Tokens.Model.Artifact.Maps maps_;
    /// <summary>
    ///navigation to parent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.Maps Maps {
      get { return maps_; }
      set {
        maps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapResourceEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapResourceEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MappingType != other.MappingType) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ResourcePath != other.ResourcePath) return false;
      if (!object.Equals(Maps, other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MappingType != 0) hash ^= MappingType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ResourcePath.Length != 0) hash ^= ResourcePath.GetHashCode();
      if (maps_ != null) hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MappingType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MappingType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ResourcePath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ResourcePath);
      }
      if (maps_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Maps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MappingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MappingType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ResourcePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePath);
      }
      if (maps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Maps);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapResourceEntry other) {
      if (other == null) {
        return;
      }
      if (other.MappingType != 0) {
        MappingType = other.MappingType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ResourcePath.Length != 0) {
        ResourcePath = other.ResourcePath;
      }
      if (other.maps_ != null) {
        if (maps_ == null) {
          maps_ = new global::TTF.Tokens.Model.Artifact.Maps();
        }
        Maps.MergeFrom(other.Maps);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mappingType_ = (global::TTF.Tokens.Model.Artifact.MappingType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ResourcePath = input.ReadString();
            break;
          }
          case 42: {
            if (maps_ == null) {
              maps_ = new global::TTF.Tokens.Model.Artifact.Maps();
            }
            input.ReadMessage(maps_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewArtifactRequest : pb::IMessage<NewArtifactRequest> {
    private static readonly pb::MessageParser<NewArtifactRequest> _parser = new pb::MessageParser<NewArtifactRequest>(() => new NewArtifactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewArtifactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactRequest(NewArtifactRequest other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      tokenType_ = other.tokenType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactRequest Clone() {
      return new NewArtifactRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_type" field.</summary>
    public const int TokenTypeFieldNumber = 3;
    private global::TTF.Tokens.Model.Artifact.TokenType tokenType_ = 0;
    /// <summary>
    ///if ArtifactType Base or TokenTemplate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.TokenType TokenType {
      get { return tokenType_; }
      set {
        tokenType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewArtifactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewArtifactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (TokenType != other.TokenType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TokenType != 0) hash ^= TokenType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TokenType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TokenType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TokenType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TokenType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewArtifactRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TokenType != 0) {
        TokenType = other.TokenType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TTF.Tokens.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            tokenType_ = (global::TTF.Tokens.Model.Artifact.TokenType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewArtifactResponse : pb::IMessage<NewArtifactResponse> {
    private static readonly pb::MessageParser<NewArtifactResponse> _parser = new pb::MessageParser<NewArtifactResponse>(() => new NewArtifactResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewArtifactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactResponse(NewArtifactResponse other) : this() {
      type_ = other.type_;
      artifactTypeObject_ = other.artifactTypeObject_ != null ? other.artifactTypeObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewArtifactResponse Clone() {
      return new NewArtifactResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "artifact_type_object" field.</summary>
    public const int ArtifactTypeObjectFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any artifactTypeObject_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactTypeObject {
      get { return artifactTypeObject_; }
      set {
        artifactTypeObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewArtifactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewArtifactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ArtifactTypeObject, other.ArtifactTypeObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (artifactTypeObject_ != null) hash ^= ArtifactTypeObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (artifactTypeObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (artifactTypeObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewArtifactResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.artifactTypeObject_ != null) {
        if (artifactTypeObject_ == null) {
          artifactTypeObject_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactTypeObject.MergeFrom(other.ArtifactTypeObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TTF.Tokens.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            if (artifactTypeObject_ == null) {
              artifactTypeObject_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(artifactTypeObject_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateArtifactRequest : pb::IMessage<UpdateArtifactRequest> {
    private static readonly pb::MessageParser<UpdateArtifactRequest> _parser = new pb::MessageParser<UpdateArtifactRequest>(() => new UpdateArtifactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateArtifactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactRequest(UpdateArtifactRequest other) : this() {
      type_ = other.type_;
      artifactTypeObject_ = other.artifactTypeObject_ != null ? other.artifactTypeObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactRequest Clone() {
      return new UpdateArtifactRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "artifact_type_object" field.</summary>
    public const int ArtifactTypeObjectFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any artifactTypeObject_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactTypeObject {
      get { return artifactTypeObject_; }
      set {
        artifactTypeObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateArtifactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateArtifactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ArtifactTypeObject, other.ArtifactTypeObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (artifactTypeObject_ != null) hash ^= ArtifactTypeObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (artifactTypeObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (artifactTypeObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateArtifactRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.artifactTypeObject_ != null) {
        if (artifactTypeObject_ == null) {
          artifactTypeObject_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactTypeObject.MergeFrom(other.ArtifactTypeObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TTF.Tokens.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            if (artifactTypeObject_ == null) {
              artifactTypeObject_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(artifactTypeObject_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateArtifactResponse : pb::IMessage<UpdateArtifactResponse> {
    private static readonly pb::MessageParser<UpdateArtifactResponse> _parser = new pb::MessageParser<UpdateArtifactResponse>(() => new UpdateArtifactResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateArtifactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactResponse(UpdateArtifactResponse other) : this() {
      type_ = other.type_;
      updated_ = other.updated_;
      artifactTypeObject_ = other.artifactTypeObject_ != null ? other.artifactTypeObject_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateArtifactResponse Clone() {
      return new UpdateArtifactResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 2;
    private bool updated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "artifact_type_object" field.</summary>
    public const int ArtifactTypeObjectFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Any artifactTypeObject_;
    /// <summary>
    ///updated type, deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ArtifactTypeObject {
      get { return artifactTypeObject_; }
      set {
        artifactTypeObject_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateArtifactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateArtifactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Updated != other.Updated) return false;
      if (!object.Equals(ArtifactTypeObject, other.ArtifactTypeObject)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Updated != false) hash ^= Updated.GetHashCode();
      if (artifactTypeObject_ != null) hash ^= ArtifactTypeObject.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Updated != false) {
        output.WriteRawTag(16);
        output.WriteBool(Updated);
      }
      if (artifactTypeObject_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Updated != false) {
        size += 1 + 1;
      }
      if (artifactTypeObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactTypeObject);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateArtifactResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Updated != false) {
        Updated = other.Updated;
      }
      if (other.artifactTypeObject_ != null) {
        if (artifactTypeObject_ == null) {
          artifactTypeObject_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ArtifactTypeObject.MergeFrom(other.ArtifactTypeObject);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TTF.Tokens.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 16: {
            Updated = input.ReadBool();
            break;
          }
          case 26: {
            if (artifactTypeObject_ == null) {
              artifactTypeObject_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(artifactTypeObject_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteArtifactRequest : pb::IMessage<DeleteArtifactRequest> {
    private static readonly pb::MessageParser<DeleteArtifactRequest> _parser = new pb::MessageParser<DeleteArtifactRequest>(() => new DeleteArtifactRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteArtifactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactRequest(DeleteArtifactRequest other) : this() {
      type_ = other.type_;
      artifactSymbol_ = other.artifactSymbol_ != null ? other.artifactSymbol_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactRequest Clone() {
      return new DeleteArtifactRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TTF.Tokens.Model.Artifact.ArtifactType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "artifact_symbol" field.</summary>
    public const int ArtifactSymbolFieldNumber = 2;
    private global::TTF.Tokens.Model.Artifact.ArtifactSymbol artifactSymbol_;
    /// <summary>
    ///deserialize based on type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TTF.Tokens.Model.Artifact.ArtifactSymbol ArtifactSymbol {
      get { return artifactSymbol_; }
      set {
        artifactSymbol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteArtifactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteArtifactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(ArtifactSymbol, other.ArtifactSymbol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (artifactSymbol_ != null) hash ^= ArtifactSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (artifactSymbol_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArtifactSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (artifactSymbol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArtifactSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteArtifactRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.artifactSymbol_ != null) {
        if (artifactSymbol_ == null) {
          artifactSymbol_ = new global::TTF.Tokens.Model.Artifact.ArtifactSymbol();
        }
        ArtifactSymbol.MergeFrom(other.ArtifactSymbol);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TTF.Tokens.Model.Artifact.ArtifactType) input.ReadEnum();
            break;
          }
          case 18: {
            if (artifactSymbol_ == null) {
              artifactSymbol_ = new global::TTF.Tokens.Model.Artifact.ArtifactSymbol();
            }
            input.ReadMessage(artifactSymbol_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteArtifactResponse : pb::IMessage<DeleteArtifactResponse> {
    private static readonly pb::MessageParser<DeleteArtifactResponse> _parser = new pb::MessageParser<DeleteArtifactResponse>(() => new DeleteArtifactResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteArtifactResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTF.Tokens.Model.Artifact.ArtifactReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactResponse(DeleteArtifactResponse other) : this() {
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteArtifactResponse Clone() {
      return new DeleteArtifactResponse(this);
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 1;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteArtifactResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteArtifactResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Deleted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Deleted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteArtifactResponse other) {
      if (other == null) {
        return;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
