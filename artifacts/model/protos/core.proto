syntax = "proto3";

package taxonomy.model.core;

import "google/protobuf/any.proto";
import "artifact.proto";

option csharp_namespace = "TTF.Tokens.Model.Core";
option java_package = "org.tti.tokens.model.core";
option java_multiple_files = true;

enum Type {
    FUNGIBLE = 0;
    NON_FUNGIBLE = 1;
    HYBRID_FUNGIBLE_ROOT = 2;
    HYBRID_NON_FUNGIBLE_ROOT = 3;
}

//all tokens inherit from the base and implicitly support construction.  The properties represent non-behavioral properties, with the exception of Decimals which is used by the Subdividable or Non-Subdividable behavior where any value greater than 0 makes the token subdividable.
message Base{
    taxonomy.model.artifact.Artifact artifact = 1;
    string name = 2;  //A common well understood name that represents the Token Class.  All instances, or tokens, within this class will be referred to by their class name.
    string symbol = 3; //an optionally unique symbol or identifier
    string owner = 4; //A reference to the owner of the token class or instance which can be a blockchain address, public key or other unique identifier.
    bytes quantity = 5; //Can represent the initial quantity created or the total minted or issued for the class.
    int32 decimals = 6; //A number of decimal places a single token can be subdivided into.  A typical fiat currency has a value of 2, i.e. $100.53. A value of 0 means that subdivision is not supported and a whole token is the smallest unit of the token that can be owned.
    map<string, string> token_properties = 7; //Generic non-behavioral properties as a list of simple `name, value` pairs that can be implemented without property invocations for each.
}

message Behavior{
    taxonomy.model.artifact.Artifact artifact = 1;
    bool external = 2;
    string behavior_constructor_name = 3; //proto message name empty if there is no constructor, used when unpacking the Any.
    google.protobuf.Any behavior_constructor = 4; //optionally retrieved for behaviors like Role Support that needs input when setting up the roles when the token class is created.  Uses Any as the type as it will not be known by the framework.
    repeated Invocation behavior_invocations = 5;
    repeated Property behavioral_properties = 6; //for any properties that should be added to the token if the behavior is implemented.
}

message BehaviorGroup{
    taxonomy.model.artifact.Artifact artifact = 1;
    repeated model.artifact.ArtifactSymbol behavior_symbols = 2;
    map<string, model.artifact.Artifact> member_behavior_artifacts = 3; //if retrieved this can be populated with the behaviors nested in the group.
}

message PropertySet{
    taxonomy.model.artifact.Artifact artifact = 1;
    repeated Property properties = 2;
}

message Property{
    string name = 1;
    string value_description = 2; 
    repeated Invocation property_invocations = 3;
}

message TokenTemplate {
    taxonomy.model.artifact.Artifact artifact = 1;
    Type type = 2;
    Base base = 3;
    repeated Behavior behaviors = 4;
    repeated BehaviorGroup behavior_groups = 5;
    repeated PropertySet property_sets = 6;
}

message Invocation{
    string name = 1; //property name if a property-set
    string description = 2; //include the data type for the value.
    InvocationRequest request = 3;
    InvocationResponse response = 4;
}

message InvocationRequest{
    string control_message_name = 1;
    repeated InvocationParameter input_parameters = 2;
    string description = 3;
}

message InvocationResponse{
    string control_message_name = 1;
    repeated InvocationParameter output_parameters = 2;
    string description = 3;
}

message InvocationParameter{
    string name = 1;
    string value_description = 2; //describe the data type and restrictions like length.
}